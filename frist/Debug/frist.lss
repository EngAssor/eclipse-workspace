
frist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000204  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000002e3  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "LIB/Bit_Math.h"
#define DDRA *((u8 *) 0x3A)

#define PORTA *((u8 *) 0x3B)
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
DDRA = 0b00000001;
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 83       	st	Z, r24

while(1)
{
	PORTA =0b00000001;
  80:	eb e3       	ldi	r30, 0x3B	; 59
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	80 83       	st	Z, r24
	for(int i=0;i<25000;i++);
  88:	1c 82       	std	Y+4, r1	; 0x04
  8a:	1b 82       	std	Y+3, r1	; 0x03
  8c:	05 c0       	rjmp	.+10     	; 0x98 <main+0x2c>
  8e:	8b 81       	ldd	r24, Y+3	; 0x03
  90:	9c 81       	ldd	r25, Y+4	; 0x04
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	9c 83       	std	Y+4, r25	; 0x04
  96:	8b 83       	std	Y+3, r24	; 0x03
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	21 e6       	ldi	r18, 0x61	; 97
  9e:	88 3a       	cpi	r24, 0xA8	; 168
  a0:	92 07       	cpc	r25, r18
  a2:	ac f3       	brlt	.-22     	; 0x8e <main+0x22>
	PORTA =0b00000000;
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
	for(int i=0;i<25000;i++);
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	05 c0       	rjmp	.+10     	; 0xba <main+0x4e>
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	9a 81       	ldd	r25, Y+2	; 0x02
  be:	21 e6       	ldi	r18, 0x61	; 97
  c0:	88 3a       	cpi	r24, 0xA8	; 168
  c2:	92 07       	cpc	r25, r18
  c4:	ac f3       	brlt	.-22     	; 0xb0 <main+0x44>
  c6:	dc cf       	rjmp	.-72     	; 0x80 <main+0x14>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
