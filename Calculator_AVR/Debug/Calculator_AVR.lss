
Calculator_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00800060  00004e68  00004edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002d9c  00000000  00000000  0000506c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014ce  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000092d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  00009476  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ce6  00000000  00000000  00009666  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001354  00000000  00000000  0000c34c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001308  00000000  00000000  0000d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000e9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000340  00000000  00000000  0000eb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021ec  00000000  00000000  0000eea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00011094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <main>
      7a:	0c 94 32 27 	jmp	0x4e64	; 0x4e64 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__ashldi3>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	df 93       	push	r29
      8a:	cf 93       	push	r28
      8c:	cd b7       	in	r28, 0x3d	; 61
      8e:	de b7       	in	r29, 0x3e	; 62
      90:	60 97       	sbiw	r28, 0x10	; 16
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	f8 94       	cli
      96:	de bf       	out	0x3e, r29	; 62
      98:	0f be       	out	0x3f, r0	; 63
      9a:	cd bf       	out	0x3d, r28	; 61
      9c:	a8 2f       	mov	r26, r24
      9e:	00 23       	and	r16, r16
      a0:	09 f4       	brne	.+2      	; 0xa4 <__ashldi3+0x22>
      a2:	61 c0       	rjmp	.+194    	; 0x166 <__ashldi3+0xe4>
      a4:	7e 01       	movw	r14, r28
      a6:	08 94       	sec
      a8:	e1 1c       	adc	r14, r1
      aa:	f1 1c       	adc	r15, r1
      ac:	88 e0       	ldi	r24, 0x08	; 8
      ae:	f7 01       	movw	r30, r14
      b0:	11 92       	st	Z+, r1
      b2:	8a 95       	dec	r24
      b4:	e9 f7       	brne	.-6      	; 0xb0 <__ashldi3+0x2e>
      b6:	29 83       	std	Y+1, r18	; 0x01
      b8:	3a 83       	std	Y+2, r19	; 0x02
      ba:	4b 83       	std	Y+3, r20	; 0x03
      bc:	5c 83       	std	Y+4, r21	; 0x04
      be:	6d 83       	std	Y+5, r22	; 0x05
      c0:	7e 83       	std	Y+6, r23	; 0x06
      c2:	af 83       	std	Y+7, r26	; 0x07
      c4:	98 87       	std	Y+8, r25	; 0x08
      c6:	80 e2       	ldi	r24, 0x20	; 32
      c8:	80 1b       	sub	r24, r16
      ca:	e8 2f       	mov	r30, r24
      cc:	ff 27       	eor	r31, r31
      ce:	e7 fd       	sbrc	r30, 7
      d0:	f0 95       	com	r31
      d2:	49 81       	ldd	r20, Y+1	; 0x01
      d4:	5a 81       	ldd	r21, Y+2	; 0x02
      d6:	6b 81       	ldd	r22, Y+3	; 0x03
      d8:	7c 81       	ldd	r23, Y+4	; 0x04
      da:	18 16       	cp	r1, r24
      dc:	84 f0       	brlt	.+32     	; 0xfe <__ashldi3+0x7c>
      de:	19 86       	std	Y+9, r1	; 0x09
      e0:	1a 86       	std	Y+10, r1	; 0x0a
      e2:	1b 86       	std	Y+11, r1	; 0x0b
      e4:	1c 86       	std	Y+12, r1	; 0x0c
      e6:	88 27       	eor	r24, r24
      e8:	99 27       	eor	r25, r25
      ea:	8e 1b       	sub	r24, r30
      ec:	9f 0b       	sbc	r25, r31
      ee:	04 c0       	rjmp	.+8      	; 0xf8 <__ashldi3+0x76>
      f0:	44 0f       	add	r20, r20
      f2:	55 1f       	adc	r21, r21
      f4:	66 1f       	adc	r22, r22
      f6:	77 1f       	adc	r23, r23
      f8:	8a 95       	dec	r24
      fa:	d2 f7       	brpl	.-12     	; 0xf0 <__ashldi3+0x6e>
      fc:	28 c0       	rjmp	.+80     	; 0x14e <__ashldi3+0xcc>
      fe:	20 2f       	mov	r18, r16
     100:	33 27       	eor	r19, r19
     102:	27 fd       	sbrc	r18, 7
     104:	30 95       	com	r19
     106:	db 01       	movw	r26, r22
     108:	ca 01       	movw	r24, r20
     10a:	02 2e       	mov	r0, r18
     10c:	04 c0       	rjmp	.+8      	; 0x116 <__ashldi3+0x94>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	aa 1f       	adc	r26, r26
     114:	bb 1f       	adc	r27, r27
     116:	0a 94       	dec	r0
     118:	d2 f7       	brpl	.-12     	; 0x10e <__ashldi3+0x8c>
     11a:	89 87       	std	Y+9, r24	; 0x09
     11c:	9a 87       	std	Y+10, r25	; 0x0a
     11e:	ab 87       	std	Y+11, r26	; 0x0b
     120:	bc 87       	std	Y+12, r27	; 0x0c
     122:	04 c0       	rjmp	.+8      	; 0x12c <__ashldi3+0xaa>
     124:	76 95       	lsr	r23
     126:	67 95       	ror	r22
     128:	57 95       	ror	r21
     12a:	47 95       	ror	r20
     12c:	ea 95       	dec	r30
     12e:	d2 f7       	brpl	.-12     	; 0x124 <__ashldi3+0xa2>
     130:	8d 81       	ldd	r24, Y+5	; 0x05
     132:	9e 81       	ldd	r25, Y+6	; 0x06
     134:	af 81       	ldd	r26, Y+7	; 0x07
     136:	b8 85       	ldd	r27, Y+8	; 0x08
     138:	04 c0       	rjmp	.+8      	; 0x142 <__ashldi3+0xc0>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	aa 1f       	adc	r26, r26
     140:	bb 1f       	adc	r27, r27
     142:	2a 95       	dec	r18
     144:	d2 f7       	brpl	.-12     	; 0x13a <__ashldi3+0xb8>
     146:	48 2b       	or	r20, r24
     148:	59 2b       	or	r21, r25
     14a:	6a 2b       	or	r22, r26
     14c:	7b 2b       	or	r23, r27
     14e:	4d 87       	std	Y+13, r20	; 0x0d
     150:	5e 87       	std	Y+14, r21	; 0x0e
     152:	6f 87       	std	Y+15, r22	; 0x0f
     154:	78 8b       	std	Y+16, r23	; 0x10
     156:	29 85       	ldd	r18, Y+9	; 0x09
     158:	3a 85       	ldd	r19, Y+10	; 0x0a
     15a:	4b 85       	ldd	r20, Y+11	; 0x0b
     15c:	5c 85       	ldd	r21, Y+12	; 0x0c
     15e:	6d 85       	ldd	r22, Y+13	; 0x0d
     160:	7e 85       	ldd	r23, Y+14	; 0x0e
     162:	af 85       	ldd	r26, Y+15	; 0x0f
     164:	98 89       	ldd	r25, Y+16	; 0x10
     166:	8a 2f       	mov	r24, r26
     168:	60 96       	adiw	r28, 0x10	; 16
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	0f 91       	pop	r16
     17a:	ff 90       	pop	r15
     17c:	ef 90       	pop	r14
     17e:	08 95       	ret

00000180 <__fixunssfsi>:
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	7b 01       	movw	r14, r22
     18a:	8c 01       	movw	r16, r24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	5f e4       	ldi	r21, 0x4F	; 79
     194:	0e 94 a5 10 	call	0x214a	; 0x214a <__gesf2>
     198:	88 23       	and	r24, r24
     19a:	8c f0       	brlt	.+34     	; 0x1be <__fixunssfsi+0x3e>
     19c:	c8 01       	movw	r24, r16
     19e:	b7 01       	movw	r22, r14
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	5f e4       	ldi	r21, 0x4F	; 79
     1a8:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__subsf3>
     1ac:	0e 94 05 11 	call	0x220a	; 0x220a <__fixsfsi>
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	20 50       	subi	r18, 0x00	; 0
     1b6:	30 40       	sbci	r19, 0x00	; 0
     1b8:	40 40       	sbci	r20, 0x00	; 0
     1ba:	50 48       	sbci	r21, 0x80	; 128
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <__fixunssfsi+0x4a>
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	0e 94 05 11 	call	0x220a	; 0x220a <__fixsfsi>
     1c6:	9b 01       	movw	r18, r22
     1c8:	ac 01       	movw	r20, r24
     1ca:	b9 01       	movw	r22, r18
     1cc:	ca 01       	movw	r24, r20
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	08 95       	ret

000001d8 <__udivdi3>:
     1d8:	ae e5       	ldi	r26, 0x5E	; 94
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e2 ef       	ldi	r30, 0xF2	; 242
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__>
     1e4:	a8 e0       	ldi	r26, 0x08	; 8
     1e6:	4e 01       	movw	r8, r28
     1e8:	08 94       	sec
     1ea:	81 1c       	adc	r8, r1
     1ec:	91 1c       	adc	r9, r1
     1ee:	f4 01       	movw	r30, r8
     1f0:	6a 2e       	mov	r6, r26
     1f2:	11 92       	st	Z+, r1
     1f4:	6a 94       	dec	r6
     1f6:	e9 f7       	brne	.-6      	; 0x1f2 <__udivdi3+0x1a>
     1f8:	29 83       	std	Y+1, r18	; 0x01
     1fa:	3a 83       	std	Y+2, r19	; 0x02
     1fc:	4b 83       	std	Y+3, r20	; 0x03
     1fe:	5c 83       	std	Y+4, r21	; 0x04
     200:	6d 83       	std	Y+5, r22	; 0x05
     202:	7e 83       	std	Y+6, r23	; 0x06
     204:	8f 83       	std	Y+7, r24	; 0x07
     206:	98 87       	std	Y+8, r25	; 0x08
     208:	ce 01       	movw	r24, r28
     20a:	09 96       	adiw	r24, 0x09	; 9
     20c:	fc 01       	movw	r30, r24
     20e:	11 92       	st	Z+, r1
     210:	aa 95       	dec	r26
     212:	e9 f7       	brne	.-6      	; 0x20e <__udivdi3+0x36>
     214:	a9 86       	std	Y+9, r10	; 0x09
     216:	ba 86       	std	Y+10, r11	; 0x0a
     218:	cb 86       	std	Y+11, r12	; 0x0b
     21a:	dc 86       	std	Y+12, r13	; 0x0c
     21c:	ed 86       	std	Y+13, r14	; 0x0d
     21e:	fe 86       	std	Y+14, r15	; 0x0e
     220:	0f 87       	std	Y+15, r16	; 0x0f
     222:	18 8b       	std	Y+16, r17	; 0x10
     224:	29 84       	ldd	r2, Y+9	; 0x09
     226:	3a 84       	ldd	r3, Y+10	; 0x0a
     228:	4b 84       	ldd	r4, Y+11	; 0x0b
     22a:	5c 84       	ldd	r5, Y+12	; 0x0c
     22c:	ed 84       	ldd	r14, Y+13	; 0x0d
     22e:	fe 84       	ldd	r15, Y+14	; 0x0e
     230:	0f 85       	ldd	r16, Y+15	; 0x0f
     232:	18 89       	ldd	r17, Y+16	; 0x10
     234:	69 80       	ldd	r6, Y+1	; 0x01
     236:	7a 80       	ldd	r7, Y+2	; 0x02
     238:	8b 80       	ldd	r8, Y+3	; 0x03
     23a:	9c 80       	ldd	r9, Y+4	; 0x04
     23c:	6d a6       	std	Y+45, r6	; 0x2d
     23e:	7e a6       	std	Y+46, r7	; 0x2e
     240:	8f a6       	std	Y+47, r8	; 0x2f
     242:	98 aa       	std	Y+48, r9	; 0x30
     244:	6d 80       	ldd	r6, Y+5	; 0x05
     246:	7e 80       	ldd	r7, Y+6	; 0x06
     248:	8f 80       	ldd	r8, Y+7	; 0x07
     24a:	98 84       	ldd	r9, Y+8	; 0x08
     24c:	e1 14       	cp	r14, r1
     24e:	f1 04       	cpc	r15, r1
     250:	01 05       	cpc	r16, r1
     252:	11 05       	cpc	r17, r1
     254:	09 f0       	breq	.+2      	; 0x258 <__udivdi3+0x80>
     256:	b3 c3       	rjmp	.+1894   	; 0x9be <__stack+0x15f>
     258:	62 14       	cp	r6, r2
     25a:	73 04       	cpc	r7, r3
     25c:	84 04       	cpc	r8, r4
     25e:	95 04       	cpc	r9, r5
     260:	08 f0       	brcs	.+2      	; 0x264 <__udivdi3+0x8c>
     262:	3d c1       	rjmp	.+634    	; 0x4de <__udivdi3+0x306>
     264:	00 e0       	ldi	r16, 0x00	; 0
     266:	20 16       	cp	r2, r16
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	30 06       	cpc	r3, r16
     26c:	01 e0       	ldi	r16, 0x01	; 1
     26e:	40 06       	cpc	r4, r16
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	50 06       	cpc	r5, r16
     274:	88 f4       	brcc	.+34     	; 0x298 <__udivdi3+0xc0>
     276:	1f ef       	ldi	r17, 0xFF	; 255
     278:	21 16       	cp	r2, r17
     27a:	31 04       	cpc	r3, r1
     27c:	41 04       	cpc	r4, r1
     27e:	51 04       	cpc	r5, r1
     280:	39 f0       	breq	.+14     	; 0x290 <__udivdi3+0xb8>
     282:	30 f0       	brcs	.+12     	; 0x290 <__udivdi3+0xb8>
     284:	48 e0       	ldi	r20, 0x08	; 8
     286:	e4 2e       	mov	r14, r20
     288:	f1 2c       	mov	r15, r1
     28a:	01 2d       	mov	r16, r1
     28c:	11 2d       	mov	r17, r1
     28e:	18 c0       	rjmp	.+48     	; 0x2c0 <__udivdi3+0xe8>
     290:	ee 24       	eor	r14, r14
     292:	ff 24       	eor	r15, r15
     294:	87 01       	movw	r16, r14
     296:	14 c0       	rjmp	.+40     	; 0x2c0 <__udivdi3+0xe8>
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	22 16       	cp	r2, r18
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	32 06       	cpc	r3, r18
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	42 06       	cpc	r4, r18
     2a4:	21 e0       	ldi	r18, 0x01	; 1
     2a6:	52 06       	cpc	r5, r18
     2a8:	30 f0       	brcs	.+12     	; 0x2b6 <__udivdi3+0xde>
     2aa:	38 e1       	ldi	r19, 0x18	; 24
     2ac:	e3 2e       	mov	r14, r19
     2ae:	f1 2c       	mov	r15, r1
     2b0:	01 2d       	mov	r16, r1
     2b2:	11 2d       	mov	r17, r1
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <__udivdi3+0xe8>
     2b6:	20 e1       	ldi	r18, 0x10	; 16
     2b8:	e2 2e       	mov	r14, r18
     2ba:	f1 2c       	mov	r15, r1
     2bc:	01 2d       	mov	r16, r1
     2be:	11 2d       	mov	r17, r1
     2c0:	d2 01       	movw	r26, r4
     2c2:	c1 01       	movw	r24, r2
     2c4:	0e 2c       	mov	r0, r14
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <__udivdi3+0xf8>
     2c8:	b6 95       	lsr	r27
     2ca:	a7 95       	ror	r26
     2cc:	97 95       	ror	r25
     2ce:	87 95       	ror	r24
     2d0:	0a 94       	dec	r0
     2d2:	d2 f7       	brpl	.-12     	; 0x2c8 <__udivdi3+0xf0>
     2d4:	8c 58       	subi	r24, 0x8C	; 140
     2d6:	9f 4f       	sbci	r25, 0xFF	; 255
     2d8:	dc 01       	movw	r26, r24
     2da:	2c 91       	ld	r18, X
     2dc:	80 e2       	ldi	r24, 0x20	; 32
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	8e 19       	sub	r24, r14
     2e6:	9f 09       	sbc	r25, r15
     2e8:	a0 0b       	sbc	r26, r16
     2ea:	b1 0b       	sbc	r27, r17
     2ec:	7c 01       	movw	r14, r24
     2ee:	8d 01       	movw	r16, r26
     2f0:	e2 1a       	sub	r14, r18
     2f2:	f1 08       	sbc	r15, r1
     2f4:	01 09       	sbc	r16, r1
     2f6:	11 09       	sbc	r17, r1
     2f8:	e1 14       	cp	r14, r1
     2fa:	f1 04       	cpc	r15, r1
     2fc:	01 05       	cpc	r16, r1
     2fe:	11 05       	cpc	r17, r1
     300:	a1 f1       	breq	.+104    	; 0x36a <__udivdi3+0x192>
     302:	0e 2c       	mov	r0, r14
     304:	04 c0       	rjmp	.+8      	; 0x30e <__udivdi3+0x136>
     306:	22 0c       	add	r2, r2
     308:	33 1c       	adc	r3, r3
     30a:	44 1c       	adc	r4, r4
     30c:	55 1c       	adc	r5, r5
     30e:	0a 94       	dec	r0
     310:	d2 f7       	brpl	.-12     	; 0x306 <__udivdi3+0x12e>
     312:	a4 01       	movw	r20, r8
     314:	93 01       	movw	r18, r6
     316:	0e 2c       	mov	r0, r14
     318:	04 c0       	rjmp	.+8      	; 0x322 <__udivdi3+0x14a>
     31a:	22 0f       	add	r18, r18
     31c:	33 1f       	adc	r19, r19
     31e:	44 1f       	adc	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	0a 94       	dec	r0
     324:	d2 f7       	brpl	.-12     	; 0x31a <__udivdi3+0x142>
     326:	80 e2       	ldi	r24, 0x20	; 32
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	8e 19       	sub	r24, r14
     32c:	9f 09       	sbc	r25, r15
     32e:	6d a4       	ldd	r6, Y+45	; 0x2d
     330:	7e a4       	ldd	r7, Y+46	; 0x2e
     332:	8f a4       	ldd	r8, Y+47	; 0x2f
     334:	98 a8       	ldd	r9, Y+48	; 0x30
     336:	04 c0       	rjmp	.+8      	; 0x340 <__udivdi3+0x168>
     338:	96 94       	lsr	r9
     33a:	87 94       	ror	r8
     33c:	77 94       	ror	r7
     33e:	67 94       	ror	r6
     340:	8a 95       	dec	r24
     342:	d2 f7       	brpl	.-12     	; 0x338 <__udivdi3+0x160>
     344:	62 2a       	or	r6, r18
     346:	73 2a       	or	r7, r19
     348:	84 2a       	or	r8, r20
     34a:	95 2a       	or	r9, r21
     34c:	ad a4       	ldd	r10, Y+45	; 0x2d
     34e:	be a4       	ldd	r11, Y+46	; 0x2e
     350:	cf a4       	ldd	r12, Y+47	; 0x2f
     352:	d8 a8       	ldd	r13, Y+48	; 0x30
     354:	04 c0       	rjmp	.+8      	; 0x35e <__udivdi3+0x186>
     356:	aa 0c       	add	r10, r10
     358:	bb 1c       	adc	r11, r11
     35a:	cc 1c       	adc	r12, r12
     35c:	dd 1c       	adc	r13, r13
     35e:	ea 94       	dec	r14
     360:	d2 f7       	brpl	.-12     	; 0x356 <__udivdi3+0x17e>
     362:	ad a6       	std	Y+45, r10	; 0x2d
     364:	be a6       	std	Y+46, r11	; 0x2e
     366:	cf a6       	std	Y+47, r12	; 0x2f
     368:	d8 aa       	std	Y+48, r13	; 0x30
     36a:	62 01       	movw	r12, r4
     36c:	ee 24       	eor	r14, r14
     36e:	ff 24       	eor	r15, r15
     370:	cd aa       	std	Y+53, r12	; 0x35
     372:	de aa       	std	Y+54, r13	; 0x36
     374:	ef aa       	std	Y+55, r14	; 0x37
     376:	f8 ae       	std	Y+56, r15	; 0x38
     378:	92 01       	movw	r18, r4
     37a:	81 01       	movw	r16, r2
     37c:	20 70       	andi	r18, 0x00	; 0
     37e:	30 70       	andi	r19, 0x00	; 0
     380:	09 af       	std	Y+57, r16	; 0x39
     382:	1a af       	std	Y+58, r17	; 0x3a
     384:	2b af       	std	Y+59, r18	; 0x3b
     386:	3c af       	std	Y+60, r19	; 0x3c
     388:	c4 01       	movw	r24, r8
     38a:	b3 01       	movw	r22, r6
     38c:	a7 01       	movw	r20, r14
     38e:	96 01       	movw	r18, r12
     390:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     394:	7b 01       	movw	r14, r22
     396:	8c 01       	movw	r16, r24
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	2d a9       	ldd	r18, Y+53	; 0x35
     39e:	3e a9       	ldd	r19, Y+54	; 0x36
     3a0:	4f a9       	ldd	r20, Y+55	; 0x37
     3a2:	58 ad       	ldd	r21, Y+56	; 0x38
     3a4:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     3a8:	c9 01       	movw	r24, r18
     3aa:	da 01       	movw	r26, r20
     3ac:	3c 01       	movw	r6, r24
     3ae:	4d 01       	movw	r8, r26
     3b0:	c4 01       	movw	r24, r8
     3b2:	b3 01       	movw	r22, r6
     3b4:	29 ad       	ldd	r18, Y+57	; 0x39
     3b6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3b8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ba:	5c ad       	ldd	r21, Y+60	; 0x3c
     3bc:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     3c0:	9b 01       	movw	r18, r22
     3c2:	ac 01       	movw	r20, r24
     3c4:	87 01       	movw	r16, r14
     3c6:	ff 24       	eor	r15, r15
     3c8:	ee 24       	eor	r14, r14
     3ca:	ad a4       	ldd	r10, Y+45	; 0x2d
     3cc:	be a4       	ldd	r11, Y+46	; 0x2e
     3ce:	cf a4       	ldd	r12, Y+47	; 0x2f
     3d0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3d2:	c6 01       	movw	r24, r12
     3d4:	aa 27       	eor	r26, r26
     3d6:	bb 27       	eor	r27, r27
     3d8:	57 01       	movw	r10, r14
     3da:	68 01       	movw	r12, r16
     3dc:	a8 2a       	or	r10, r24
     3de:	b9 2a       	or	r11, r25
     3e0:	ca 2a       	or	r12, r26
     3e2:	db 2a       	or	r13, r27
     3e4:	a2 16       	cp	r10, r18
     3e6:	b3 06       	cpc	r11, r19
     3e8:	c4 06       	cpc	r12, r20
     3ea:	d5 06       	cpc	r13, r21
     3ec:	e0 f4       	brcc	.+56     	; 0x426 <__udivdi3+0x24e>
     3ee:	08 94       	sec
     3f0:	61 08       	sbc	r6, r1
     3f2:	71 08       	sbc	r7, r1
     3f4:	81 08       	sbc	r8, r1
     3f6:	91 08       	sbc	r9, r1
     3f8:	a2 0c       	add	r10, r2
     3fa:	b3 1c       	adc	r11, r3
     3fc:	c4 1c       	adc	r12, r4
     3fe:	d5 1c       	adc	r13, r5
     400:	a2 14       	cp	r10, r2
     402:	b3 04       	cpc	r11, r3
     404:	c4 04       	cpc	r12, r4
     406:	d5 04       	cpc	r13, r5
     408:	70 f0       	brcs	.+28     	; 0x426 <__udivdi3+0x24e>
     40a:	a2 16       	cp	r10, r18
     40c:	b3 06       	cpc	r11, r19
     40e:	c4 06       	cpc	r12, r20
     410:	d5 06       	cpc	r13, r21
     412:	48 f4       	brcc	.+18     	; 0x426 <__udivdi3+0x24e>
     414:	08 94       	sec
     416:	61 08       	sbc	r6, r1
     418:	71 08       	sbc	r7, r1
     41a:	81 08       	sbc	r8, r1
     41c:	91 08       	sbc	r9, r1
     41e:	a2 0c       	add	r10, r2
     420:	b3 1c       	adc	r11, r3
     422:	c4 1c       	adc	r12, r4
     424:	d5 1c       	adc	r13, r5
     426:	a2 1a       	sub	r10, r18
     428:	b3 0a       	sbc	r11, r19
     42a:	c4 0a       	sbc	r12, r20
     42c:	d5 0a       	sbc	r13, r21
     42e:	c6 01       	movw	r24, r12
     430:	b5 01       	movw	r22, r10
     432:	2d a9       	ldd	r18, Y+53	; 0x35
     434:	3e a9       	ldd	r19, Y+54	; 0x36
     436:	4f a9       	ldd	r20, Y+55	; 0x37
     438:	58 ad       	ldd	r21, Y+56	; 0x38
     43a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     43e:	7b 01       	movw	r14, r22
     440:	8c 01       	movw	r16, r24
     442:	c6 01       	movw	r24, r12
     444:	b5 01       	movw	r22, r10
     446:	2d a9       	ldd	r18, Y+53	; 0x35
     448:	3e a9       	ldd	r19, Y+54	; 0x36
     44a:	4f a9       	ldd	r20, Y+55	; 0x37
     44c:	58 ad       	ldd	r21, Y+56	; 0x38
     44e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     452:	c9 01       	movw	r24, r18
     454:	da 01       	movw	r26, r20
     456:	5c 01       	movw	r10, r24
     458:	6d 01       	movw	r12, r26
     45a:	c6 01       	movw	r24, r12
     45c:	b5 01       	movw	r22, r10
     45e:	29 ad       	ldd	r18, Y+57	; 0x39
     460:	3a ad       	ldd	r19, Y+58	; 0x3a
     462:	4b ad       	ldd	r20, Y+59	; 0x3b
     464:	5c ad       	ldd	r21, Y+60	; 0x3c
     466:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     46a:	9b 01       	movw	r18, r22
     46c:	ac 01       	movw	r20, r24
     46e:	87 01       	movw	r16, r14
     470:	ff 24       	eor	r15, r15
     472:	ee 24       	eor	r14, r14
     474:	8d a5       	ldd	r24, Y+45	; 0x2d
     476:	9e a5       	ldd	r25, Y+46	; 0x2e
     478:	af a5       	ldd	r26, Y+47	; 0x2f
     47a:	b8 a9       	ldd	r27, Y+48	; 0x30
     47c:	a0 70       	andi	r26, 0x00	; 0
     47e:	b0 70       	andi	r27, 0x00	; 0
     480:	e8 2a       	or	r14, r24
     482:	f9 2a       	or	r15, r25
     484:	0a 2b       	or	r16, r26
     486:	1b 2b       	or	r17, r27
     488:	e2 16       	cp	r14, r18
     48a:	f3 06       	cpc	r15, r19
     48c:	04 07       	cpc	r16, r20
     48e:	15 07       	cpc	r17, r21
     490:	c0 f4       	brcc	.+48     	; 0x4c2 <__udivdi3+0x2ea>
     492:	08 94       	sec
     494:	a1 08       	sbc	r10, r1
     496:	b1 08       	sbc	r11, r1
     498:	c1 08       	sbc	r12, r1
     49a:	d1 08       	sbc	r13, r1
     49c:	e2 0c       	add	r14, r2
     49e:	f3 1c       	adc	r15, r3
     4a0:	04 1d       	adc	r16, r4
     4a2:	15 1d       	adc	r17, r5
     4a4:	e2 14       	cp	r14, r2
     4a6:	f3 04       	cpc	r15, r3
     4a8:	04 05       	cpc	r16, r4
     4aa:	15 05       	cpc	r17, r5
     4ac:	50 f0       	brcs	.+20     	; 0x4c2 <__udivdi3+0x2ea>
     4ae:	e2 16       	cp	r14, r18
     4b0:	f3 06       	cpc	r15, r19
     4b2:	04 07       	cpc	r16, r20
     4b4:	15 07       	cpc	r17, r21
     4b6:	28 f4       	brcc	.+10     	; 0x4c2 <__udivdi3+0x2ea>
     4b8:	08 94       	sec
     4ba:	a1 08       	sbc	r10, r1
     4bc:	b1 08       	sbc	r11, r1
     4be:	c1 08       	sbc	r12, r1
     4c0:	d1 08       	sbc	r13, r1
     4c2:	d3 01       	movw	r26, r6
     4c4:	99 27       	eor	r25, r25
     4c6:	88 27       	eor	r24, r24
     4c8:	86 01       	movw	r16, r12
     4ca:	75 01       	movw	r14, r10
     4cc:	e8 2a       	or	r14, r24
     4ce:	f9 2a       	or	r15, r25
     4d0:	0a 2b       	or	r16, r26
     4d2:	1b 2b       	or	r17, r27
     4d4:	e9 aa       	std	Y+49, r14	; 0x31
     4d6:	fa aa       	std	Y+50, r15	; 0x32
     4d8:	0b ab       	std	Y+51, r16	; 0x33
     4da:	1c ab       	std	Y+52, r17	; 0x34
     4dc:	cf c4       	rjmp	.+2462   	; 0xe7c <__stack+0x61d>
     4de:	21 14       	cp	r2, r1
     4e0:	31 04       	cpc	r3, r1
     4e2:	41 04       	cpc	r4, r1
     4e4:	51 04       	cpc	r5, r1
     4e6:	71 f4       	brne	.+28     	; 0x504 <__udivdi3+0x32c>
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     4fc:	c9 01       	movw	r24, r18
     4fe:	da 01       	movw	r26, r20
     500:	1c 01       	movw	r2, r24
     502:	2d 01       	movw	r4, r26
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	20 16       	cp	r2, r16
     508:	00 e0       	ldi	r16, 0x00	; 0
     50a:	30 06       	cpc	r3, r16
     50c:	01 e0       	ldi	r16, 0x01	; 1
     50e:	40 06       	cpc	r4, r16
     510:	00 e0       	ldi	r16, 0x00	; 0
     512:	50 06       	cpc	r5, r16
     514:	88 f4       	brcc	.+34     	; 0x538 <__udivdi3+0x360>
     516:	1f ef       	ldi	r17, 0xFF	; 255
     518:	21 16       	cp	r2, r17
     51a:	31 04       	cpc	r3, r1
     51c:	41 04       	cpc	r4, r1
     51e:	51 04       	cpc	r5, r1
     520:	31 f0       	breq	.+12     	; 0x52e <__udivdi3+0x356>
     522:	28 f0       	brcs	.+10     	; 0x52e <__udivdi3+0x356>
     524:	48 e0       	ldi	r20, 0x08	; 8
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	17 c0       	rjmp	.+46     	; 0x55c <__udivdi3+0x384>
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	12 c0       	rjmp	.+36     	; 0x55c <__udivdi3+0x384>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	22 16       	cp	r2, r18
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	32 06       	cpc	r3, r18
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	42 06       	cpc	r4, r18
     544:	21 e0       	ldi	r18, 0x01	; 1
     546:	52 06       	cpc	r5, r18
     548:	28 f0       	brcs	.+10     	; 0x554 <__udivdi3+0x37c>
     54a:	48 e1       	ldi	r20, 0x18	; 24
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	04 c0       	rjmp	.+8      	; 0x55c <__udivdi3+0x384>
     554:	40 e1       	ldi	r20, 0x10	; 16
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	d2 01       	movw	r26, r4
     55e:	c1 01       	movw	r24, r2
     560:	04 2e       	mov	r0, r20
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x394>
     564:	b6 95       	lsr	r27
     566:	a7 95       	ror	r26
     568:	97 95       	ror	r25
     56a:	87 95       	ror	r24
     56c:	0a 94       	dec	r0
     56e:	d2 f7       	brpl	.-12     	; 0x564 <__udivdi3+0x38c>
     570:	8c 58       	subi	r24, 0x8C	; 140
     572:	9f 4f       	sbci	r25, 0xFF	; 255
     574:	dc 01       	movw	r26, r24
     576:	2c 91       	ld	r18, X
     578:	e0 e2       	ldi	r30, 0x20	; 32
     57a:	ee 2e       	mov	r14, r30
     57c:	f1 2c       	mov	r15, r1
     57e:	01 2d       	mov	r16, r1
     580:	11 2d       	mov	r17, r1
     582:	d8 01       	movw	r26, r16
     584:	c7 01       	movw	r24, r14
     586:	84 1b       	sub	r24, r20
     588:	95 0b       	sbc	r25, r21
     58a:	a6 0b       	sbc	r26, r22
     58c:	b7 0b       	sbc	r27, r23
     58e:	82 1b       	sub	r24, r18
     590:	91 09       	sbc	r25, r1
     592:	a1 09       	sbc	r26, r1
     594:	b1 09       	sbc	r27, r1
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	a1 05       	cpc	r26, r1
     59a:	b1 05       	cpc	r27, r1
     59c:	61 f4       	brne	.+24     	; 0x5b6 <__udivdi3+0x3de>
     59e:	64 01       	movw	r12, r8
     5a0:	53 01       	movw	r10, r6
     5a2:	a2 18       	sub	r10, r2
     5a4:	b3 08       	sbc	r11, r3
     5a6:	c4 08       	sbc	r12, r4
     5a8:	d5 08       	sbc	r13, r5
     5aa:	31 e0       	ldi	r19, 0x01	; 1
     5ac:	63 2e       	mov	r6, r19
     5ae:	71 2c       	mov	r7, r1
     5b0:	81 2c       	mov	r8, r1
     5b2:	91 2c       	mov	r9, r1
     5b4:	1e c1       	rjmp	.+572    	; 0x7f2 <__udivdi3+0x61a>
     5b6:	6f 96       	adiw	r28, 0x1f	; 31
     5b8:	8f af       	std	Y+63, r24	; 0x3f
     5ba:	6f 97       	sbiw	r28, 0x1f	; 31
     5bc:	08 2e       	mov	r0, r24
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__udivdi3+0x3f0>
     5c0:	22 0c       	add	r2, r2
     5c2:	33 1c       	adc	r3, r3
     5c4:	44 1c       	adc	r4, r4
     5c6:	55 1c       	adc	r5, r5
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__udivdi3+0x3e8>
     5cc:	ee 2d       	mov	r30, r14
     5ce:	e8 1b       	sub	r30, r24
     5d0:	64 01       	movw	r12, r8
     5d2:	53 01       	movw	r10, r6
     5d4:	0e 2e       	mov	r0, r30
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__udivdi3+0x408>
     5d8:	d6 94       	lsr	r13
     5da:	c7 94       	ror	r12
     5dc:	b7 94       	ror	r11
     5de:	a7 94       	ror	r10
     5e0:	0a 94       	dec	r0
     5e2:	d2 f7       	brpl	.-12     	; 0x5d8 <__udivdi3+0x400>
     5e4:	a4 01       	movw	r20, r8
     5e6:	93 01       	movw	r18, r6
     5e8:	6f 96       	adiw	r28, 0x1f	; 31
     5ea:	0f ac       	ldd	r0, Y+63	; 0x3f
     5ec:	6f 97       	sbiw	r28, 0x1f	; 31
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <__udivdi3+0x420>
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	44 1f       	adc	r20, r20
     5f6:	55 1f       	adc	r21, r21
     5f8:	0a 94       	dec	r0
     5fa:	d2 f7       	brpl	.-12     	; 0x5f0 <__udivdi3+0x418>
     5fc:	6d a4       	ldd	r6, Y+45	; 0x2d
     5fe:	7e a4       	ldd	r7, Y+46	; 0x2e
     600:	8f a4       	ldd	r8, Y+47	; 0x2f
     602:	98 a8       	ldd	r9, Y+48	; 0x30
     604:	0e 2e       	mov	r0, r30
     606:	04 c0       	rjmp	.+8      	; 0x610 <__udivdi3+0x438>
     608:	96 94       	lsr	r9
     60a:	87 94       	ror	r8
     60c:	77 94       	ror	r7
     60e:	67 94       	ror	r6
     610:	0a 94       	dec	r0
     612:	d2 f7       	brpl	.-12     	; 0x608 <__udivdi3+0x430>
     614:	84 01       	movw	r16, r8
     616:	73 01       	movw	r14, r6
     618:	e2 2a       	or	r14, r18
     61a:	f3 2a       	or	r15, r19
     61c:	04 2b       	or	r16, r20
     61e:	15 2b       	or	r17, r21
     620:	e9 a6       	std	Y+41, r14	; 0x29
     622:	fa a6       	std	Y+42, r15	; 0x2a
     624:	0b a7       	std	Y+43, r16	; 0x2b
     626:	1c a7       	std	Y+44, r17	; 0x2c
     628:	32 01       	movw	r6, r4
     62a:	88 24       	eor	r8, r8
     62c:	99 24       	eor	r9, r9
     62e:	92 01       	movw	r18, r4
     630:	81 01       	movw	r16, r2
     632:	20 70       	andi	r18, 0x00	; 0
     634:	30 70       	andi	r19, 0x00	; 0
     636:	21 96       	adiw	r28, 0x01	; 1
     638:	0c af       	std	Y+60, r16	; 0x3c
     63a:	1d af       	std	Y+61, r17	; 0x3d
     63c:	2e af       	std	Y+62, r18	; 0x3e
     63e:	3f af       	std	Y+63, r19	; 0x3f
     640:	21 97       	sbiw	r28, 0x01	; 1
     642:	c6 01       	movw	r24, r12
     644:	b5 01       	movw	r22, r10
     646:	a4 01       	movw	r20, r8
     648:	93 01       	movw	r18, r6
     64a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     64e:	7b 01       	movw	r14, r22
     650:	8c 01       	movw	r16, r24
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     65e:	c9 01       	movw	r24, r18
     660:	da 01       	movw	r26, r20
     662:	25 96       	adiw	r28, 0x05	; 5
     664:	8c af       	std	Y+60, r24	; 0x3c
     666:	9d af       	std	Y+61, r25	; 0x3d
     668:	ae af       	std	Y+62, r26	; 0x3e
     66a:	bf af       	std	Y+63, r27	; 0x3f
     66c:	25 97       	sbiw	r28, 0x05	; 5
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	21 96       	adiw	r28, 0x01	; 1
     674:	2c ad       	ldd	r18, Y+60	; 0x3c
     676:	3d ad       	ldd	r19, Y+61	; 0x3d
     678:	4e ad       	ldd	r20, Y+62	; 0x3e
     67a:	5f ad       	ldd	r21, Y+63	; 0x3f
     67c:	21 97       	sbiw	r28, 0x01	; 1
     67e:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	87 01       	movw	r16, r14
     688:	ff 24       	eor	r15, r15
     68a:	ee 24       	eor	r14, r14
     68c:	a9 a4       	ldd	r10, Y+41	; 0x29
     68e:	ba a4       	ldd	r11, Y+42	; 0x2a
     690:	cb a4       	ldd	r12, Y+43	; 0x2b
     692:	dc a4       	ldd	r13, Y+44	; 0x2c
     694:	c6 01       	movw	r24, r12
     696:	aa 27       	eor	r26, r26
     698:	bb 27       	eor	r27, r27
     69a:	5c 01       	movw	r10, r24
     69c:	6d 01       	movw	r12, r26
     69e:	ae 28       	or	r10, r14
     6a0:	bf 28       	or	r11, r15
     6a2:	c0 2a       	or	r12, r16
     6a4:	d1 2a       	or	r13, r17
     6a6:	a2 16       	cp	r10, r18
     6a8:	b3 06       	cpc	r11, r19
     6aa:	c4 06       	cpc	r12, r20
     6ac:	d5 06       	cpc	r13, r21
     6ae:	60 f5       	brcc	.+88     	; 0x708 <__udivdi3+0x530>
     6b0:	25 96       	adiw	r28, 0x05	; 5
     6b2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6b4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6b6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6b8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ba:	25 97       	sbiw	r28, 0x05	; 5
     6bc:	61 50       	subi	r22, 0x01	; 1
     6be:	70 40       	sbci	r23, 0x00	; 0
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	90 40       	sbci	r25, 0x00	; 0
     6c4:	25 96       	adiw	r28, 0x05	; 5
     6c6:	6c af       	std	Y+60, r22	; 0x3c
     6c8:	7d af       	std	Y+61, r23	; 0x3d
     6ca:	8e af       	std	Y+62, r24	; 0x3e
     6cc:	9f af       	std	Y+63, r25	; 0x3f
     6ce:	25 97       	sbiw	r28, 0x05	; 5
     6d0:	a2 0c       	add	r10, r2
     6d2:	b3 1c       	adc	r11, r3
     6d4:	c4 1c       	adc	r12, r4
     6d6:	d5 1c       	adc	r13, r5
     6d8:	a2 14       	cp	r10, r2
     6da:	b3 04       	cpc	r11, r3
     6dc:	c4 04       	cpc	r12, r4
     6de:	d5 04       	cpc	r13, r5
     6e0:	98 f0       	brcs	.+38     	; 0x708 <__udivdi3+0x530>
     6e2:	a2 16       	cp	r10, r18
     6e4:	b3 06       	cpc	r11, r19
     6e6:	c4 06       	cpc	r12, r20
     6e8:	d5 06       	cpc	r13, r21
     6ea:	70 f4       	brcc	.+28     	; 0x708 <__udivdi3+0x530>
     6ec:	61 50       	subi	r22, 0x01	; 1
     6ee:	70 40       	sbci	r23, 0x00	; 0
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	90 40       	sbci	r25, 0x00	; 0
     6f4:	25 96       	adiw	r28, 0x05	; 5
     6f6:	6c af       	std	Y+60, r22	; 0x3c
     6f8:	7d af       	std	Y+61, r23	; 0x3d
     6fa:	8e af       	std	Y+62, r24	; 0x3e
     6fc:	9f af       	std	Y+63, r25	; 0x3f
     6fe:	25 97       	sbiw	r28, 0x05	; 5
     700:	a2 0c       	add	r10, r2
     702:	b3 1c       	adc	r11, r3
     704:	c4 1c       	adc	r12, r4
     706:	d5 1c       	adc	r13, r5
     708:	a2 1a       	sub	r10, r18
     70a:	b3 0a       	sbc	r11, r19
     70c:	c4 0a       	sbc	r12, r20
     70e:	d5 0a       	sbc	r13, r21
     710:	c6 01       	movw	r24, r12
     712:	b5 01       	movw	r22, r10
     714:	a4 01       	movw	r20, r8
     716:	93 01       	movw	r18, r6
     718:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     71c:	7b 01       	movw	r14, r22
     71e:	8c 01       	movw	r16, r24
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     72c:	c9 01       	movw	r24, r18
     72e:	da 01       	movw	r26, r20
     730:	3c 01       	movw	r6, r24
     732:	4d 01       	movw	r8, r26
     734:	c4 01       	movw	r24, r8
     736:	b3 01       	movw	r22, r6
     738:	21 96       	adiw	r28, 0x01	; 1
     73a:	2c ad       	ldd	r18, Y+60	; 0x3c
     73c:	3d ad       	ldd	r19, Y+61	; 0x3d
     73e:	4e ad       	ldd	r20, Y+62	; 0x3e
     740:	5f ad       	ldd	r21, Y+63	; 0x3f
     742:	21 97       	sbiw	r28, 0x01	; 1
     744:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	87 01       	movw	r16, r14
     74e:	ff 24       	eor	r15, r15
     750:	ee 24       	eor	r14, r14
     752:	89 a5       	ldd	r24, Y+41	; 0x29
     754:	9a a5       	ldd	r25, Y+42	; 0x2a
     756:	ab a5       	ldd	r26, Y+43	; 0x2b
     758:	bc a5       	ldd	r27, Y+44	; 0x2c
     75a:	a0 70       	andi	r26, 0x00	; 0
     75c:	b0 70       	andi	r27, 0x00	; 0
     75e:	57 01       	movw	r10, r14
     760:	68 01       	movw	r12, r16
     762:	a8 2a       	or	r10, r24
     764:	b9 2a       	or	r11, r25
     766:	ca 2a       	or	r12, r26
     768:	db 2a       	or	r13, r27
     76a:	a2 16       	cp	r10, r18
     76c:	b3 06       	cpc	r11, r19
     76e:	c4 06       	cpc	r12, r20
     770:	d5 06       	cpc	r13, r21
     772:	e0 f4       	brcc	.+56     	; 0x7ac <__udivdi3+0x5d4>
     774:	08 94       	sec
     776:	61 08       	sbc	r6, r1
     778:	71 08       	sbc	r7, r1
     77a:	81 08       	sbc	r8, r1
     77c:	91 08       	sbc	r9, r1
     77e:	a2 0c       	add	r10, r2
     780:	b3 1c       	adc	r11, r3
     782:	c4 1c       	adc	r12, r4
     784:	d5 1c       	adc	r13, r5
     786:	a2 14       	cp	r10, r2
     788:	b3 04       	cpc	r11, r3
     78a:	c4 04       	cpc	r12, r4
     78c:	d5 04       	cpc	r13, r5
     78e:	70 f0       	brcs	.+28     	; 0x7ac <__udivdi3+0x5d4>
     790:	a2 16       	cp	r10, r18
     792:	b3 06       	cpc	r11, r19
     794:	c4 06       	cpc	r12, r20
     796:	d5 06       	cpc	r13, r21
     798:	48 f4       	brcc	.+18     	; 0x7ac <__udivdi3+0x5d4>
     79a:	08 94       	sec
     79c:	61 08       	sbc	r6, r1
     79e:	71 08       	sbc	r7, r1
     7a0:	81 08       	sbc	r8, r1
     7a2:	91 08       	sbc	r9, r1
     7a4:	a2 0c       	add	r10, r2
     7a6:	b3 1c       	adc	r11, r3
     7a8:	c4 1c       	adc	r12, r4
     7aa:	d5 1c       	adc	r13, r5
     7ac:	8d a5       	ldd	r24, Y+45	; 0x2d
     7ae:	9e a5       	ldd	r25, Y+46	; 0x2e
     7b0:	af a5       	ldd	r26, Y+47	; 0x2f
     7b2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7b4:	6f 96       	adiw	r28, 0x1f	; 31
     7b6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7b8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <__udivdi3+0x5ec>
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	aa 1f       	adc	r26, r26
     7c2:	bb 1f       	adc	r27, r27
     7c4:	0a 94       	dec	r0
     7c6:	d2 f7       	brpl	.-12     	; 0x7bc <__udivdi3+0x5e4>
     7c8:	8d a7       	std	Y+45, r24	; 0x2d
     7ca:	9e a7       	std	Y+46, r25	; 0x2e
     7cc:	af a7       	std	Y+47, r26	; 0x2f
     7ce:	b8 ab       	std	Y+48, r27	; 0x30
     7d0:	a2 1a       	sub	r10, r18
     7d2:	b3 0a       	sbc	r11, r19
     7d4:	c4 0a       	sbc	r12, r20
     7d6:	d5 0a       	sbc	r13, r21
     7d8:	25 96       	adiw	r28, 0x05	; 5
     7da:	ec ac       	ldd	r14, Y+60	; 0x3c
     7dc:	fd ac       	ldd	r15, Y+61	; 0x3d
     7de:	0e ad       	ldd	r16, Y+62	; 0x3e
     7e0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7e2:	25 97       	sbiw	r28, 0x05	; 5
     7e4:	d7 01       	movw	r26, r14
     7e6:	99 27       	eor	r25, r25
     7e8:	88 27       	eor	r24, r24
     7ea:	68 2a       	or	r6, r24
     7ec:	79 2a       	or	r7, r25
     7ee:	8a 2a       	or	r8, r26
     7f0:	9b 2a       	or	r9, r27
     7f2:	82 01       	movw	r16, r4
     7f4:	22 27       	eor	r18, r18
     7f6:	33 27       	eor	r19, r19
     7f8:	29 96       	adiw	r28, 0x09	; 9
     7fa:	0c af       	std	Y+60, r16	; 0x3c
     7fc:	1d af       	std	Y+61, r17	; 0x3d
     7fe:	2e af       	std	Y+62, r18	; 0x3e
     800:	3f af       	std	Y+63, r19	; 0x3f
     802:	29 97       	sbiw	r28, 0x09	; 9
     804:	a2 01       	movw	r20, r4
     806:	91 01       	movw	r18, r2
     808:	40 70       	andi	r20, 0x00	; 0
     80a:	50 70       	andi	r21, 0x00	; 0
     80c:	2d 96       	adiw	r28, 0x0d	; 13
     80e:	2c af       	std	Y+60, r18	; 0x3c
     810:	3d af       	std	Y+61, r19	; 0x3d
     812:	4e af       	std	Y+62, r20	; 0x3e
     814:	5f af       	std	Y+63, r21	; 0x3f
     816:	2d 97       	sbiw	r28, 0x0d	; 13
     818:	c6 01       	movw	r24, r12
     81a:	b5 01       	movw	r22, r10
     81c:	29 96       	adiw	r28, 0x09	; 9
     81e:	2c ad       	ldd	r18, Y+60	; 0x3c
     820:	3d ad       	ldd	r19, Y+61	; 0x3d
     822:	4e ad       	ldd	r20, Y+62	; 0x3e
     824:	5f ad       	ldd	r21, Y+63	; 0x3f
     826:	29 97       	sbiw	r28, 0x09	; 9
     828:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     82c:	7b 01       	movw	r14, r22
     82e:	8c 01       	movw	r16, r24
     830:	c6 01       	movw	r24, r12
     832:	b5 01       	movw	r22, r10
     834:	29 96       	adiw	r28, 0x09	; 9
     836:	2c ad       	ldd	r18, Y+60	; 0x3c
     838:	3d ad       	ldd	r19, Y+61	; 0x3d
     83a:	4e ad       	ldd	r20, Y+62	; 0x3e
     83c:	5f ad       	ldd	r21, Y+63	; 0x3f
     83e:	29 97       	sbiw	r28, 0x09	; 9
     840:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     844:	c9 01       	movw	r24, r18
     846:	da 01       	movw	r26, r20
     848:	61 96       	adiw	r28, 0x11	; 17
     84a:	8c af       	std	Y+60, r24	; 0x3c
     84c:	9d af       	std	Y+61, r25	; 0x3d
     84e:	ae af       	std	Y+62, r26	; 0x3e
     850:	bf af       	std	Y+63, r27	; 0x3f
     852:	61 97       	sbiw	r28, 0x11	; 17
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	2d 96       	adiw	r28, 0x0d	; 13
     85a:	2c ad       	ldd	r18, Y+60	; 0x3c
     85c:	3d ad       	ldd	r19, Y+61	; 0x3d
     85e:	4e ad       	ldd	r20, Y+62	; 0x3e
     860:	5f ad       	ldd	r21, Y+63	; 0x3f
     862:	2d 97       	sbiw	r28, 0x0d	; 13
     864:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     868:	9b 01       	movw	r18, r22
     86a:	ac 01       	movw	r20, r24
     86c:	87 01       	movw	r16, r14
     86e:	ff 24       	eor	r15, r15
     870:	ee 24       	eor	r14, r14
     872:	ad a4       	ldd	r10, Y+45	; 0x2d
     874:	be a4       	ldd	r11, Y+46	; 0x2e
     876:	cf a4       	ldd	r12, Y+47	; 0x2f
     878:	d8 a8       	ldd	r13, Y+48	; 0x30
     87a:	c6 01       	movw	r24, r12
     87c:	aa 27       	eor	r26, r26
     87e:	bb 27       	eor	r27, r27
     880:	57 01       	movw	r10, r14
     882:	68 01       	movw	r12, r16
     884:	a8 2a       	or	r10, r24
     886:	b9 2a       	or	r11, r25
     888:	ca 2a       	or	r12, r26
     88a:	db 2a       	or	r13, r27
     88c:	a2 16       	cp	r10, r18
     88e:	b3 06       	cpc	r11, r19
     890:	c4 06       	cpc	r12, r20
     892:	d5 06       	cpc	r13, r21
     894:	60 f5       	brcc	.+88     	; 0x8ee <__stack+0x8f>
     896:	61 96       	adiw	r28, 0x11	; 17
     898:	6c ad       	ldd	r22, Y+60	; 0x3c
     89a:	7d ad       	ldd	r23, Y+61	; 0x3d
     89c:	8e ad       	ldd	r24, Y+62	; 0x3e
     89e:	9f ad       	ldd	r25, Y+63	; 0x3f
     8a0:	61 97       	sbiw	r28, 0x11	; 17
     8a2:	61 50       	subi	r22, 0x01	; 1
     8a4:	70 40       	sbci	r23, 0x00	; 0
     8a6:	80 40       	sbci	r24, 0x00	; 0
     8a8:	90 40       	sbci	r25, 0x00	; 0
     8aa:	61 96       	adiw	r28, 0x11	; 17
     8ac:	6c af       	std	Y+60, r22	; 0x3c
     8ae:	7d af       	std	Y+61, r23	; 0x3d
     8b0:	8e af       	std	Y+62, r24	; 0x3e
     8b2:	9f af       	std	Y+63, r25	; 0x3f
     8b4:	61 97       	sbiw	r28, 0x11	; 17
     8b6:	a2 0c       	add	r10, r2
     8b8:	b3 1c       	adc	r11, r3
     8ba:	c4 1c       	adc	r12, r4
     8bc:	d5 1c       	adc	r13, r5
     8be:	a2 14       	cp	r10, r2
     8c0:	b3 04       	cpc	r11, r3
     8c2:	c4 04       	cpc	r12, r4
     8c4:	d5 04       	cpc	r13, r5
     8c6:	98 f0       	brcs	.+38     	; 0x8ee <__stack+0x8f>
     8c8:	a2 16       	cp	r10, r18
     8ca:	b3 06       	cpc	r11, r19
     8cc:	c4 06       	cpc	r12, r20
     8ce:	d5 06       	cpc	r13, r21
     8d0:	70 f4       	brcc	.+28     	; 0x8ee <__stack+0x8f>
     8d2:	61 50       	subi	r22, 0x01	; 1
     8d4:	70 40       	sbci	r23, 0x00	; 0
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	90 40       	sbci	r25, 0x00	; 0
     8da:	61 96       	adiw	r28, 0x11	; 17
     8dc:	6c af       	std	Y+60, r22	; 0x3c
     8de:	7d af       	std	Y+61, r23	; 0x3d
     8e0:	8e af       	std	Y+62, r24	; 0x3e
     8e2:	9f af       	std	Y+63, r25	; 0x3f
     8e4:	61 97       	sbiw	r28, 0x11	; 17
     8e6:	a2 0c       	add	r10, r2
     8e8:	b3 1c       	adc	r11, r3
     8ea:	c4 1c       	adc	r12, r4
     8ec:	d5 1c       	adc	r13, r5
     8ee:	a2 1a       	sub	r10, r18
     8f0:	b3 0a       	sbc	r11, r19
     8f2:	c4 0a       	sbc	r12, r20
     8f4:	d5 0a       	sbc	r13, r21
     8f6:	c6 01       	movw	r24, r12
     8f8:	b5 01       	movw	r22, r10
     8fa:	29 96       	adiw	r28, 0x09	; 9
     8fc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8fe:	3d ad       	ldd	r19, Y+61	; 0x3d
     900:	4e ad       	ldd	r20, Y+62	; 0x3e
     902:	5f ad       	ldd	r21, Y+63	; 0x3f
     904:	29 97       	sbiw	r28, 0x09	; 9
     906:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     90a:	7b 01       	movw	r14, r22
     90c:	8c 01       	movw	r16, r24
     90e:	c6 01       	movw	r24, r12
     910:	b5 01       	movw	r22, r10
     912:	29 96       	adiw	r28, 0x09	; 9
     914:	2c ad       	ldd	r18, Y+60	; 0x3c
     916:	3d ad       	ldd	r19, Y+61	; 0x3d
     918:	4e ad       	ldd	r20, Y+62	; 0x3e
     91a:	5f ad       	ldd	r21, Y+63	; 0x3f
     91c:	29 97       	sbiw	r28, 0x09	; 9
     91e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     922:	c9 01       	movw	r24, r18
     924:	da 01       	movw	r26, r20
     926:	5c 01       	movw	r10, r24
     928:	6d 01       	movw	r12, r26
     92a:	c6 01       	movw	r24, r12
     92c:	b5 01       	movw	r22, r10
     92e:	2d 96       	adiw	r28, 0x0d	; 13
     930:	2c ad       	ldd	r18, Y+60	; 0x3c
     932:	3d ad       	ldd	r19, Y+61	; 0x3d
     934:	4e ad       	ldd	r20, Y+62	; 0x3e
     936:	5f ad       	ldd	r21, Y+63	; 0x3f
     938:	2d 97       	sbiw	r28, 0x0d	; 13
     93a:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     93e:	9b 01       	movw	r18, r22
     940:	ac 01       	movw	r20, r24
     942:	87 01       	movw	r16, r14
     944:	ff 24       	eor	r15, r15
     946:	ee 24       	eor	r14, r14
     948:	8d a5       	ldd	r24, Y+45	; 0x2d
     94a:	9e a5       	ldd	r25, Y+46	; 0x2e
     94c:	af a5       	ldd	r26, Y+47	; 0x2f
     94e:	b8 a9       	ldd	r27, Y+48	; 0x30
     950:	a0 70       	andi	r26, 0x00	; 0
     952:	b0 70       	andi	r27, 0x00	; 0
     954:	e8 2a       	or	r14, r24
     956:	f9 2a       	or	r15, r25
     958:	0a 2b       	or	r16, r26
     95a:	1b 2b       	or	r17, r27
     95c:	e2 16       	cp	r14, r18
     95e:	f3 06       	cpc	r15, r19
     960:	04 07       	cpc	r16, r20
     962:	15 07       	cpc	r17, r21
     964:	c0 f4       	brcc	.+48     	; 0x996 <__stack+0x137>
     966:	08 94       	sec
     968:	a1 08       	sbc	r10, r1
     96a:	b1 08       	sbc	r11, r1
     96c:	c1 08       	sbc	r12, r1
     96e:	d1 08       	sbc	r13, r1
     970:	e2 0c       	add	r14, r2
     972:	f3 1c       	adc	r15, r3
     974:	04 1d       	adc	r16, r4
     976:	15 1d       	adc	r17, r5
     978:	e2 14       	cp	r14, r2
     97a:	f3 04       	cpc	r15, r3
     97c:	04 05       	cpc	r16, r4
     97e:	15 05       	cpc	r17, r5
     980:	50 f0       	brcs	.+20     	; 0x996 <__stack+0x137>
     982:	e2 16       	cp	r14, r18
     984:	f3 06       	cpc	r15, r19
     986:	04 07       	cpc	r16, r20
     988:	15 07       	cpc	r17, r21
     98a:	28 f4       	brcc	.+10     	; 0x996 <__stack+0x137>
     98c:	08 94       	sec
     98e:	a1 08       	sbc	r10, r1
     990:	b1 08       	sbc	r11, r1
     992:	c1 08       	sbc	r12, r1
     994:	d1 08       	sbc	r13, r1
     996:	61 96       	adiw	r28, 0x11	; 17
     998:	ec ac       	ldd	r14, Y+60	; 0x3c
     99a:	fd ac       	ldd	r15, Y+61	; 0x3d
     99c:	0e ad       	ldd	r16, Y+62	; 0x3e
     99e:	1f ad       	ldd	r17, Y+63	; 0x3f
     9a0:	61 97       	sbiw	r28, 0x11	; 17
     9a2:	d7 01       	movw	r26, r14
     9a4:	99 27       	eor	r25, r25
     9a6:	88 27       	eor	r24, r24
     9a8:	96 01       	movw	r18, r12
     9aa:	85 01       	movw	r16, r10
     9ac:	08 2b       	or	r16, r24
     9ae:	19 2b       	or	r17, r25
     9b0:	2a 2b       	or	r18, r26
     9b2:	3b 2b       	or	r19, r27
     9b4:	09 ab       	std	Y+49, r16	; 0x31
     9b6:	1a ab       	std	Y+50, r17	; 0x32
     9b8:	2b ab       	std	Y+51, r18	; 0x33
     9ba:	3c ab       	std	Y+52, r19	; 0x34
     9bc:	62 c2       	rjmp	.+1220   	; 0xe82 <__stack+0x623>
     9be:	6e 14       	cp	r6, r14
     9c0:	7f 04       	cpc	r7, r15
     9c2:	80 06       	cpc	r8, r16
     9c4:	91 06       	cpc	r9, r17
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <__stack+0x16b>
     9c8:	51 c2       	rjmp	.+1186   	; 0xe6c <__stack+0x60d>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	e2 16       	cp	r14, r18
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	f2 06       	cpc	r15, r18
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	02 07       	cpc	r16, r18
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	12 07       	cpc	r17, r18
     9da:	88 f4       	brcc	.+34     	; 0x9fe <__stack+0x19f>
     9dc:	3f ef       	ldi	r19, 0xFF	; 255
     9de:	e3 16       	cp	r14, r19
     9e0:	f1 04       	cpc	r15, r1
     9e2:	01 05       	cpc	r16, r1
     9e4:	11 05       	cpc	r17, r1
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <__stack+0x195>
     9e8:	28 f0       	brcs	.+10     	; 0x9f4 <__stack+0x195>
     9ea:	48 e0       	ldi	r20, 0x08	; 8
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	17 c0       	rjmp	.+46     	; 0xa22 <__stack+0x1c3>
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__stack+0x1c3>
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	e4 16       	cp	r14, r20
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	f4 06       	cpc	r15, r20
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	04 07       	cpc	r16, r20
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	14 07       	cpc	r17, r20
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__stack+0x1bb>
     a10:	48 e1       	ldi	r20, 0x18	; 24
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	40 e1       	ldi	r20, 0x10	; 16
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	d8 01       	movw	r26, r16
     a24:	c7 01       	movw	r24, r14
     a26:	04 2e       	mov	r0, r20
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	b6 95       	lsr	r27
     a2c:	a7 95       	ror	r26
     a2e:	97 95       	ror	r25
     a30:	87 95       	ror	r24
     a32:	0a 94       	dec	r0
     a34:	d2 f7       	brpl	.-12     	; 0xa2a <__stack+0x1cb>
     a36:	8c 58       	subi	r24, 0x8C	; 140
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	dc 01       	movw	r26, r24
     a3c:	2c 91       	ld	r18, X
     a3e:	30 e2       	ldi	r19, 0x20	; 32
     a40:	a3 2e       	mov	r10, r19
     a42:	b1 2c       	mov	r11, r1
     a44:	c1 2c       	mov	r12, r1
     a46:	d1 2c       	mov	r13, r1
     a48:	d6 01       	movw	r26, r12
     a4a:	c5 01       	movw	r24, r10
     a4c:	84 1b       	sub	r24, r20
     a4e:	95 0b       	sbc	r25, r21
     a50:	a6 0b       	sbc	r26, r22
     a52:	b7 0b       	sbc	r27, r23
     a54:	82 1b       	sub	r24, r18
     a56:	91 09       	sbc	r25, r1
     a58:	a1 09       	sbc	r26, r1
     a5a:	b1 09       	sbc	r27, r1
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	a1 05       	cpc	r26, r1
     a60:	b1 05       	cpc	r27, r1
     a62:	89 f4       	brne	.+34     	; 0xa86 <__stack+0x227>
     a64:	e6 14       	cp	r14, r6
     a66:	f7 04       	cpc	r15, r7
     a68:	08 05       	cpc	r16, r8
     a6a:	19 05       	cpc	r17, r9
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <__stack+0x211>
     a6e:	f2 c1       	rjmp	.+996    	; 0xe54 <__stack+0x5f5>
     a70:	6d a4       	ldd	r6, Y+45	; 0x2d
     a72:	7e a4       	ldd	r7, Y+46	; 0x2e
     a74:	8f a4       	ldd	r8, Y+47	; 0x2f
     a76:	98 a8       	ldd	r9, Y+48	; 0x30
     a78:	62 14       	cp	r6, r2
     a7a:	73 04       	cpc	r7, r3
     a7c:	84 04       	cpc	r8, r4
     a7e:	95 04       	cpc	r9, r5
     a80:	08 f0       	brcs	.+2      	; 0xa84 <__stack+0x225>
     a82:	e8 c1       	rjmp	.+976    	; 0xe54 <__stack+0x5f5>
     a84:	f3 c1       	rjmp	.+998    	; 0xe6c <__stack+0x60d>
     a86:	6e 96       	adiw	r28, 0x1e	; 30
     a88:	8f af       	std	Y+63, r24	; 0x3f
     a8a:	6e 97       	sbiw	r28, 0x1e	; 30
     a8c:	08 2e       	mov	r0, r24
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__stack+0x239>
     a90:	ee 0c       	add	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	00 1f       	adc	r16, r16
     a96:	11 1f       	adc	r17, r17
     a98:	0a 94       	dec	r0
     a9a:	d2 f7       	brpl	.-12     	; 0xa90 <__stack+0x231>
     a9c:	6a 2d       	mov	r22, r10
     a9e:	68 1b       	sub	r22, r24
     aa0:	d2 01       	movw	r26, r4
     aa2:	c1 01       	movw	r24, r2
     aa4:	06 2e       	mov	r0, r22
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__stack+0x251>
     aa8:	b6 95       	lsr	r27
     aaa:	a7 95       	ror	r26
     aac:	97 95       	ror	r25
     aae:	87 95       	ror	r24
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__stack+0x249>
     ab4:	5c 01       	movw	r10, r24
     ab6:	6d 01       	movw	r12, r26
     ab8:	ae 28       	or	r10, r14
     aba:	bf 28       	or	r11, r15
     abc:	c0 2a       	or	r12, r16
     abe:	d1 2a       	or	r13, r17
     ac0:	ad a2       	std	Y+37, r10	; 0x25
     ac2:	be a2       	std	Y+38, r11	; 0x26
     ac4:	cf a2       	std	Y+39, r12	; 0x27
     ac6:	d8 a6       	std	Y+40, r13	; 0x28
     ac8:	72 01       	movw	r14, r4
     aca:	61 01       	movw	r12, r2
     acc:	6e 96       	adiw	r28, 0x1e	; 30
     ace:	0f ac       	ldd	r0, Y+63	; 0x3f
     ad0:	6e 97       	sbiw	r28, 0x1e	; 30
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__stack+0x27d>
     ad4:	cc 0c       	add	r12, r12
     ad6:	dd 1c       	adc	r13, r13
     ad8:	ee 1c       	adc	r14, r14
     ada:	ff 1c       	adc	r15, r15
     adc:	0a 94       	dec	r0
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__stack+0x275>
     ae0:	c9 a2       	std	Y+33, r12	; 0x21
     ae2:	da a2       	std	Y+34, r13	; 0x22
     ae4:	eb a2       	std	Y+35, r14	; 0x23
     ae6:	fc a2       	std	Y+36, r15	; 0x24
     ae8:	64 01       	movw	r12, r8
     aea:	53 01       	movw	r10, r6
     aec:	06 2e       	mov	r0, r22
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <__stack+0x299>
     af0:	d6 94       	lsr	r13
     af2:	c7 94       	ror	r12
     af4:	b7 94       	ror	r11
     af6:	a7 94       	ror	r10
     af8:	0a 94       	dec	r0
     afa:	d2 f7       	brpl	.-12     	; 0xaf0 <__stack+0x291>
     afc:	d4 01       	movw	r26, r8
     afe:	c3 01       	movw	r24, r6
     b00:	6e 96       	adiw	r28, 0x1e	; 30
     b02:	0f ac       	ldd	r0, Y+63	; 0x3f
     b04:	6e 97       	sbiw	r28, 0x1e	; 30
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <__stack+0x2b1>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	aa 1f       	adc	r26, r26
     b0e:	bb 1f       	adc	r27, r27
     b10:	0a 94       	dec	r0
     b12:	d2 f7       	brpl	.-12     	; 0xb08 <__stack+0x2a9>
     b14:	ed a4       	ldd	r14, Y+45	; 0x2d
     b16:	fe a4       	ldd	r15, Y+46	; 0x2e
     b18:	0f a5       	ldd	r16, Y+47	; 0x2f
     b1a:	18 a9       	ldd	r17, Y+48	; 0x30
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__stack+0x2c7>
     b1e:	16 95       	lsr	r17
     b20:	07 95       	ror	r16
     b22:	f7 94       	ror	r15
     b24:	e7 94       	ror	r14
     b26:	6a 95       	dec	r22
     b28:	d2 f7       	brpl	.-12     	; 0xb1e <__stack+0x2bf>
     b2a:	37 01       	movw	r6, r14
     b2c:	48 01       	movw	r8, r16
     b2e:	68 2a       	or	r6, r24
     b30:	79 2a       	or	r7, r25
     b32:	8a 2a       	or	r8, r26
     b34:	9b 2a       	or	r9, r27
     b36:	6d 8e       	std	Y+29, r6	; 0x1d
     b38:	7e 8e       	std	Y+30, r7	; 0x1e
     b3a:	8f 8e       	std	Y+31, r8	; 0x1f
     b3c:	98 a2       	std	Y+32, r9	; 0x20
     b3e:	ed a0       	ldd	r14, Y+37	; 0x25
     b40:	fe a0       	ldd	r15, Y+38	; 0x26
     b42:	0f a1       	ldd	r16, Y+39	; 0x27
     b44:	18 a5       	ldd	r17, Y+40	; 0x28
     b46:	38 01       	movw	r6, r16
     b48:	88 24       	eor	r8, r8
     b4a:	99 24       	eor	r9, r9
     b4c:	98 01       	movw	r18, r16
     b4e:	87 01       	movw	r16, r14
     b50:	20 70       	andi	r18, 0x00	; 0
     b52:	30 70       	andi	r19, 0x00	; 0
     b54:	65 96       	adiw	r28, 0x15	; 21
     b56:	0c af       	std	Y+60, r16	; 0x3c
     b58:	1d af       	std	Y+61, r17	; 0x3d
     b5a:	2e af       	std	Y+62, r18	; 0x3e
     b5c:	3f af       	std	Y+63, r19	; 0x3f
     b5e:	65 97       	sbiw	r28, 0x15	; 21
     b60:	c6 01       	movw	r24, r12
     b62:	b5 01       	movw	r22, r10
     b64:	a4 01       	movw	r20, r8
     b66:	93 01       	movw	r18, r6
     b68:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     b6c:	7b 01       	movw	r14, r22
     b6e:	8c 01       	movw	r16, r24
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     b7c:	c9 01       	movw	r24, r18
     b7e:	da 01       	movw	r26, r20
     b80:	1c 01       	movw	r2, r24
     b82:	2d 01       	movw	r4, r26
     b84:	c2 01       	movw	r24, r4
     b86:	b1 01       	movw	r22, r2
     b88:	65 96       	adiw	r28, 0x15	; 21
     b8a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b8c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b8e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b90:	5f ad       	ldd	r21, Y+63	; 0x3f
     b92:	65 97       	sbiw	r28, 0x15	; 21
     b94:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     b98:	9b 01       	movw	r18, r22
     b9a:	ac 01       	movw	r20, r24
     b9c:	87 01       	movw	r16, r14
     b9e:	ff 24       	eor	r15, r15
     ba0:	ee 24       	eor	r14, r14
     ba2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ba4:	be 8c       	ldd	r11, Y+30	; 0x1e
     ba6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     ba8:	d8 a0       	ldd	r13, Y+32	; 0x20
     baa:	c6 01       	movw	r24, r12
     bac:	aa 27       	eor	r26, r26
     bae:	bb 27       	eor	r27, r27
     bb0:	57 01       	movw	r10, r14
     bb2:	68 01       	movw	r12, r16
     bb4:	a8 2a       	or	r10, r24
     bb6:	b9 2a       	or	r11, r25
     bb8:	ca 2a       	or	r12, r26
     bba:	db 2a       	or	r13, r27
     bbc:	a2 16       	cp	r10, r18
     bbe:	b3 06       	cpc	r11, r19
     bc0:	c4 06       	cpc	r12, r20
     bc2:	d5 06       	cpc	r13, r21
     bc4:	00 f5       	brcc	.+64     	; 0xc06 <__stack+0x3a7>
     bc6:	08 94       	sec
     bc8:	21 08       	sbc	r2, r1
     bca:	31 08       	sbc	r3, r1
     bcc:	41 08       	sbc	r4, r1
     bce:	51 08       	sbc	r5, r1
     bd0:	ed a0       	ldd	r14, Y+37	; 0x25
     bd2:	fe a0       	ldd	r15, Y+38	; 0x26
     bd4:	0f a1       	ldd	r16, Y+39	; 0x27
     bd6:	18 a5       	ldd	r17, Y+40	; 0x28
     bd8:	ae 0c       	add	r10, r14
     bda:	bf 1c       	adc	r11, r15
     bdc:	c0 1e       	adc	r12, r16
     bde:	d1 1e       	adc	r13, r17
     be0:	ae 14       	cp	r10, r14
     be2:	bf 04       	cpc	r11, r15
     be4:	c0 06       	cpc	r12, r16
     be6:	d1 06       	cpc	r13, r17
     be8:	70 f0       	brcs	.+28     	; 0xc06 <__stack+0x3a7>
     bea:	a2 16       	cp	r10, r18
     bec:	b3 06       	cpc	r11, r19
     bee:	c4 06       	cpc	r12, r20
     bf0:	d5 06       	cpc	r13, r21
     bf2:	48 f4       	brcc	.+18     	; 0xc06 <__stack+0x3a7>
     bf4:	08 94       	sec
     bf6:	21 08       	sbc	r2, r1
     bf8:	31 08       	sbc	r3, r1
     bfa:	41 08       	sbc	r4, r1
     bfc:	51 08       	sbc	r5, r1
     bfe:	ae 0c       	add	r10, r14
     c00:	bf 1c       	adc	r11, r15
     c02:	c0 1e       	adc	r12, r16
     c04:	d1 1e       	adc	r13, r17
     c06:	a2 1a       	sub	r10, r18
     c08:	b3 0a       	sbc	r11, r19
     c0a:	c4 0a       	sbc	r12, r20
     c0c:	d5 0a       	sbc	r13, r21
     c0e:	c6 01       	movw	r24, r12
     c10:	b5 01       	movw	r22, r10
     c12:	a4 01       	movw	r20, r8
     c14:	93 01       	movw	r18, r6
     c16:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     c1a:	7b 01       	movw	r14, r22
     c1c:	8c 01       	movw	r16, r24
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
     c2a:	c9 01       	movw	r24, r18
     c2c:	da 01       	movw	r26, r20
     c2e:	3c 01       	movw	r6, r24
     c30:	4d 01       	movw	r8, r26
     c32:	c4 01       	movw	r24, r8
     c34:	b3 01       	movw	r22, r6
     c36:	65 96       	adiw	r28, 0x15	; 21
     c38:	2c ad       	ldd	r18, Y+60	; 0x3c
     c3a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c3c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c3e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c40:	65 97       	sbiw	r28, 0x15	; 21
     c42:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	87 01       	movw	r16, r14
     c4c:	ff 24       	eor	r15, r15
     c4e:	ee 24       	eor	r14, r14
     c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c52:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c54:	af 8d       	ldd	r26, Y+31	; 0x1f
     c56:	b8 a1       	ldd	r27, Y+32	; 0x20
     c58:	a0 70       	andi	r26, 0x00	; 0
     c5a:	b0 70       	andi	r27, 0x00	; 0
     c5c:	57 01       	movw	r10, r14
     c5e:	68 01       	movw	r12, r16
     c60:	a8 2a       	or	r10, r24
     c62:	b9 2a       	or	r11, r25
     c64:	ca 2a       	or	r12, r26
     c66:	db 2a       	or	r13, r27
     c68:	a2 16       	cp	r10, r18
     c6a:	b3 06       	cpc	r11, r19
     c6c:	c4 06       	cpc	r12, r20
     c6e:	d5 06       	cpc	r13, r21
     c70:	00 f5       	brcc	.+64     	; 0xcb2 <__stack+0x453>
     c72:	08 94       	sec
     c74:	61 08       	sbc	r6, r1
     c76:	71 08       	sbc	r7, r1
     c78:	81 08       	sbc	r8, r1
     c7a:	91 08       	sbc	r9, r1
     c7c:	6d a1       	ldd	r22, Y+37	; 0x25
     c7e:	7e a1       	ldd	r23, Y+38	; 0x26
     c80:	8f a1       	ldd	r24, Y+39	; 0x27
     c82:	98 a5       	ldd	r25, Y+40	; 0x28
     c84:	a6 0e       	add	r10, r22
     c86:	b7 1e       	adc	r11, r23
     c88:	c8 1e       	adc	r12, r24
     c8a:	d9 1e       	adc	r13, r25
     c8c:	a6 16       	cp	r10, r22
     c8e:	b7 06       	cpc	r11, r23
     c90:	c8 06       	cpc	r12, r24
     c92:	d9 06       	cpc	r13, r25
     c94:	70 f0       	brcs	.+28     	; 0xcb2 <__stack+0x453>
     c96:	a2 16       	cp	r10, r18
     c98:	b3 06       	cpc	r11, r19
     c9a:	c4 06       	cpc	r12, r20
     c9c:	d5 06       	cpc	r13, r21
     c9e:	48 f4       	brcc	.+18     	; 0xcb2 <__stack+0x453>
     ca0:	08 94       	sec
     ca2:	61 08       	sbc	r6, r1
     ca4:	71 08       	sbc	r7, r1
     ca6:	81 08       	sbc	r8, r1
     ca8:	91 08       	sbc	r9, r1
     caa:	a6 0e       	add	r10, r22
     cac:	b7 1e       	adc	r11, r23
     cae:	c8 1e       	adc	r12, r24
     cb0:	d9 1e       	adc	r13, r25
     cb2:	d6 01       	movw	r26, r12
     cb4:	c5 01       	movw	r24, r10
     cb6:	82 1b       	sub	r24, r18
     cb8:	93 0b       	sbc	r25, r19
     cba:	a4 0b       	sbc	r26, r20
     cbc:	b5 0b       	sbc	r27, r21
     cbe:	89 8f       	std	Y+25, r24	; 0x19
     cc0:	9a 8f       	std	Y+26, r25	; 0x1a
     cc2:	ab 8f       	std	Y+27, r26	; 0x1b
     cc4:	bc 8f       	std	Y+28, r27	; 0x1c
     cc6:	d1 01       	movw	r26, r2
     cc8:	99 27       	eor	r25, r25
     cca:	88 27       	eor	r24, r24
     ccc:	64 01       	movw	r12, r8
     cce:	53 01       	movw	r10, r6
     cd0:	a8 2a       	or	r10, r24
     cd2:	b9 2a       	or	r11, r25
     cd4:	ca 2a       	or	r12, r26
     cd6:	db 2a       	or	r13, r27
     cd8:	a9 aa       	std	Y+49, r10	; 0x31
     cda:	ba aa       	std	Y+50, r11	; 0x32
     cdc:	cb aa       	std	Y+51, r12	; 0x33
     cde:	dc aa       	std	Y+52, r13	; 0x34
     ce0:	86 01       	movw	r16, r12
     ce2:	75 01       	movw	r14, r10
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	3f ef       	ldi	r19, 0xFF	; 255
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	e2 22       	and	r14, r18
     cee:	f3 22       	and	r15, r19
     cf0:	04 23       	and	r16, r20
     cf2:	15 23       	and	r17, r21
     cf4:	a6 01       	movw	r20, r12
     cf6:	66 27       	eor	r22, r22
     cf8:	77 27       	eor	r23, r23
     cfa:	6d 96       	adiw	r28, 0x1d	; 29
     cfc:	4c af       	std	Y+60, r20	; 0x3c
     cfe:	5d af       	std	Y+61, r21	; 0x3d
     d00:	6e af       	std	Y+62, r22	; 0x3e
     d02:	7f af       	std	Y+63, r23	; 0x3f
     d04:	6d 97       	sbiw	r28, 0x1d	; 29
     d06:	a9 a0       	ldd	r10, Y+33	; 0x21
     d08:	ba a0       	ldd	r11, Y+34	; 0x22
     d0a:	cb a0       	ldd	r12, Y+35	; 0x23
     d0c:	dc a0       	ldd	r13, Y+36	; 0x24
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
     d10:	7f ef       	ldi	r23, 0xFF	; 255
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a6 22       	and	r10, r22
     d18:	b7 22       	and	r11, r23
     d1a:	c8 22       	and	r12, r24
     d1c:	d9 22       	and	r13, r25
     d1e:	89 a1       	ldd	r24, Y+33	; 0x21
     d20:	9a a1       	ldd	r25, Y+34	; 0x22
     d22:	ab a1       	ldd	r26, Y+35	; 0x23
     d24:	bc a1       	ldd	r27, Y+36	; 0x24
     d26:	1d 01       	movw	r2, r26
     d28:	44 24       	eor	r4, r4
     d2a:	55 24       	eor	r5, r5
     d2c:	c8 01       	movw	r24, r16
     d2e:	b7 01       	movw	r22, r14
     d30:	a6 01       	movw	r20, r12
     d32:	95 01       	movw	r18, r10
     d34:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     d38:	69 96       	adiw	r28, 0x19	; 25
     d3a:	6c af       	std	Y+60, r22	; 0x3c
     d3c:	7d af       	std	Y+61, r23	; 0x3d
     d3e:	8e af       	std	Y+62, r24	; 0x3e
     d40:	9f af       	std	Y+63, r25	; 0x3f
     d42:	69 97       	sbiw	r28, 0x19	; 25
     d44:	c8 01       	movw	r24, r16
     d46:	b7 01       	movw	r22, r14
     d48:	a2 01       	movw	r20, r4
     d4a:	91 01       	movw	r18, r2
     d4c:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     d50:	3b 01       	movw	r6, r22
     d52:	4c 01       	movw	r8, r24
     d54:	6d 96       	adiw	r28, 0x1d	; 29
     d56:	6c ad       	ldd	r22, Y+60	; 0x3c
     d58:	7d ad       	ldd	r23, Y+61	; 0x3d
     d5a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d5c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d5e:	6d 97       	sbiw	r28, 0x1d	; 29
     d60:	a6 01       	movw	r20, r12
     d62:	95 01       	movw	r18, r10
     d64:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     d68:	7b 01       	movw	r14, r22
     d6a:	8c 01       	movw	r16, r24
     d6c:	6d 96       	adiw	r28, 0x1d	; 29
     d6e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d70:	7d ad       	ldd	r23, Y+61	; 0x3d
     d72:	8e ad       	ldd	r24, Y+62	; 0x3e
     d74:	9f ad       	ldd	r25, Y+63	; 0x3f
     d76:	6d 97       	sbiw	r28, 0x1d	; 29
     d78:	a2 01       	movw	r20, r4
     d7a:	91 01       	movw	r18, r2
     d7c:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
     d80:	5b 01       	movw	r10, r22
     d82:	6c 01       	movw	r12, r24
     d84:	a8 01       	movw	r20, r16
     d86:	97 01       	movw	r18, r14
     d88:	26 0d       	add	r18, r6
     d8a:	37 1d       	adc	r19, r7
     d8c:	48 1d       	adc	r20, r8
     d8e:	59 1d       	adc	r21, r9
     d90:	69 96       	adiw	r28, 0x19	; 25
     d92:	6c ac       	ldd	r6, Y+60	; 0x3c
     d94:	7d ac       	ldd	r7, Y+61	; 0x3d
     d96:	8e ac       	ldd	r8, Y+62	; 0x3e
     d98:	9f ac       	ldd	r9, Y+63	; 0x3f
     d9a:	69 97       	sbiw	r28, 0x19	; 25
     d9c:	c4 01       	movw	r24, r8
     d9e:	aa 27       	eor	r26, r26
     da0:	bb 27       	eor	r27, r27
     da2:	28 0f       	add	r18, r24
     da4:	39 1f       	adc	r19, r25
     da6:	4a 1f       	adc	r20, r26
     da8:	5b 1f       	adc	r21, r27
     daa:	2e 15       	cp	r18, r14
     dac:	3f 05       	cpc	r19, r15
     dae:	40 07       	cpc	r20, r16
     db0:	51 07       	cpc	r21, r17
     db2:	48 f4       	brcc	.+18     	; 0xdc6 <__stack+0x567>
     db4:	e1 2c       	mov	r14, r1
     db6:	f1 2c       	mov	r15, r1
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	06 2f       	mov	r16, r22
     dbc:	11 2d       	mov	r17, r1
     dbe:	ae 0c       	add	r10, r14
     dc0:	bf 1c       	adc	r11, r15
     dc2:	c0 1e       	adc	r12, r16
     dc4:	d1 1e       	adc	r13, r17
     dc6:	ca 01       	movw	r24, r20
     dc8:	aa 27       	eor	r26, r26
     dca:	bb 27       	eor	r27, r27
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	6a 0d       	add	r22, r10
     dd2:	7b 1d       	adc	r23, r11
     dd4:	8c 1d       	adc	r24, r12
     dd6:	9d 1d       	adc	r25, r13
     dd8:	69 8c       	ldd	r6, Y+25	; 0x19
     dda:	7a 8c       	ldd	r7, Y+26	; 0x1a
     ddc:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dde:	9c 8c       	ldd	r9, Y+28	; 0x1c
     de0:	66 16       	cp	r6, r22
     de2:	77 06       	cpc	r7, r23
     de4:	88 06       	cpc	r8, r24
     de6:	99 06       	cpc	r9, r25
     de8:	40 f1       	brcs	.+80     	; 0xe3a <__stack+0x5db>
     dea:	66 15       	cp	r22, r6
     dec:	77 05       	cpc	r23, r7
     dee:	88 05       	cpc	r24, r8
     df0:	99 05       	cpc	r25, r9
     df2:	09 f0       	breq	.+2      	; 0xdf6 <__stack+0x597>
     df4:	43 c0       	rjmp	.+134    	; 0xe7c <__stack+0x61d>
     df6:	d9 01       	movw	r26, r18
     df8:	99 27       	eor	r25, r25
     dfa:	88 27       	eor	r24, r24
     dfc:	69 96       	adiw	r28, 0x19	; 25
     dfe:	2c ad       	ldd	r18, Y+60	; 0x3c
     e00:	3d ad       	ldd	r19, Y+61	; 0x3d
     e02:	4e ad       	ldd	r20, Y+62	; 0x3e
     e04:	5f ad       	ldd	r21, Y+63	; 0x3f
     e06:	69 97       	sbiw	r28, 0x19	; 25
     e08:	40 70       	andi	r20, 0x00	; 0
     e0a:	50 70       	andi	r21, 0x00	; 0
     e0c:	82 0f       	add	r24, r18
     e0e:	93 1f       	adc	r25, r19
     e10:	a4 1f       	adc	r26, r20
     e12:	b5 1f       	adc	r27, r21
     e14:	2d a5       	ldd	r18, Y+45	; 0x2d
     e16:	3e a5       	ldd	r19, Y+46	; 0x2e
     e18:	4f a5       	ldd	r20, Y+47	; 0x2f
     e1a:	58 a9       	ldd	r21, Y+48	; 0x30
     e1c:	6e 96       	adiw	r28, 0x1e	; 30
     e1e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e20:	6e 97       	sbiw	r28, 0x1e	; 30
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <__stack+0x5cd>
     e24:	22 0f       	add	r18, r18
     e26:	33 1f       	adc	r19, r19
     e28:	44 1f       	adc	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	0a 94       	dec	r0
     e2e:	d2 f7       	brpl	.-12     	; 0xe24 <__stack+0x5c5>
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	4a 07       	cpc	r20, r26
     e36:	5b 07       	cpc	r21, r27
     e38:	08 f5       	brcc	.+66     	; 0xe7c <__stack+0x61d>
     e3a:	09 a9       	ldd	r16, Y+49	; 0x31
     e3c:	1a a9       	ldd	r17, Y+50	; 0x32
     e3e:	2b a9       	ldd	r18, Y+51	; 0x33
     e40:	3c a9       	ldd	r19, Y+52	; 0x34
     e42:	01 50       	subi	r16, 0x01	; 1
     e44:	10 40       	sbci	r17, 0x00	; 0
     e46:	20 40       	sbci	r18, 0x00	; 0
     e48:	30 40       	sbci	r19, 0x00	; 0
     e4a:	09 ab       	std	Y+49, r16	; 0x31
     e4c:	1a ab       	std	Y+50, r17	; 0x32
     e4e:	2b ab       	std	Y+51, r18	; 0x33
     e50:	3c ab       	std	Y+52, r19	; 0x34
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <__stack+0x61d>
     e54:	66 24       	eor	r6, r6
     e56:	77 24       	eor	r7, r7
     e58:	43 01       	movw	r8, r6
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	29 ab       	std	Y+49, r18	; 0x31
     e64:	3a ab       	std	Y+50, r19	; 0x32
     e66:	4b ab       	std	Y+51, r20	; 0x33
     e68:	5c ab       	std	Y+52, r21	; 0x34
     e6a:	0b c0       	rjmp	.+22     	; 0xe82 <__stack+0x623>
     e6c:	66 24       	eor	r6, r6
     e6e:	77 24       	eor	r7, r7
     e70:	43 01       	movw	r8, r6
     e72:	19 aa       	std	Y+49, r1	; 0x31
     e74:	1a aa       	std	Y+50, r1	; 0x32
     e76:	1b aa       	std	Y+51, r1	; 0x33
     e78:	1c aa       	std	Y+52, r1	; 0x34
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <__stack+0x623>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	fe 01       	movw	r30, r28
     e84:	71 96       	adiw	r30, 0x11	; 17
     e86:	88 e0       	ldi	r24, 0x08	; 8
     e88:	df 01       	movw	r26, r30
     e8a:	1d 92       	st	X+, r1
     e8c:	8a 95       	dec	r24
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <__stack+0x62b>
     e90:	a9 a8       	ldd	r10, Y+49	; 0x31
     e92:	ba a8       	ldd	r11, Y+50	; 0x32
     e94:	cb a8       	ldd	r12, Y+51	; 0x33
     e96:	dc a8       	ldd	r13, Y+52	; 0x34
     e98:	a9 8a       	std	Y+17, r10	; 0x11
     e9a:	ba 8a       	std	Y+18, r11	; 0x12
     e9c:	cb 8a       	std	Y+19, r12	; 0x13
     e9e:	dc 8a       	std	Y+20, r13	; 0x14
     ea0:	6d 8a       	std	Y+21, r6	; 0x15
     ea2:	7e 8a       	std	Y+22, r7	; 0x16
     ea4:	8f 8a       	std	Y+23, r8	; 0x17
     ea6:	98 8e       	std	Y+24, r9	; 0x18
     ea8:	29 a9       	ldd	r18, Y+49	; 0x31
     eaa:	3a 89       	ldd	r19, Y+18	; 0x12
     eac:	4b 89       	ldd	r20, Y+19	; 0x13
     eae:	5c 89       	ldd	r21, Y+20	; 0x14
     eb0:	66 2d       	mov	r22, r6
     eb2:	7e 89       	ldd	r23, Y+22	; 0x16
     eb4:	8f 89       	ldd	r24, Y+23	; 0x17
     eb6:	98 8d       	ldd	r25, Y+24	; 0x18
     eb8:	c2 5a       	subi	r28, 0xA2	; 162
     eba:	df 4f       	sbci	r29, 0xFF	; 255
     ebc:	e2 e1       	ldi	r30, 0x12	; 18
     ebe:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__>

00000ec2 <__umoddi3>:
     ec2:	ab e5       	ldi	r26, 0x5B	; 91
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e6       	ldi	r30, 0x67	; 103
     ec8:	f7 e0       	ldi	r31, 0x07	; 7
     eca:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__>
     ece:	a8 e0       	ldi	r26, 0x08	; 8
     ed0:	4e 01       	movw	r8, r28
     ed2:	08 94       	sec
     ed4:	81 1c       	adc	r8, r1
     ed6:	91 1c       	adc	r9, r1
     ed8:	f4 01       	movw	r30, r8
     eda:	6a 2e       	mov	r6, r26
     edc:	11 92       	st	Z+, r1
     ede:	6a 94       	dec	r6
     ee0:	e9 f7       	brne	.-6      	; 0xedc <__umoddi3+0x1a>
     ee2:	29 83       	std	Y+1, r18	; 0x01
     ee4:	3a 83       	std	Y+2, r19	; 0x02
     ee6:	4b 83       	std	Y+3, r20	; 0x03
     ee8:	5c 83       	std	Y+4, r21	; 0x04
     eea:	6d 83       	std	Y+5, r22	; 0x05
     eec:	7e 83       	std	Y+6, r23	; 0x06
     eee:	8f 83       	std	Y+7, r24	; 0x07
     ef0:	98 87       	std	Y+8, r25	; 0x08
     ef2:	ce 01       	movw	r24, r28
     ef4:	09 96       	adiw	r24, 0x09	; 9
     ef6:	fc 01       	movw	r30, r24
     ef8:	11 92       	st	Z+, r1
     efa:	aa 95       	dec	r26
     efc:	e9 f7       	brne	.-6      	; 0xef8 <__umoddi3+0x36>
     efe:	a9 86       	std	Y+9, r10	; 0x09
     f00:	ba 86       	std	Y+10, r11	; 0x0a
     f02:	cb 86       	std	Y+11, r12	; 0x0b
     f04:	dc 86       	std	Y+12, r13	; 0x0c
     f06:	ed 86       	std	Y+13, r14	; 0x0d
     f08:	fe 86       	std	Y+14, r15	; 0x0e
     f0a:	0f 87       	std	Y+15, r16	; 0x0f
     f0c:	18 8b       	std	Y+16, r17	; 0x10
     f0e:	29 84       	ldd	r2, Y+9	; 0x09
     f10:	3a 84       	ldd	r3, Y+10	; 0x0a
     f12:	4b 84       	ldd	r4, Y+11	; 0x0b
     f14:	5c 84       	ldd	r5, Y+12	; 0x0c
     f16:	ad 84       	ldd	r10, Y+13	; 0x0d
     f18:	be 84       	ldd	r11, Y+14	; 0x0e
     f1a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f1c:	d8 88       	ldd	r13, Y+16	; 0x10
     f1e:	29 81       	ldd	r18, Y+1	; 0x01
     f20:	3a 81       	ldd	r19, Y+2	; 0x02
     f22:	4b 81       	ldd	r20, Y+3	; 0x03
     f24:	5c 81       	ldd	r21, Y+4	; 0x04
     f26:	69 96       	adiw	r28, 0x19	; 25
     f28:	2f af       	std	Y+63, r18	; 0x3f
     f2a:	69 97       	sbiw	r28, 0x19	; 25
     f2c:	6a 96       	adiw	r28, 0x1a	; 26
     f2e:	3f af       	std	Y+63, r19	; 0x3f
     f30:	6a 97       	sbiw	r28, 0x1a	; 26
     f32:	6b 96       	adiw	r28, 0x1b	; 27
     f34:	4f af       	std	Y+63, r20	; 0x3f
     f36:	6b 97       	sbiw	r28, 0x1b	; 27
     f38:	6c 96       	adiw	r28, 0x1c	; 28
     f3a:	5f af       	std	Y+63, r21	; 0x3f
     f3c:	6c 97       	sbiw	r28, 0x1c	; 28
     f3e:	6c 96       	adiw	r28, 0x1c	; 28
     f40:	6c ac       	ldd	r6, Y+60	; 0x3c
     f42:	7d ac       	ldd	r7, Y+61	; 0x3d
     f44:	8e ac       	ldd	r8, Y+62	; 0x3e
     f46:	9f ac       	ldd	r9, Y+63	; 0x3f
     f48:	6c 97       	sbiw	r28, 0x1c	; 28
     f4a:	69 aa       	std	Y+49, r6	; 0x31
     f4c:	7a aa       	std	Y+50, r7	; 0x32
     f4e:	8b aa       	std	Y+51, r8	; 0x33
     f50:	9c aa       	std	Y+52, r9	; 0x34
     f52:	6d 81       	ldd	r22, Y+5	; 0x05
     f54:	7e 81       	ldd	r23, Y+6	; 0x06
     f56:	8f 81       	ldd	r24, Y+7	; 0x07
     f58:	98 85       	ldd	r25, Y+8	; 0x08
     f5a:	3b 01       	movw	r6, r22
     f5c:	4c 01       	movw	r8, r24
     f5e:	6d aa       	std	Y+53, r6	; 0x35
     f60:	7e aa       	std	Y+54, r7	; 0x36
     f62:	8f aa       	std	Y+55, r8	; 0x37
     f64:	98 ae       	std	Y+56, r9	; 0x38
     f66:	a1 14       	cp	r10, r1
     f68:	b1 04       	cpc	r11, r1
     f6a:	c1 04       	cpc	r12, r1
     f6c:	d1 04       	cpc	r13, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <__umoddi3+0xb0>
     f70:	04 c3       	rjmp	.+1544   	; 0x157a <__umoddi3+0x6b8>
     f72:	62 14       	cp	r6, r2
     f74:	73 04       	cpc	r7, r3
     f76:	84 04       	cpc	r8, r4
     f78:	95 04       	cpc	r9, r5
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__umoddi3+0xbc>
     f7c:	00 c1       	rjmp	.+512    	; 0x117e <__umoddi3+0x2bc>
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	20 16       	cp	r2, r16
     f82:	00 e0       	ldi	r16, 0x00	; 0
     f84:	30 06       	cpc	r3, r16
     f86:	01 e0       	ldi	r16, 0x01	; 1
     f88:	40 06       	cpc	r4, r16
     f8a:	00 e0       	ldi	r16, 0x00	; 0
     f8c:	50 06       	cpc	r5, r16
     f8e:	88 f4       	brcc	.+34     	; 0xfb2 <__umoddi3+0xf0>
     f90:	1f ef       	ldi	r17, 0xFF	; 255
     f92:	21 16       	cp	r2, r17
     f94:	31 04       	cpc	r3, r1
     f96:	41 04       	cpc	r4, r1
     f98:	51 04       	cpc	r5, r1
     f9a:	39 f0       	breq	.+14     	; 0xfaa <__umoddi3+0xe8>
     f9c:	30 f0       	brcs	.+12     	; 0xfaa <__umoddi3+0xe8>
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	e8 2e       	mov	r14, r24
     fa2:	f1 2c       	mov	r15, r1
     fa4:	01 2d       	mov	r16, r1
     fa6:	11 2d       	mov	r17, r1
     fa8:	18 c0       	rjmp	.+48     	; 0xfda <__umoddi3+0x118>
     faa:	ee 24       	eor	r14, r14
     fac:	ff 24       	eor	r15, r15
     fae:	87 01       	movw	r16, r14
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <__umoddi3+0x118>
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	24 16       	cp	r2, r20
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	34 06       	cpc	r3, r20
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	44 06       	cpc	r4, r20
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	54 06       	cpc	r5, r20
     fc2:	30 f0       	brcs	.+12     	; 0xfd0 <__umoddi3+0x10e>
     fc4:	b8 e1       	ldi	r27, 0x18	; 24
     fc6:	eb 2e       	mov	r14, r27
     fc8:	f1 2c       	mov	r15, r1
     fca:	01 2d       	mov	r16, r1
     fcc:	11 2d       	mov	r17, r1
     fce:	05 c0       	rjmp	.+10     	; 0xfda <__umoddi3+0x118>
     fd0:	a0 e1       	ldi	r26, 0x10	; 16
     fd2:	ea 2e       	mov	r14, r26
     fd4:	f1 2c       	mov	r15, r1
     fd6:	01 2d       	mov	r16, r1
     fd8:	11 2d       	mov	r17, r1
     fda:	d2 01       	movw	r26, r4
     fdc:	c1 01       	movw	r24, r2
     fde:	0e 2c       	mov	r0, r14
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <__umoddi3+0x128>
     fe2:	b6 95       	lsr	r27
     fe4:	a7 95       	ror	r26
     fe6:	97 95       	ror	r25
     fe8:	87 95       	ror	r24
     fea:	0a 94       	dec	r0
     fec:	d2 f7       	brpl	.-12     	; 0xfe2 <__umoddi3+0x120>
     fee:	8c 58       	subi	r24, 0x8C	; 140
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	dc 01       	movw	r26, r24
     ff4:	2c 91       	ld	r18, X
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	8e 19       	sub	r24, r14
    1000:	9f 09       	sbc	r25, r15
    1002:	a0 0b       	sbc	r26, r16
    1004:	b1 0b       	sbc	r27, r17
    1006:	5c 01       	movw	r10, r24
    1008:	6d 01       	movw	r12, r26
    100a:	a2 1a       	sub	r10, r18
    100c:	b1 08       	sbc	r11, r1
    100e:	c1 08       	sbc	r12, r1
    1010:	d1 08       	sbc	r13, r1
    1012:	a9 ae       	std	Y+57, r10	; 0x39
    1014:	ba ae       	std	Y+58, r11	; 0x3a
    1016:	cb ae       	std	Y+59, r12	; 0x3b
    1018:	dc ae       	std	Y+60, r13	; 0x3c
    101a:	a1 14       	cp	r10, r1
    101c:	b1 04       	cpc	r11, r1
    101e:	c1 04       	cpc	r12, r1
    1020:	d1 04       	cpc	r13, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <__umoddi3+0x164>
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <__umoddi3+0x1e2>
    1026:	69 ad       	ldd	r22, Y+57	; 0x39
    1028:	06 2e       	mov	r0, r22
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <__umoddi3+0x172>
    102c:	22 0c       	add	r2, r2
    102e:	33 1c       	adc	r3, r3
    1030:	44 1c       	adc	r4, r4
    1032:	55 1c       	adc	r5, r5
    1034:	0a 94       	dec	r0
    1036:	d2 f7       	brpl	.-12     	; 0x102c <__umoddi3+0x16a>
    1038:	a4 01       	movw	r20, r8
    103a:	93 01       	movw	r18, r6
    103c:	06 2e       	mov	r0, r22
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__umoddi3+0x186>
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	44 1f       	adc	r20, r20
    1046:	55 1f       	adc	r21, r21
    1048:	0a 94       	dec	r0
    104a:	d2 f7       	brpl	.-12     	; 0x1040 <__umoddi3+0x17e>
    104c:	80 e2       	ldi	r24, 0x20	; 32
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	8a 19       	sub	r24, r10
    1052:	9b 09       	sbc	r25, r11
    1054:	6c 96       	adiw	r28, 0x1c	; 28
    1056:	cc ac       	ldd	r12, Y+60	; 0x3c
    1058:	dd ac       	ldd	r13, Y+61	; 0x3d
    105a:	ee ac       	ldd	r14, Y+62	; 0x3e
    105c:	ff ac       	ldd	r15, Y+63	; 0x3f
    105e:	6c 97       	sbiw	r28, 0x1c	; 28
    1060:	04 c0       	rjmp	.+8      	; 0x106a <__umoddi3+0x1a8>
    1062:	f6 94       	lsr	r15
    1064:	e7 94       	ror	r14
    1066:	d7 94       	ror	r13
    1068:	c7 94       	ror	r12
    106a:	8a 95       	dec	r24
    106c:	d2 f7       	brpl	.-12     	; 0x1062 <__umoddi3+0x1a0>
    106e:	87 01       	movw	r16, r14
    1070:	76 01       	movw	r14, r12
    1072:	e2 2a       	or	r14, r18
    1074:	f3 2a       	or	r15, r19
    1076:	04 2b       	or	r16, r20
    1078:	15 2b       	or	r17, r21
    107a:	ed aa       	std	Y+53, r14	; 0x35
    107c:	fe aa       	std	Y+54, r15	; 0x36
    107e:	0f ab       	std	Y+55, r16	; 0x37
    1080:	18 af       	std	Y+56, r17	; 0x38
    1082:	6c 96       	adiw	r28, 0x1c	; 28
    1084:	8c ad       	ldd	r24, Y+60	; 0x3c
    1086:	9d ad       	ldd	r25, Y+61	; 0x3d
    1088:	ae ad       	ldd	r26, Y+62	; 0x3e
    108a:	bf ad       	ldd	r27, Y+63	; 0x3f
    108c:	6c 97       	sbiw	r28, 0x1c	; 28
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <__umoddi3+0x1d6>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	aa 1f       	adc	r26, r26
    1096:	bb 1f       	adc	r27, r27
    1098:	6a 95       	dec	r22
    109a:	d2 f7       	brpl	.-12     	; 0x1090 <__umoddi3+0x1ce>
    109c:	89 ab       	std	Y+49, r24	; 0x31
    109e:	9a ab       	std	Y+50, r25	; 0x32
    10a0:	ab ab       	std	Y+51, r26	; 0x33
    10a2:	bc ab       	std	Y+52, r27	; 0x34
    10a4:	32 01       	movw	r6, r4
    10a6:	88 24       	eor	r8, r8
    10a8:	99 24       	eor	r9, r9
    10aa:	b2 01       	movw	r22, r4
    10ac:	a1 01       	movw	r20, r2
    10ae:	60 70       	andi	r22, 0x00	; 0
    10b0:	70 70       	andi	r23, 0x00	; 0
    10b2:	21 96       	adiw	r28, 0x01	; 1
    10b4:	4c af       	std	Y+60, r20	; 0x3c
    10b6:	5d af       	std	Y+61, r21	; 0x3d
    10b8:	6e af       	std	Y+62, r22	; 0x3e
    10ba:	7f af       	std	Y+63, r23	; 0x3f
    10bc:	21 97       	sbiw	r28, 0x01	; 1
    10be:	6d a9       	ldd	r22, Y+53	; 0x35
    10c0:	7e a9       	ldd	r23, Y+54	; 0x36
    10c2:	8f a9       	ldd	r24, Y+55	; 0x37
    10c4:	98 ad       	ldd	r25, Y+56	; 0x38
    10c6:	a4 01       	movw	r20, r8
    10c8:	93 01       	movw	r18, r6
    10ca:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    10ce:	7b 01       	movw	r14, r22
    10d0:	8c 01       	movw	r16, r24
    10d2:	6d a9       	ldd	r22, Y+53	; 0x35
    10d4:	7e a9       	ldd	r23, Y+54	; 0x36
    10d6:	8f a9       	ldd	r24, Y+55	; 0x37
    10d8:	98 ad       	ldd	r25, Y+56	; 0x38
    10da:	a4 01       	movw	r20, r8
    10dc:	93 01       	movw	r18, r6
    10de:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    10e2:	ca 01       	movw	r24, r20
    10e4:	b9 01       	movw	r22, r18
    10e6:	21 96       	adiw	r28, 0x01	; 1
    10e8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10ea:	3d ad       	ldd	r19, Y+61	; 0x3d
    10ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    10ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    10f0:	21 97       	sbiw	r28, 0x01	; 1
    10f2:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    10f6:	9b 01       	movw	r18, r22
    10f8:	ac 01       	movw	r20, r24
    10fa:	87 01       	movw	r16, r14
    10fc:	ff 24       	eor	r15, r15
    10fe:	ee 24       	eor	r14, r14
    1100:	a9 a8       	ldd	r10, Y+49	; 0x31
    1102:	ba a8       	ldd	r11, Y+50	; 0x32
    1104:	cb a8       	ldd	r12, Y+51	; 0x33
    1106:	dc a8       	ldd	r13, Y+52	; 0x34
    1108:	c6 01       	movw	r24, r12
    110a:	aa 27       	eor	r26, r26
    110c:	bb 27       	eor	r27, r27
    110e:	57 01       	movw	r10, r14
    1110:	68 01       	movw	r12, r16
    1112:	a8 2a       	or	r10, r24
    1114:	b9 2a       	or	r11, r25
    1116:	ca 2a       	or	r12, r26
    1118:	db 2a       	or	r13, r27
    111a:	a2 16       	cp	r10, r18
    111c:	b3 06       	cpc	r11, r19
    111e:	c4 06       	cpc	r12, r20
    1120:	d5 06       	cpc	r13, r21
    1122:	90 f4       	brcc	.+36     	; 0x1148 <__umoddi3+0x286>
    1124:	a2 0c       	add	r10, r2
    1126:	b3 1c       	adc	r11, r3
    1128:	c4 1c       	adc	r12, r4
    112a:	d5 1c       	adc	r13, r5
    112c:	a2 14       	cp	r10, r2
    112e:	b3 04       	cpc	r11, r3
    1130:	c4 04       	cpc	r12, r4
    1132:	d5 04       	cpc	r13, r5
    1134:	48 f0       	brcs	.+18     	; 0x1148 <__umoddi3+0x286>
    1136:	a2 16       	cp	r10, r18
    1138:	b3 06       	cpc	r11, r19
    113a:	c4 06       	cpc	r12, r20
    113c:	d5 06       	cpc	r13, r21
    113e:	20 f4       	brcc	.+8      	; 0x1148 <__umoddi3+0x286>
    1140:	a2 0c       	add	r10, r2
    1142:	b3 1c       	adc	r11, r3
    1144:	c4 1c       	adc	r12, r4
    1146:	d5 1c       	adc	r13, r5
    1148:	a2 1a       	sub	r10, r18
    114a:	b3 0a       	sbc	r11, r19
    114c:	c4 0a       	sbc	r12, r20
    114e:	d5 0a       	sbc	r13, r21
    1150:	c6 01       	movw	r24, r12
    1152:	b5 01       	movw	r22, r10
    1154:	a4 01       	movw	r20, r8
    1156:	93 01       	movw	r18, r6
    1158:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    115c:	7b 01       	movw	r14, r22
    115e:	8c 01       	movw	r16, r24
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    116c:	ca 01       	movw	r24, r20
    116e:	b9 01       	movw	r22, r18
    1170:	21 96       	adiw	r28, 0x01	; 1
    1172:	2c ad       	ldd	r18, Y+60	; 0x3c
    1174:	3d ad       	ldd	r19, Y+61	; 0x3d
    1176:	4e ad       	ldd	r20, Y+62	; 0x3e
    1178:	5f ad       	ldd	r21, Y+63	; 0x3f
    117a:	21 97       	sbiw	r28, 0x01	; 1
    117c:	ba c1       	rjmp	.+884    	; 0x14f2 <__umoddi3+0x630>
    117e:	21 14       	cp	r2, r1
    1180:	31 04       	cpc	r3, r1
    1182:	41 04       	cpc	r4, r1
    1184:	51 04       	cpc	r5, r1
    1186:	71 f4       	brne	.+28     	; 0x11a4 <__umoddi3+0x2e2>
    1188:	61 e0       	ldi	r22, 0x01	; 1
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    119c:	c9 01       	movw	r24, r18
    119e:	da 01       	movw	r26, r20
    11a0:	1c 01       	movw	r2, r24
    11a2:	2d 01       	movw	r4, r26
    11a4:	00 e0       	ldi	r16, 0x00	; 0
    11a6:	20 16       	cp	r2, r16
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	30 06       	cpc	r3, r16
    11ac:	01 e0       	ldi	r16, 0x01	; 1
    11ae:	40 06       	cpc	r4, r16
    11b0:	00 e0       	ldi	r16, 0x00	; 0
    11b2:	50 06       	cpc	r5, r16
    11b4:	88 f4       	brcc	.+34     	; 0x11d8 <__umoddi3+0x316>
    11b6:	1f ef       	ldi	r17, 0xFF	; 255
    11b8:	21 16       	cp	r2, r17
    11ba:	31 04       	cpc	r3, r1
    11bc:	41 04       	cpc	r4, r1
    11be:	51 04       	cpc	r5, r1
    11c0:	39 f0       	breq	.+14     	; 0x11d0 <__umoddi3+0x30e>
    11c2:	30 f0       	brcs	.+12     	; 0x11d0 <__umoddi3+0x30e>
    11c4:	68 e0       	ldi	r22, 0x08	; 8
    11c6:	e6 2e       	mov	r14, r22
    11c8:	f1 2c       	mov	r15, r1
    11ca:	01 2d       	mov	r16, r1
    11cc:	11 2d       	mov	r17, r1
    11ce:	18 c0       	rjmp	.+48     	; 0x1200 <__umoddi3+0x33e>
    11d0:	ee 24       	eor	r14, r14
    11d2:	ff 24       	eor	r15, r15
    11d4:	87 01       	movw	r16, r14
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <__umoddi3+0x33e>
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	24 16       	cp	r2, r20
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	34 06       	cpc	r3, r20
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	44 06       	cpc	r4, r20
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	54 06       	cpc	r5, r20
    11e8:	30 f0       	brcs	.+12     	; 0x11f6 <__umoddi3+0x334>
    11ea:	58 e1       	ldi	r21, 0x18	; 24
    11ec:	e5 2e       	mov	r14, r21
    11ee:	f1 2c       	mov	r15, r1
    11f0:	01 2d       	mov	r16, r1
    11f2:	11 2d       	mov	r17, r1
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <__umoddi3+0x33e>
    11f6:	40 e1       	ldi	r20, 0x10	; 16
    11f8:	e4 2e       	mov	r14, r20
    11fa:	f1 2c       	mov	r15, r1
    11fc:	01 2d       	mov	r16, r1
    11fe:	11 2d       	mov	r17, r1
    1200:	d2 01       	movw	r26, r4
    1202:	c1 01       	movw	r24, r2
    1204:	0e 2c       	mov	r0, r14
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <__umoddi3+0x34e>
    1208:	b6 95       	lsr	r27
    120a:	a7 95       	ror	r26
    120c:	97 95       	ror	r25
    120e:	87 95       	ror	r24
    1210:	0a 94       	dec	r0
    1212:	d2 f7       	brpl	.-12     	; 0x1208 <__umoddi3+0x346>
    1214:	8c 58       	subi	r24, 0x8C	; 140
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	dc 01       	movw	r26, r24
    121a:	2c 91       	ld	r18, X
    121c:	30 e2       	ldi	r19, 0x20	; 32
    121e:	a3 2e       	mov	r10, r19
    1220:	b1 2c       	mov	r11, r1
    1222:	c1 2c       	mov	r12, r1
    1224:	d1 2c       	mov	r13, r1
    1226:	d6 01       	movw	r26, r12
    1228:	c5 01       	movw	r24, r10
    122a:	8e 19       	sub	r24, r14
    122c:	9f 09       	sbc	r25, r15
    122e:	a0 0b       	sbc	r26, r16
    1230:	b1 0b       	sbc	r27, r17
    1232:	7c 01       	movw	r14, r24
    1234:	8d 01       	movw	r16, r26
    1236:	e2 1a       	sub	r14, r18
    1238:	f1 08       	sbc	r15, r1
    123a:	01 09       	sbc	r16, r1
    123c:	11 09       	sbc	r17, r1
    123e:	e9 ae       	std	Y+57, r14	; 0x39
    1240:	fa ae       	std	Y+58, r15	; 0x3a
    1242:	0b af       	std	Y+59, r16	; 0x3b
    1244:	1c af       	std	Y+60, r17	; 0x3c
    1246:	e1 14       	cp	r14, r1
    1248:	f1 04       	cpc	r15, r1
    124a:	01 05       	cpc	r16, r1
    124c:	11 05       	cpc	r17, r1
    124e:	39 f4       	brne	.+14     	; 0x125e <__umoddi3+0x39c>
    1250:	64 01       	movw	r12, r8
    1252:	53 01       	movw	r10, r6
    1254:	a2 18       	sub	r10, r2
    1256:	b3 08       	sbc	r11, r3
    1258:	c4 08       	sbc	r12, r4
    125a:	d5 08       	sbc	r13, r5
    125c:	e2 c0       	rjmp	.+452    	; 0x1422 <__umoddi3+0x560>
    125e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1260:	68 96       	adiw	r28, 0x18	; 24
    1262:	ff ae       	std	Y+63, r15	; 0x3f
    1264:	68 97       	sbiw	r28, 0x18	; 24
    1266:	0f 2c       	mov	r0, r15
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <__umoddi3+0x3b0>
    126a:	22 0c       	add	r2, r2
    126c:	33 1c       	adc	r3, r3
    126e:	44 1c       	adc	r4, r4
    1270:	55 1c       	adc	r5, r5
    1272:	0a 94       	dec	r0
    1274:	d2 f7       	brpl	.-12     	; 0x126a <__umoddi3+0x3a8>
    1276:	8a 2d       	mov	r24, r10
    1278:	8f 19       	sub	r24, r15
    127a:	64 01       	movw	r12, r8
    127c:	53 01       	movw	r10, r6
    127e:	08 2e       	mov	r0, r24
    1280:	04 c0       	rjmp	.+8      	; 0x128a <__umoddi3+0x3c8>
    1282:	d6 94       	lsr	r13
    1284:	c7 94       	ror	r12
    1286:	b7 94       	ror	r11
    1288:	a7 94       	ror	r10
    128a:	0a 94       	dec	r0
    128c:	d2 f7       	brpl	.-12     	; 0x1282 <__umoddi3+0x3c0>
    128e:	a4 01       	movw	r20, r8
    1290:	93 01       	movw	r18, r6
    1292:	04 c0       	rjmp	.+8      	; 0x129c <__umoddi3+0x3da>
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	44 1f       	adc	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	fa 94       	dec	r15
    129e:	d2 f7       	brpl	.-12     	; 0x1294 <__umoddi3+0x3d2>
    12a0:	6c 96       	adiw	r28, 0x1c	; 28
    12a2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12a4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12a6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12a8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12aa:	6c 97       	sbiw	r28, 0x1c	; 28
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <__umoddi3+0x3f4>
    12ae:	96 94       	lsr	r9
    12b0:	87 94       	ror	r8
    12b2:	77 94       	ror	r7
    12b4:	67 94       	ror	r6
    12b6:	8a 95       	dec	r24
    12b8:	d2 f7       	brpl	.-12     	; 0x12ae <__umoddi3+0x3ec>
    12ba:	84 01       	movw	r16, r8
    12bc:	73 01       	movw	r14, r6
    12be:	e2 2a       	or	r14, r18
    12c0:	f3 2a       	or	r15, r19
    12c2:	04 2b       	or	r16, r20
    12c4:	15 2b       	or	r17, r21
    12c6:	ed a6       	std	Y+45, r14	; 0x2d
    12c8:	fe a6       	std	Y+46, r15	; 0x2e
    12ca:	0f a7       	std	Y+47, r16	; 0x2f
    12cc:	18 ab       	std	Y+48, r17	; 0x30
    12ce:	32 01       	movw	r6, r4
    12d0:	88 24       	eor	r8, r8
    12d2:	99 24       	eor	r9, r9
    12d4:	b2 01       	movw	r22, r4
    12d6:	a1 01       	movw	r20, r2
    12d8:	60 70       	andi	r22, 0x00	; 0
    12da:	70 70       	andi	r23, 0x00	; 0
    12dc:	25 96       	adiw	r28, 0x05	; 5
    12de:	4c af       	std	Y+60, r20	; 0x3c
    12e0:	5d af       	std	Y+61, r21	; 0x3d
    12e2:	6e af       	std	Y+62, r22	; 0x3e
    12e4:	7f af       	std	Y+63, r23	; 0x3f
    12e6:	25 97       	sbiw	r28, 0x05	; 5
    12e8:	c6 01       	movw	r24, r12
    12ea:	b5 01       	movw	r22, r10
    12ec:	a4 01       	movw	r20, r8
    12ee:	93 01       	movw	r18, r6
    12f0:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    12f4:	7b 01       	movw	r14, r22
    12f6:	8c 01       	movw	r16, r24
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    1304:	ca 01       	movw	r24, r20
    1306:	b9 01       	movw	r22, r18
    1308:	25 96       	adiw	r28, 0x05	; 5
    130a:	2c ad       	ldd	r18, Y+60	; 0x3c
    130c:	3d ad       	ldd	r19, Y+61	; 0x3d
    130e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1310:	5f ad       	ldd	r21, Y+63	; 0x3f
    1312:	25 97       	sbiw	r28, 0x05	; 5
    1314:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
    131c:	87 01       	movw	r16, r14
    131e:	ff 24       	eor	r15, r15
    1320:	ee 24       	eor	r14, r14
    1322:	ad a4       	ldd	r10, Y+45	; 0x2d
    1324:	be a4       	ldd	r11, Y+46	; 0x2e
    1326:	cf a4       	ldd	r12, Y+47	; 0x2f
    1328:	d8 a8       	ldd	r13, Y+48	; 0x30
    132a:	c6 01       	movw	r24, r12
    132c:	aa 27       	eor	r26, r26
    132e:	bb 27       	eor	r27, r27
    1330:	5c 01       	movw	r10, r24
    1332:	6d 01       	movw	r12, r26
    1334:	ae 28       	or	r10, r14
    1336:	bf 28       	or	r11, r15
    1338:	c0 2a       	or	r12, r16
    133a:	d1 2a       	or	r13, r17
    133c:	a2 16       	cp	r10, r18
    133e:	b3 06       	cpc	r11, r19
    1340:	c4 06       	cpc	r12, r20
    1342:	d5 06       	cpc	r13, r21
    1344:	90 f4       	brcc	.+36     	; 0x136a <__umoddi3+0x4a8>
    1346:	a2 0c       	add	r10, r2
    1348:	b3 1c       	adc	r11, r3
    134a:	c4 1c       	adc	r12, r4
    134c:	d5 1c       	adc	r13, r5
    134e:	a2 14       	cp	r10, r2
    1350:	b3 04       	cpc	r11, r3
    1352:	c4 04       	cpc	r12, r4
    1354:	d5 04       	cpc	r13, r5
    1356:	48 f0       	brcs	.+18     	; 0x136a <__umoddi3+0x4a8>
    1358:	a2 16       	cp	r10, r18
    135a:	b3 06       	cpc	r11, r19
    135c:	c4 06       	cpc	r12, r20
    135e:	d5 06       	cpc	r13, r21
    1360:	20 f4       	brcc	.+8      	; 0x136a <__umoddi3+0x4a8>
    1362:	a2 0c       	add	r10, r2
    1364:	b3 1c       	adc	r11, r3
    1366:	c4 1c       	adc	r12, r4
    1368:	d5 1c       	adc	r13, r5
    136a:	a2 1a       	sub	r10, r18
    136c:	b3 0a       	sbc	r11, r19
    136e:	c4 0a       	sbc	r12, r20
    1370:	d5 0a       	sbc	r13, r21
    1372:	c6 01       	movw	r24, r12
    1374:	b5 01       	movw	r22, r10
    1376:	a4 01       	movw	r20, r8
    1378:	93 01       	movw	r18, r6
    137a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    137e:	7b 01       	movw	r14, r22
    1380:	8c 01       	movw	r16, r24
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    138e:	ca 01       	movw	r24, r20
    1390:	b9 01       	movw	r22, r18
    1392:	25 96       	adiw	r28, 0x05	; 5
    1394:	2c ad       	ldd	r18, Y+60	; 0x3c
    1396:	3d ad       	ldd	r19, Y+61	; 0x3d
    1398:	4e ad       	ldd	r20, Y+62	; 0x3e
    139a:	5f ad       	ldd	r21, Y+63	; 0x3f
    139c:	25 97       	sbiw	r28, 0x05	; 5
    139e:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	87 01       	movw	r16, r14
    13a8:	ff 24       	eor	r15, r15
    13aa:	ee 24       	eor	r14, r14
    13ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    13b0:	af a5       	ldd	r26, Y+47	; 0x2f
    13b2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13b4:	a0 70       	andi	r26, 0x00	; 0
    13b6:	b0 70       	andi	r27, 0x00	; 0
    13b8:	57 01       	movw	r10, r14
    13ba:	68 01       	movw	r12, r16
    13bc:	a8 2a       	or	r10, r24
    13be:	b9 2a       	or	r11, r25
    13c0:	ca 2a       	or	r12, r26
    13c2:	db 2a       	or	r13, r27
    13c4:	a2 16       	cp	r10, r18
    13c6:	b3 06       	cpc	r11, r19
    13c8:	c4 06       	cpc	r12, r20
    13ca:	d5 06       	cpc	r13, r21
    13cc:	90 f4       	brcc	.+36     	; 0x13f2 <__umoddi3+0x530>
    13ce:	a2 0c       	add	r10, r2
    13d0:	b3 1c       	adc	r11, r3
    13d2:	c4 1c       	adc	r12, r4
    13d4:	d5 1c       	adc	r13, r5
    13d6:	a2 14       	cp	r10, r2
    13d8:	b3 04       	cpc	r11, r3
    13da:	c4 04       	cpc	r12, r4
    13dc:	d5 04       	cpc	r13, r5
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <__umoddi3+0x530>
    13e0:	a2 16       	cp	r10, r18
    13e2:	b3 06       	cpc	r11, r19
    13e4:	c4 06       	cpc	r12, r20
    13e6:	d5 06       	cpc	r13, r21
    13e8:	20 f4       	brcc	.+8      	; 0x13f2 <__umoddi3+0x530>
    13ea:	a2 0c       	add	r10, r2
    13ec:	b3 1c       	adc	r11, r3
    13ee:	c4 1c       	adc	r12, r4
    13f0:	d5 1c       	adc	r13, r5
    13f2:	6c 96       	adiw	r28, 0x1c	; 28
    13f4:	ec ac       	ldd	r14, Y+60	; 0x3c
    13f6:	fd ac       	ldd	r15, Y+61	; 0x3d
    13f8:	0e ad       	ldd	r16, Y+62	; 0x3e
    13fa:	1f ad       	ldd	r17, Y+63	; 0x3f
    13fc:	6c 97       	sbiw	r28, 0x1c	; 28
    13fe:	68 96       	adiw	r28, 0x18	; 24
    1400:	0f ac       	ldd	r0, Y+63	; 0x3f
    1402:	68 97       	sbiw	r28, 0x18	; 24
    1404:	04 c0       	rjmp	.+8      	; 0x140e <__umoddi3+0x54c>
    1406:	ee 0c       	add	r14, r14
    1408:	ff 1c       	adc	r15, r15
    140a:	00 1f       	adc	r16, r16
    140c:	11 1f       	adc	r17, r17
    140e:	0a 94       	dec	r0
    1410:	d2 f7       	brpl	.-12     	; 0x1406 <__umoddi3+0x544>
    1412:	e9 aa       	std	Y+49, r14	; 0x31
    1414:	fa aa       	std	Y+50, r15	; 0x32
    1416:	0b ab       	std	Y+51, r16	; 0x33
    1418:	1c ab       	std	Y+52, r17	; 0x34
    141a:	a2 1a       	sub	r10, r18
    141c:	b3 0a       	sbc	r11, r19
    141e:	c4 0a       	sbc	r12, r20
    1420:	d5 0a       	sbc	r13, r21
    1422:	32 01       	movw	r6, r4
    1424:	88 24       	eor	r8, r8
    1426:	99 24       	eor	r9, r9
    1428:	b2 01       	movw	r22, r4
    142a:	a1 01       	movw	r20, r2
    142c:	60 70       	andi	r22, 0x00	; 0
    142e:	70 70       	andi	r23, 0x00	; 0
    1430:	29 96       	adiw	r28, 0x09	; 9
    1432:	4c af       	std	Y+60, r20	; 0x3c
    1434:	5d af       	std	Y+61, r21	; 0x3d
    1436:	6e af       	std	Y+62, r22	; 0x3e
    1438:	7f af       	std	Y+63, r23	; 0x3f
    143a:	29 97       	sbiw	r28, 0x09	; 9
    143c:	c6 01       	movw	r24, r12
    143e:	b5 01       	movw	r22, r10
    1440:	a4 01       	movw	r20, r8
    1442:	93 01       	movw	r18, r6
    1444:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    1448:	7b 01       	movw	r14, r22
    144a:	8c 01       	movw	r16, r24
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    1458:	ca 01       	movw	r24, r20
    145a:	b9 01       	movw	r22, r18
    145c:	29 96       	adiw	r28, 0x09	; 9
    145e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1460:	3d ad       	ldd	r19, Y+61	; 0x3d
    1462:	4e ad       	ldd	r20, Y+62	; 0x3e
    1464:	5f ad       	ldd	r21, Y+63	; 0x3f
    1466:	29 97       	sbiw	r28, 0x09	; 9
    1468:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	87 01       	movw	r16, r14
    1472:	ff 24       	eor	r15, r15
    1474:	ee 24       	eor	r14, r14
    1476:	a9 a8       	ldd	r10, Y+49	; 0x31
    1478:	ba a8       	ldd	r11, Y+50	; 0x32
    147a:	cb a8       	ldd	r12, Y+51	; 0x33
    147c:	dc a8       	ldd	r13, Y+52	; 0x34
    147e:	c6 01       	movw	r24, r12
    1480:	aa 27       	eor	r26, r26
    1482:	bb 27       	eor	r27, r27
    1484:	57 01       	movw	r10, r14
    1486:	68 01       	movw	r12, r16
    1488:	a8 2a       	or	r10, r24
    148a:	b9 2a       	or	r11, r25
    148c:	ca 2a       	or	r12, r26
    148e:	db 2a       	or	r13, r27
    1490:	a2 16       	cp	r10, r18
    1492:	b3 06       	cpc	r11, r19
    1494:	c4 06       	cpc	r12, r20
    1496:	d5 06       	cpc	r13, r21
    1498:	90 f4       	brcc	.+36     	; 0x14be <__umoddi3+0x5fc>
    149a:	a2 0c       	add	r10, r2
    149c:	b3 1c       	adc	r11, r3
    149e:	c4 1c       	adc	r12, r4
    14a0:	d5 1c       	adc	r13, r5
    14a2:	a2 14       	cp	r10, r2
    14a4:	b3 04       	cpc	r11, r3
    14a6:	c4 04       	cpc	r12, r4
    14a8:	d5 04       	cpc	r13, r5
    14aa:	48 f0       	brcs	.+18     	; 0x14be <__umoddi3+0x5fc>
    14ac:	a2 16       	cp	r10, r18
    14ae:	b3 06       	cpc	r11, r19
    14b0:	c4 06       	cpc	r12, r20
    14b2:	d5 06       	cpc	r13, r21
    14b4:	20 f4       	brcc	.+8      	; 0x14be <__umoddi3+0x5fc>
    14b6:	a2 0c       	add	r10, r2
    14b8:	b3 1c       	adc	r11, r3
    14ba:	c4 1c       	adc	r12, r4
    14bc:	d5 1c       	adc	r13, r5
    14be:	a2 1a       	sub	r10, r18
    14c0:	b3 0a       	sbc	r11, r19
    14c2:	c4 0a       	sbc	r12, r20
    14c4:	d5 0a       	sbc	r13, r21
    14c6:	c6 01       	movw	r24, r12
    14c8:	b5 01       	movw	r22, r10
    14ca:	a4 01       	movw	r20, r8
    14cc:	93 01       	movw	r18, r6
    14ce:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    14d2:	7b 01       	movw	r14, r22
    14d4:	8c 01       	movw	r16, r24
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    14e2:	ca 01       	movw	r24, r20
    14e4:	b9 01       	movw	r22, r18
    14e6:	29 96       	adiw	r28, 0x09	; 9
    14e8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14ea:	3d ad       	ldd	r19, Y+61	; 0x3d
    14ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    14ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    14f0:	29 97       	sbiw	r28, 0x09	; 9
    14f2:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    14f6:	9b 01       	movw	r18, r22
    14f8:	ac 01       	movw	r20, r24
    14fa:	87 01       	movw	r16, r14
    14fc:	ff 24       	eor	r15, r15
    14fe:	ee 24       	eor	r14, r14
    1500:	89 a9       	ldd	r24, Y+49	; 0x31
    1502:	9a a9       	ldd	r25, Y+50	; 0x32
    1504:	ab a9       	ldd	r26, Y+51	; 0x33
    1506:	bc a9       	ldd	r27, Y+52	; 0x34
    1508:	a0 70       	andi	r26, 0x00	; 0
    150a:	b0 70       	andi	r27, 0x00	; 0
    150c:	e8 2a       	or	r14, r24
    150e:	f9 2a       	or	r15, r25
    1510:	0a 2b       	or	r16, r26
    1512:	1b 2b       	or	r17, r27
    1514:	e2 16       	cp	r14, r18
    1516:	f3 06       	cpc	r15, r19
    1518:	04 07       	cpc	r16, r20
    151a:	15 07       	cpc	r17, r21
    151c:	90 f4       	brcc	.+36     	; 0x1542 <__umoddi3+0x680>
    151e:	e2 0c       	add	r14, r2
    1520:	f3 1c       	adc	r15, r3
    1522:	04 1d       	adc	r16, r4
    1524:	15 1d       	adc	r17, r5
    1526:	e2 14       	cp	r14, r2
    1528:	f3 04       	cpc	r15, r3
    152a:	04 05       	cpc	r16, r4
    152c:	15 05       	cpc	r17, r5
    152e:	48 f0       	brcs	.+18     	; 0x1542 <__umoddi3+0x680>
    1530:	e2 16       	cp	r14, r18
    1532:	f3 06       	cpc	r15, r19
    1534:	04 07       	cpc	r16, r20
    1536:	15 07       	cpc	r17, r21
    1538:	20 f4       	brcc	.+8      	; 0x1542 <__umoddi3+0x680>
    153a:	e2 0c       	add	r14, r2
    153c:	f3 1c       	adc	r15, r3
    153e:	04 1d       	adc	r16, r4
    1540:	15 1d       	adc	r17, r5
    1542:	e2 1a       	sub	r14, r18
    1544:	f3 0a       	sbc	r15, r19
    1546:	04 0b       	sbc	r16, r20
    1548:	15 0b       	sbc	r17, r21
    154a:	d8 01       	movw	r26, r16
    154c:	c7 01       	movw	r24, r14
    154e:	09 ac       	ldd	r0, Y+57	; 0x39
    1550:	04 c0       	rjmp	.+8      	; 0x155a <__umoddi3+0x698>
    1552:	b6 95       	lsr	r27
    1554:	a7 95       	ror	r26
    1556:	97 95       	ror	r25
    1558:	87 95       	ror	r24
    155a:	0a 94       	dec	r0
    155c:	d2 f7       	brpl	.-12     	; 0x1552 <__umoddi3+0x690>
    155e:	89 8b       	std	Y+17, r24	; 0x11
    1560:	9a 8b       	std	Y+18, r25	; 0x12
    1562:	ab 8b       	std	Y+19, r26	; 0x13
    1564:	bc 8b       	std	Y+20, r27	; 0x14
    1566:	1d 8a       	std	Y+21, r1	; 0x15
    1568:	1e 8a       	std	Y+22, r1	; 0x16
    156a:	1f 8a       	std	Y+23, r1	; 0x17
    156c:	18 8e       	std	Y+24, r1	; 0x18
    156e:	28 2f       	mov	r18, r24
    1570:	3a 89       	ldd	r19, Y+18	; 0x12
    1572:	4b 89       	ldd	r20, Y+19	; 0x13
    1574:	5c 89       	ldd	r21, Y+20	; 0x14
    1576:	6d 89       	ldd	r22, Y+21	; 0x15
    1578:	0c c3       	rjmp	.+1560   	; 0x1b92 <__umoddi3+0xcd0>
    157a:	6a 14       	cp	r6, r10
    157c:	7b 04       	cpc	r7, r11
    157e:	8c 04       	cpc	r8, r12
    1580:	9d 04       	cpc	r9, r13
    1582:	08 f4       	brcc	.+2      	; 0x1586 <__umoddi3+0x6c4>
    1584:	09 c3       	rjmp	.+1554   	; 0x1b98 <__umoddi3+0xcd6>
    1586:	00 e0       	ldi	r16, 0x00	; 0
    1588:	a0 16       	cp	r10, r16
    158a:	00 e0       	ldi	r16, 0x00	; 0
    158c:	b0 06       	cpc	r11, r16
    158e:	01 e0       	ldi	r16, 0x01	; 1
    1590:	c0 06       	cpc	r12, r16
    1592:	00 e0       	ldi	r16, 0x00	; 0
    1594:	d0 06       	cpc	r13, r16
    1596:	88 f4       	brcc	.+34     	; 0x15ba <__umoddi3+0x6f8>
    1598:	1f ef       	ldi	r17, 0xFF	; 255
    159a:	a1 16       	cp	r10, r17
    159c:	b1 04       	cpc	r11, r1
    159e:	c1 04       	cpc	r12, r1
    15a0:	d1 04       	cpc	r13, r1
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <__umoddi3+0x6f0>
    15a4:	30 f0       	brcs	.+12     	; 0x15b2 <__umoddi3+0x6f0>
    15a6:	28 e0       	ldi	r18, 0x08	; 8
    15a8:	e2 2e       	mov	r14, r18
    15aa:	f1 2c       	mov	r15, r1
    15ac:	01 2d       	mov	r16, r1
    15ae:	11 2d       	mov	r17, r1
    15b0:	18 c0       	rjmp	.+48     	; 0x15e2 <__umoddi3+0x720>
    15b2:	ee 24       	eor	r14, r14
    15b4:	ff 24       	eor	r15, r15
    15b6:	87 01       	movw	r16, r14
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <__umoddi3+0x720>
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	a4 16       	cp	r10, r20
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	b4 06       	cpc	r11, r20
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	c4 06       	cpc	r12, r20
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	d4 06       	cpc	r13, r20
    15ca:	30 f0       	brcs	.+12     	; 0x15d8 <__umoddi3+0x716>
    15cc:	98 e1       	ldi	r25, 0x18	; 24
    15ce:	e9 2e       	mov	r14, r25
    15d0:	f1 2c       	mov	r15, r1
    15d2:	01 2d       	mov	r16, r1
    15d4:	11 2d       	mov	r17, r1
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <__umoddi3+0x720>
    15d8:	80 e1       	ldi	r24, 0x10	; 16
    15da:	e8 2e       	mov	r14, r24
    15dc:	f1 2c       	mov	r15, r1
    15de:	01 2d       	mov	r16, r1
    15e0:	11 2d       	mov	r17, r1
    15e2:	d6 01       	movw	r26, r12
    15e4:	c5 01       	movw	r24, r10
    15e6:	0e 2c       	mov	r0, r14
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <__umoddi3+0x730>
    15ea:	b6 95       	lsr	r27
    15ec:	a7 95       	ror	r26
    15ee:	97 95       	ror	r25
    15f0:	87 95       	ror	r24
    15f2:	0a 94       	dec	r0
    15f4:	d2 f7       	brpl	.-12     	; 0x15ea <__umoddi3+0x728>
    15f6:	8c 58       	subi	r24, 0x8C	; 140
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	dc 01       	movw	r26, r24
    15fc:	2c 91       	ld	r18, X
    15fe:	80 e2       	ldi	r24, 0x20	; 32
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	8e 19       	sub	r24, r14
    1608:	9f 09       	sbc	r25, r15
    160a:	a0 0b       	sbc	r26, r16
    160c:	b1 0b       	sbc	r27, r17
    160e:	82 1b       	sub	r24, r18
    1610:	91 09       	sbc	r25, r1
    1612:	a1 09       	sbc	r26, r1
    1614:	b1 09       	sbc	r27, r1
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	a1 05       	cpc	r26, r1
    161a:	b1 05       	cpc	r27, r1
    161c:	09 f0       	breq	.+2      	; 0x1620 <__umoddi3+0x75e>
    161e:	4f c0       	rjmp	.+158    	; 0x16be <__umoddi3+0x7fc>
    1620:	a6 14       	cp	r10, r6
    1622:	b7 04       	cpc	r11, r7
    1624:	c8 04       	cpc	r12, r8
    1626:	d9 04       	cpc	r13, r9
    1628:	58 f0       	brcs	.+22     	; 0x1640 <__umoddi3+0x77e>
    162a:	6c 96       	adiw	r28, 0x1c	; 28
    162c:	ec ac       	ldd	r14, Y+60	; 0x3c
    162e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1630:	0e ad       	ldd	r16, Y+62	; 0x3e
    1632:	1f ad       	ldd	r17, Y+63	; 0x3f
    1634:	6c 97       	sbiw	r28, 0x1c	; 28
    1636:	e2 14       	cp	r14, r2
    1638:	f3 04       	cpc	r15, r3
    163a:	04 05       	cpc	r16, r4
    163c:	15 05       	cpc	r17, r5
    163e:	68 f1       	brcs	.+90     	; 0x169a <__umoddi3+0x7d8>
    1640:	6c 96       	adiw	r28, 0x1c	; 28
    1642:	ec ac       	ldd	r14, Y+60	; 0x3c
    1644:	fd ac       	ldd	r15, Y+61	; 0x3d
    1646:	0e ad       	ldd	r16, Y+62	; 0x3e
    1648:	1f ad       	ldd	r17, Y+63	; 0x3f
    164a:	6c 97       	sbiw	r28, 0x1c	; 28
    164c:	e2 18       	sub	r14, r2
    164e:	f3 08       	sbc	r15, r3
    1650:	04 09       	sbc	r16, r4
    1652:	15 09       	sbc	r17, r5
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	2a 19       	sub	r18, r10
    165a:	3b 09       	sbc	r19, r11
    165c:	4c 09       	sbc	r20, r12
    165e:	5d 09       	sbc	r21, r13
    1660:	aa 24       	eor	r10, r10
    1662:	bb 24       	eor	r11, r11
    1664:	65 01       	movw	r12, r10
    1666:	6c 96       	adiw	r28, 0x1c	; 28
    1668:	6c ad       	ldd	r22, Y+60	; 0x3c
    166a:	7d ad       	ldd	r23, Y+61	; 0x3d
    166c:	8e ad       	ldd	r24, Y+62	; 0x3e
    166e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1670:	6c 97       	sbiw	r28, 0x1c	; 28
    1672:	6e 15       	cp	r22, r14
    1674:	7f 05       	cpc	r23, r15
    1676:	80 07       	cpc	r24, r16
    1678:	91 07       	cpc	r25, r17
    167a:	28 f4       	brcc	.+10     	; 0x1686 <__umoddi3+0x7c4>
    167c:	b1 e0       	ldi	r27, 0x01	; 1
    167e:	ab 2e       	mov	r10, r27
    1680:	b1 2c       	mov	r11, r1
    1682:	c1 2c       	mov	r12, r1
    1684:	d1 2c       	mov	r13, r1
    1686:	da 01       	movw	r26, r20
    1688:	c9 01       	movw	r24, r18
    168a:	8a 19       	sub	r24, r10
    168c:	9b 09       	sbc	r25, r11
    168e:	ac 09       	sbc	r26, r12
    1690:	bd 09       	sbc	r27, r13
    1692:	8d ab       	std	Y+53, r24	; 0x35
    1694:	9e ab       	std	Y+54, r25	; 0x36
    1696:	af ab       	std	Y+55, r26	; 0x37
    1698:	b8 af       	std	Y+56, r27	; 0x38
    169a:	e9 8a       	std	Y+17, r14	; 0x11
    169c:	fa 8a       	std	Y+18, r15	; 0x12
    169e:	0b 8b       	std	Y+19, r16	; 0x13
    16a0:	1c 8b       	std	Y+20, r17	; 0x14
    16a2:	6d a8       	ldd	r6, Y+53	; 0x35
    16a4:	7e a8       	ldd	r7, Y+54	; 0x36
    16a6:	8f a8       	ldd	r8, Y+55	; 0x37
    16a8:	98 ac       	ldd	r9, Y+56	; 0x38
    16aa:	6d 8a       	std	Y+21, r6	; 0x15
    16ac:	7e 8a       	std	Y+22, r7	; 0x16
    16ae:	8f 8a       	std	Y+23, r8	; 0x17
    16b0:	98 8e       	std	Y+24, r9	; 0x18
    16b2:	2e 2d       	mov	r18, r14
    16b4:	3a 89       	ldd	r19, Y+18	; 0x12
    16b6:	4b 89       	ldd	r20, Y+19	; 0x13
    16b8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ba:	6d a9       	ldd	r22, Y+53	; 0x35
    16bc:	6a c2       	rjmp	.+1236   	; 0x1b92 <__umoddi3+0xcd0>
    16be:	67 96       	adiw	r28, 0x17	; 23
    16c0:	8f af       	std	Y+63, r24	; 0x3f
    16c2:	67 97       	sbiw	r28, 0x17	; 23
    16c4:	a6 01       	movw	r20, r12
    16c6:	95 01       	movw	r18, r10
    16c8:	08 2e       	mov	r0, r24
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <__umoddi3+0x812>
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	44 1f       	adc	r20, r20
    16d2:	55 1f       	adc	r21, r21
    16d4:	0a 94       	dec	r0
    16d6:	d2 f7       	brpl	.-12     	; 0x16cc <__umoddi3+0x80a>
    16d8:	a0 e2       	ldi	r26, 0x20	; 32
    16da:	aa 2e       	mov	r10, r26
    16dc:	a8 1a       	sub	r10, r24
    16de:	66 96       	adiw	r28, 0x16	; 22
    16e0:	af ae       	std	Y+63, r10	; 0x3f
    16e2:	66 97       	sbiw	r28, 0x16	; 22
    16e4:	d2 01       	movw	r26, r4
    16e6:	c1 01       	movw	r24, r2
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__umoddi3+0x830>
    16ea:	b6 95       	lsr	r27
    16ec:	a7 95       	ror	r26
    16ee:	97 95       	ror	r25
    16f0:	87 95       	ror	r24
    16f2:	aa 94       	dec	r10
    16f4:	d2 f7       	brpl	.-12     	; 0x16ea <__umoddi3+0x828>
    16f6:	6c 01       	movw	r12, r24
    16f8:	7d 01       	movw	r14, r26
    16fa:	c2 2a       	or	r12, r18
    16fc:	d3 2a       	or	r13, r19
    16fe:	e4 2a       	or	r14, r20
    1700:	f5 2a       	or	r15, r21
    1702:	c9 a6       	std	Y+41, r12	; 0x29
    1704:	da a6       	std	Y+42, r13	; 0x2a
    1706:	eb a6       	std	Y+43, r14	; 0x2b
    1708:	fc a6       	std	Y+44, r15	; 0x2c
    170a:	82 01       	movw	r16, r4
    170c:	71 01       	movw	r14, r2
    170e:	67 96       	adiw	r28, 0x17	; 23
    1710:	0f ac       	ldd	r0, Y+63	; 0x3f
    1712:	67 97       	sbiw	r28, 0x17	; 23
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__umoddi3+0x85c>
    1716:	ee 0c       	add	r14, r14
    1718:	ff 1c       	adc	r15, r15
    171a:	00 1f       	adc	r16, r16
    171c:	11 1f       	adc	r17, r17
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__umoddi3+0x854>
    1722:	ed a2       	std	Y+37, r14	; 0x25
    1724:	fe a2       	std	Y+38, r15	; 0x26
    1726:	0f a3       	std	Y+39, r16	; 0x27
    1728:	18 a7       	std	Y+40, r17	; 0x28
    172a:	64 01       	movw	r12, r8
    172c:	53 01       	movw	r10, r6
    172e:	66 96       	adiw	r28, 0x16	; 22
    1730:	0f ac       	ldd	r0, Y+63	; 0x3f
    1732:	66 97       	sbiw	r28, 0x16	; 22
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__umoddi3+0x87c>
    1736:	d6 94       	lsr	r13
    1738:	c7 94       	ror	r12
    173a:	b7 94       	ror	r11
    173c:	a7 94       	ror	r10
    173e:	0a 94       	dec	r0
    1740:	d2 f7       	brpl	.-12     	; 0x1736 <__umoddi3+0x874>
    1742:	a4 01       	movw	r20, r8
    1744:	93 01       	movw	r18, r6
    1746:	67 96       	adiw	r28, 0x17	; 23
    1748:	0f ac       	ldd	r0, Y+63	; 0x3f
    174a:	67 97       	sbiw	r28, 0x17	; 23
    174c:	04 c0       	rjmp	.+8      	; 0x1756 <__umoddi3+0x894>
    174e:	22 0f       	add	r18, r18
    1750:	33 1f       	adc	r19, r19
    1752:	44 1f       	adc	r20, r20
    1754:	55 1f       	adc	r21, r21
    1756:	0a 94       	dec	r0
    1758:	d2 f7       	brpl	.-12     	; 0x174e <__umoddi3+0x88c>
    175a:	6c 96       	adiw	r28, 0x1c	; 28
    175c:	8c ad       	ldd	r24, Y+60	; 0x3c
    175e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1760:	ae ad       	ldd	r26, Y+62	; 0x3e
    1762:	bf ad       	ldd	r27, Y+63	; 0x3f
    1764:	6c 97       	sbiw	r28, 0x1c	; 28
    1766:	66 96       	adiw	r28, 0x16	; 22
    1768:	0f ac       	ldd	r0, Y+63	; 0x3f
    176a:	66 97       	sbiw	r28, 0x16	; 22
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <__umoddi3+0x8b4>
    176e:	b6 95       	lsr	r27
    1770:	a7 95       	ror	r26
    1772:	97 95       	ror	r25
    1774:	87 95       	ror	r24
    1776:	0a 94       	dec	r0
    1778:	d2 f7       	brpl	.-12     	; 0x176e <__umoddi3+0x8ac>
    177a:	3c 01       	movw	r6, r24
    177c:	4d 01       	movw	r8, r26
    177e:	62 2a       	or	r6, r18
    1780:	73 2a       	or	r7, r19
    1782:	84 2a       	or	r8, r20
    1784:	95 2a       	or	r9, r21
    1786:	69 a2       	std	Y+33, r6	; 0x21
    1788:	7a a2       	std	Y+34, r7	; 0x22
    178a:	8b a2       	std	Y+35, r8	; 0x23
    178c:	9c a2       	std	Y+36, r9	; 0x24
    178e:	6c 96       	adiw	r28, 0x1c	; 28
    1790:	ec ac       	ldd	r14, Y+60	; 0x3c
    1792:	fd ac       	ldd	r15, Y+61	; 0x3d
    1794:	0e ad       	ldd	r16, Y+62	; 0x3e
    1796:	1f ad       	ldd	r17, Y+63	; 0x3f
    1798:	6c 97       	sbiw	r28, 0x1c	; 28
    179a:	67 96       	adiw	r28, 0x17	; 23
    179c:	0f ac       	ldd	r0, Y+63	; 0x3f
    179e:	67 97       	sbiw	r28, 0x17	; 23
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <__umoddi3+0x8e8>
    17a2:	ee 0c       	add	r14, r14
    17a4:	ff 1c       	adc	r15, r15
    17a6:	00 1f       	adc	r16, r16
    17a8:	11 1f       	adc	r17, r17
    17aa:	0a 94       	dec	r0
    17ac:	d2 f7       	brpl	.-12     	; 0x17a2 <__umoddi3+0x8e0>
    17ae:	ed 8e       	std	Y+29, r14	; 0x1d
    17b0:	fe 8e       	std	Y+30, r15	; 0x1e
    17b2:	0f 8f       	std	Y+31, r16	; 0x1f
    17b4:	18 a3       	std	Y+32, r17	; 0x20
    17b6:	49 a5       	ldd	r20, Y+41	; 0x29
    17b8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ba:	6b a5       	ldd	r22, Y+43	; 0x2b
    17bc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17be:	3b 01       	movw	r6, r22
    17c0:	88 24       	eor	r8, r8
    17c2:	99 24       	eor	r9, r9
    17c4:	60 70       	andi	r22, 0x00	; 0
    17c6:	70 70       	andi	r23, 0x00	; 0
    17c8:	2d 96       	adiw	r28, 0x0d	; 13
    17ca:	4c af       	std	Y+60, r20	; 0x3c
    17cc:	5d af       	std	Y+61, r21	; 0x3d
    17ce:	6e af       	std	Y+62, r22	; 0x3e
    17d0:	7f af       	std	Y+63, r23	; 0x3f
    17d2:	2d 97       	sbiw	r28, 0x0d	; 13
    17d4:	c6 01       	movw	r24, r12
    17d6:	b5 01       	movw	r22, r10
    17d8:	a4 01       	movw	r20, r8
    17da:	93 01       	movw	r18, r6
    17dc:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    17e0:	7b 01       	movw	r14, r22
    17e2:	8c 01       	movw	r16, r24
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    17f0:	c9 01       	movw	r24, r18
    17f2:	da 01       	movw	r26, r20
    17f4:	1c 01       	movw	r2, r24
    17f6:	2d 01       	movw	r4, r26
    17f8:	c2 01       	movw	r24, r4
    17fa:	b1 01       	movw	r22, r2
    17fc:	2d 96       	adiw	r28, 0x0d	; 13
    17fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1800:	3d ad       	ldd	r19, Y+61	; 0x3d
    1802:	4e ad       	ldd	r20, Y+62	; 0x3e
    1804:	5f ad       	ldd	r21, Y+63	; 0x3f
    1806:	2d 97       	sbiw	r28, 0x0d	; 13
    1808:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	87 01       	movw	r16, r14
    1812:	ff 24       	eor	r15, r15
    1814:	ee 24       	eor	r14, r14
    1816:	a9 a0       	ldd	r10, Y+33	; 0x21
    1818:	ba a0       	ldd	r11, Y+34	; 0x22
    181a:	cb a0       	ldd	r12, Y+35	; 0x23
    181c:	dc a0       	ldd	r13, Y+36	; 0x24
    181e:	c6 01       	movw	r24, r12
    1820:	aa 27       	eor	r26, r26
    1822:	bb 27       	eor	r27, r27
    1824:	57 01       	movw	r10, r14
    1826:	68 01       	movw	r12, r16
    1828:	a8 2a       	or	r10, r24
    182a:	b9 2a       	or	r11, r25
    182c:	ca 2a       	or	r12, r26
    182e:	db 2a       	or	r13, r27
    1830:	a2 16       	cp	r10, r18
    1832:	b3 06       	cpc	r11, r19
    1834:	c4 06       	cpc	r12, r20
    1836:	d5 06       	cpc	r13, r21
    1838:	00 f5       	brcc	.+64     	; 0x187a <__umoddi3+0x9b8>
    183a:	08 94       	sec
    183c:	21 08       	sbc	r2, r1
    183e:	31 08       	sbc	r3, r1
    1840:	41 08       	sbc	r4, r1
    1842:	51 08       	sbc	r5, r1
    1844:	e9 a4       	ldd	r14, Y+41	; 0x29
    1846:	fa a4       	ldd	r15, Y+42	; 0x2a
    1848:	0b a5       	ldd	r16, Y+43	; 0x2b
    184a:	1c a5       	ldd	r17, Y+44	; 0x2c
    184c:	ae 0c       	add	r10, r14
    184e:	bf 1c       	adc	r11, r15
    1850:	c0 1e       	adc	r12, r16
    1852:	d1 1e       	adc	r13, r17
    1854:	ae 14       	cp	r10, r14
    1856:	bf 04       	cpc	r11, r15
    1858:	c0 06       	cpc	r12, r16
    185a:	d1 06       	cpc	r13, r17
    185c:	70 f0       	brcs	.+28     	; 0x187a <__umoddi3+0x9b8>
    185e:	a2 16       	cp	r10, r18
    1860:	b3 06       	cpc	r11, r19
    1862:	c4 06       	cpc	r12, r20
    1864:	d5 06       	cpc	r13, r21
    1866:	48 f4       	brcc	.+18     	; 0x187a <__umoddi3+0x9b8>
    1868:	08 94       	sec
    186a:	21 08       	sbc	r2, r1
    186c:	31 08       	sbc	r3, r1
    186e:	41 08       	sbc	r4, r1
    1870:	51 08       	sbc	r5, r1
    1872:	ae 0c       	add	r10, r14
    1874:	bf 1c       	adc	r11, r15
    1876:	c0 1e       	adc	r12, r16
    1878:	d1 1e       	adc	r13, r17
    187a:	a2 1a       	sub	r10, r18
    187c:	b3 0a       	sbc	r11, r19
    187e:	c4 0a       	sbc	r12, r20
    1880:	d5 0a       	sbc	r13, r21
    1882:	c6 01       	movw	r24, r12
    1884:	b5 01       	movw	r22, r10
    1886:	a4 01       	movw	r20, r8
    1888:	93 01       	movw	r18, r6
    188a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    188e:	7b 01       	movw	r14, r22
    1890:	8c 01       	movw	r16, r24
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    189e:	c9 01       	movw	r24, r18
    18a0:	da 01       	movw	r26, r20
    18a2:	3c 01       	movw	r6, r24
    18a4:	4d 01       	movw	r8, r26
    18a6:	c4 01       	movw	r24, r8
    18a8:	b3 01       	movw	r22, r6
    18aa:	2d 96       	adiw	r28, 0x0d	; 13
    18ac:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ae:	3d ad       	ldd	r19, Y+61	; 0x3d
    18b0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18b2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18b4:	2d 97       	sbiw	r28, 0x0d	; 13
    18b6:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    18ba:	9b 01       	movw	r18, r22
    18bc:	ac 01       	movw	r20, r24
    18be:	87 01       	movw	r16, r14
    18c0:	ff 24       	eor	r15, r15
    18c2:	ee 24       	eor	r14, r14
    18c4:	89 a1       	ldd	r24, Y+33	; 0x21
    18c6:	9a a1       	ldd	r25, Y+34	; 0x22
    18c8:	ab a1       	ldd	r26, Y+35	; 0x23
    18ca:	bc a1       	ldd	r27, Y+36	; 0x24
    18cc:	a0 70       	andi	r26, 0x00	; 0
    18ce:	b0 70       	andi	r27, 0x00	; 0
    18d0:	57 01       	movw	r10, r14
    18d2:	68 01       	movw	r12, r16
    18d4:	a8 2a       	or	r10, r24
    18d6:	b9 2a       	or	r11, r25
    18d8:	ca 2a       	or	r12, r26
    18da:	db 2a       	or	r13, r27
    18dc:	a2 16       	cp	r10, r18
    18de:	b3 06       	cpc	r11, r19
    18e0:	c4 06       	cpc	r12, r20
    18e2:	d5 06       	cpc	r13, r21
    18e4:	00 f5       	brcc	.+64     	; 0x1926 <__umoddi3+0xa64>
    18e6:	08 94       	sec
    18e8:	61 08       	sbc	r6, r1
    18ea:	71 08       	sbc	r7, r1
    18ec:	81 08       	sbc	r8, r1
    18ee:	91 08       	sbc	r9, r1
    18f0:	69 a5       	ldd	r22, Y+41	; 0x29
    18f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    18f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f8:	a6 0e       	add	r10, r22
    18fa:	b7 1e       	adc	r11, r23
    18fc:	c8 1e       	adc	r12, r24
    18fe:	d9 1e       	adc	r13, r25
    1900:	a6 16       	cp	r10, r22
    1902:	b7 06       	cpc	r11, r23
    1904:	c8 06       	cpc	r12, r24
    1906:	d9 06       	cpc	r13, r25
    1908:	70 f0       	brcs	.+28     	; 0x1926 <__umoddi3+0xa64>
    190a:	a2 16       	cp	r10, r18
    190c:	b3 06       	cpc	r11, r19
    190e:	c4 06       	cpc	r12, r20
    1910:	d5 06       	cpc	r13, r21
    1912:	48 f4       	brcc	.+18     	; 0x1926 <__umoddi3+0xa64>
    1914:	08 94       	sec
    1916:	61 08       	sbc	r6, r1
    1918:	71 08       	sbc	r7, r1
    191a:	81 08       	sbc	r8, r1
    191c:	91 08       	sbc	r9, r1
    191e:	a6 0e       	add	r10, r22
    1920:	b7 1e       	adc	r11, r23
    1922:	c8 1e       	adc	r12, r24
    1924:	d9 1e       	adc	r13, r25
    1926:	d6 01       	movw	r26, r12
    1928:	c5 01       	movw	r24, r10
    192a:	82 1b       	sub	r24, r18
    192c:	93 0b       	sbc	r25, r19
    192e:	a4 0b       	sbc	r26, r20
    1930:	b5 0b       	sbc	r27, r21
    1932:	89 8f       	std	Y+25, r24	; 0x19
    1934:	9a 8f       	std	Y+26, r25	; 0x1a
    1936:	ab 8f       	std	Y+27, r26	; 0x1b
    1938:	bc 8f       	std	Y+28, r27	; 0x1c
    193a:	d1 01       	movw	r26, r2
    193c:	99 27       	eor	r25, r25
    193e:	88 27       	eor	r24, r24
    1940:	84 01       	movw	r16, r8
    1942:	73 01       	movw	r14, r6
    1944:	e8 2a       	or	r14, r24
    1946:	f9 2a       	or	r15, r25
    1948:	0a 2b       	or	r16, r26
    194a:	1b 2b       	or	r17, r27
    194c:	4f ef       	ldi	r20, 0xFF	; 255
    194e:	a4 2e       	mov	r10, r20
    1950:	4f ef       	ldi	r20, 0xFF	; 255
    1952:	b4 2e       	mov	r11, r20
    1954:	c1 2c       	mov	r12, r1
    1956:	d1 2c       	mov	r13, r1
    1958:	ae 20       	and	r10, r14
    195a:	bf 20       	and	r11, r15
    195c:	c0 22       	and	r12, r16
    195e:	d1 22       	and	r13, r17
    1960:	78 01       	movw	r14, r16
    1962:	00 27       	eor	r16, r16
    1964:	11 27       	eor	r17, r17
    1966:	6d a0       	ldd	r6, Y+37	; 0x25
    1968:	7e a0       	ldd	r7, Y+38	; 0x26
    196a:	8f a0       	ldd	r8, Y+39	; 0x27
    196c:	98 a4       	ldd	r9, Y+40	; 0x28
    196e:	4f ef       	ldi	r20, 0xFF	; 255
    1970:	5f ef       	ldi	r21, 0xFF	; 255
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	64 22       	and	r6, r20
    1978:	75 22       	and	r7, r21
    197a:	86 22       	and	r8, r22
    197c:	97 22       	and	r9, r23
    197e:	8d a1       	ldd	r24, Y+37	; 0x25
    1980:	9e a1       	ldd	r25, Y+38	; 0x26
    1982:	af a1       	ldd	r26, Y+39	; 0x27
    1984:	b8 a5       	ldd	r27, Y+40	; 0x28
    1986:	bd 01       	movw	r22, r26
    1988:	88 27       	eor	r24, r24
    198a:	99 27       	eor	r25, r25
    198c:	65 96       	adiw	r28, 0x15	; 21
    198e:	6c af       	std	Y+60, r22	; 0x3c
    1990:	7d af       	std	Y+61, r23	; 0x3d
    1992:	8e af       	std	Y+62, r24	; 0x3e
    1994:	9f af       	std	Y+63, r25	; 0x3f
    1996:	65 97       	sbiw	r28, 0x15	; 21
    1998:	c6 01       	movw	r24, r12
    199a:	b5 01       	movw	r22, r10
    199c:	a4 01       	movw	r20, r8
    199e:	93 01       	movw	r18, r6
    19a0:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    19a4:	61 96       	adiw	r28, 0x11	; 17
    19a6:	6c af       	std	Y+60, r22	; 0x3c
    19a8:	7d af       	std	Y+61, r23	; 0x3d
    19aa:	8e af       	std	Y+62, r24	; 0x3e
    19ac:	9f af       	std	Y+63, r25	; 0x3f
    19ae:	61 97       	sbiw	r28, 0x11	; 17
    19b0:	c6 01       	movw	r24, r12
    19b2:	b5 01       	movw	r22, r10
    19b4:	65 96       	adiw	r28, 0x15	; 21
    19b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    19bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19be:	65 97       	sbiw	r28, 0x15	; 21
    19c0:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    19c4:	1b 01       	movw	r2, r22
    19c6:	2c 01       	movw	r4, r24
    19c8:	c8 01       	movw	r24, r16
    19ca:	b7 01       	movw	r22, r14
    19cc:	a4 01       	movw	r20, r8
    19ce:	93 01       	movw	r18, r6
    19d0:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    19d4:	5b 01       	movw	r10, r22
    19d6:	6c 01       	movw	r12, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	65 96       	adiw	r28, 0x15	; 21
    19de:	2c ad       	ldd	r18, Y+60	; 0x3c
    19e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19e6:	65 97       	sbiw	r28, 0x15	; 21
    19e8:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__mulsi3>
    19ec:	7b 01       	movw	r14, r22
    19ee:	8c 01       	movw	r16, r24
    19f0:	a6 01       	movw	r20, r12
    19f2:	95 01       	movw	r18, r10
    19f4:	22 0d       	add	r18, r2
    19f6:	33 1d       	adc	r19, r3
    19f8:	44 1d       	adc	r20, r4
    19fa:	55 1d       	adc	r21, r5
    19fc:	61 96       	adiw	r28, 0x11	; 17
    19fe:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a00:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a02:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a04:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a06:	61 97       	sbiw	r28, 0x11	; 17
    1a08:	c4 01       	movw	r24, r8
    1a0a:	aa 27       	eor	r26, r26
    1a0c:	bb 27       	eor	r27, r27
    1a0e:	28 0f       	add	r18, r24
    1a10:	39 1f       	adc	r19, r25
    1a12:	4a 1f       	adc	r20, r26
    1a14:	5b 1f       	adc	r21, r27
    1a16:	2a 15       	cp	r18, r10
    1a18:	3b 05       	cpc	r19, r11
    1a1a:	4c 05       	cpc	r20, r12
    1a1c:	5d 05       	cpc	r21, r13
    1a1e:	48 f4       	brcc	.+18     	; 0x1a32 <__umoddi3+0xb70>
    1a20:	81 2c       	mov	r8, r1
    1a22:	91 2c       	mov	r9, r1
    1a24:	e1 e0       	ldi	r30, 0x01	; 1
    1a26:	ae 2e       	mov	r10, r30
    1a28:	b1 2c       	mov	r11, r1
    1a2a:	e8 0c       	add	r14, r8
    1a2c:	f9 1c       	adc	r15, r9
    1a2e:	0a 1d       	adc	r16, r10
    1a30:	1b 1d       	adc	r17, r11
    1a32:	ca 01       	movw	r24, r20
    1a34:	aa 27       	eor	r26, r26
    1a36:	bb 27       	eor	r27, r27
    1a38:	57 01       	movw	r10, r14
    1a3a:	68 01       	movw	r12, r16
    1a3c:	a8 0e       	add	r10, r24
    1a3e:	b9 1e       	adc	r11, r25
    1a40:	ca 1e       	adc	r12, r26
    1a42:	db 1e       	adc	r13, r27
    1a44:	a9 01       	movw	r20, r18
    1a46:	33 27       	eor	r19, r19
    1a48:	22 27       	eor	r18, r18
    1a4a:	61 96       	adiw	r28, 0x11	; 17
    1a4c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a4e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a50:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a52:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a54:	61 97       	sbiw	r28, 0x11	; 17
    1a56:	a0 70       	andi	r26, 0x00	; 0
    1a58:	b0 70       	andi	r27, 0x00	; 0
    1a5a:	28 0f       	add	r18, r24
    1a5c:	39 1f       	adc	r19, r25
    1a5e:	4a 1f       	adc	r20, r26
    1a60:	5b 1f       	adc	r21, r27
    1a62:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a64:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a66:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a68:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a6a:	ea 14       	cp	r14, r10
    1a6c:	fb 04       	cpc	r15, r11
    1a6e:	0c 05       	cpc	r16, r12
    1a70:	1d 05       	cpc	r17, r13
    1a72:	70 f0       	brcs	.+28     	; 0x1a90 <__umoddi3+0xbce>
    1a74:	ae 14       	cp	r10, r14
    1a76:	bf 04       	cpc	r11, r15
    1a78:	c0 06       	cpc	r12, r16
    1a7a:	d1 06       	cpc	r13, r17
    1a7c:	69 f5       	brne	.+90     	; 0x1ad8 <__umoddi3+0xc16>
    1a7e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a80:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a84:	98 a1       	ldd	r25, Y+32	; 0x20
    1a86:	62 17       	cp	r22, r18
    1a88:	73 07       	cpc	r23, r19
    1a8a:	84 07       	cpc	r24, r20
    1a8c:	95 07       	cpc	r25, r21
    1a8e:	20 f5       	brcc	.+72     	; 0x1ad8 <__umoddi3+0xc16>
    1a90:	da 01       	movw	r26, r20
    1a92:	c9 01       	movw	r24, r18
    1a94:	6d a0       	ldd	r6, Y+37	; 0x25
    1a96:	7e a0       	ldd	r7, Y+38	; 0x26
    1a98:	8f a0       	ldd	r8, Y+39	; 0x27
    1a9a:	98 a4       	ldd	r9, Y+40	; 0x28
    1a9c:	86 19       	sub	r24, r6
    1a9e:	97 09       	sbc	r25, r7
    1aa0:	a8 09       	sbc	r26, r8
    1aa2:	b9 09       	sbc	r27, r9
    1aa4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1aa6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1aa8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aaa:	1c a5       	ldd	r17, Y+44	; 0x2c
    1aac:	ae 18       	sub	r10, r14
    1aae:	bf 08       	sbc	r11, r15
    1ab0:	c0 0a       	sbc	r12, r16
    1ab2:	d1 0a       	sbc	r13, r17
    1ab4:	ee 24       	eor	r14, r14
    1ab6:	ff 24       	eor	r15, r15
    1ab8:	87 01       	movw	r16, r14
    1aba:	28 17       	cp	r18, r24
    1abc:	39 07       	cpc	r19, r25
    1abe:	4a 07       	cpc	r20, r26
    1ac0:	5b 07       	cpc	r21, r27
    1ac2:	28 f4       	brcc	.+10     	; 0x1ace <__umoddi3+0xc0c>
    1ac4:	21 e0       	ldi	r18, 0x01	; 1
    1ac6:	e2 2e       	mov	r14, r18
    1ac8:	f1 2c       	mov	r15, r1
    1aca:	01 2d       	mov	r16, r1
    1acc:	11 2d       	mov	r17, r1
    1ace:	ae 18       	sub	r10, r14
    1ad0:	bf 08       	sbc	r11, r15
    1ad2:	c0 0a       	sbc	r12, r16
    1ad4:	d1 0a       	sbc	r13, r17
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <__umoddi3+0xc1a>
    1ad8:	da 01       	movw	r26, r20
    1ada:	c9 01       	movw	r24, r18
    1adc:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1ade:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1ae0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1ae2:	98 a0       	ldd	r9, Y+32	; 0x20
    1ae4:	68 1a       	sub	r6, r24
    1ae6:	79 0a       	sbc	r7, r25
    1ae8:	8a 0a       	sbc	r8, r26
    1aea:	9b 0a       	sbc	r9, r27
    1aec:	49 8d       	ldd	r20, Y+25	; 0x19
    1aee:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1af0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1af2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1af4:	4a 19       	sub	r20, r10
    1af6:	5b 09       	sbc	r21, r11
    1af8:	6c 09       	sbc	r22, r12
    1afa:	7d 09       	sbc	r23, r13
    1afc:	5a 01       	movw	r10, r20
    1afe:	6b 01       	movw	r12, r22
    1b00:	22 24       	eor	r2, r2
    1b02:	33 24       	eor	r3, r3
    1b04:	21 01       	movw	r4, r2
    1b06:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b08:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0e:	66 15       	cp	r22, r6
    1b10:	77 05       	cpc	r23, r7
    1b12:	88 05       	cpc	r24, r8
    1b14:	99 05       	cpc	r25, r9
    1b16:	28 f4       	brcc	.+10     	; 0x1b22 <__umoddi3+0xc60>
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	28 2e       	mov	r2, r24
    1b1c:	31 2c       	mov	r3, r1
    1b1e:	41 2c       	mov	r4, r1
    1b20:	51 2c       	mov	r5, r1
    1b22:	86 01       	movw	r16, r12
    1b24:	75 01       	movw	r14, r10
    1b26:	e2 18       	sub	r14, r2
    1b28:	f3 08       	sbc	r15, r3
    1b2a:	04 09       	sbc	r16, r4
    1b2c:	15 09       	sbc	r17, r5
    1b2e:	a8 01       	movw	r20, r16
    1b30:	97 01       	movw	r18, r14
    1b32:	66 96       	adiw	r28, 0x16	; 22
    1b34:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b36:	66 97       	sbiw	r28, 0x16	; 22
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <__umoddi3+0xc80>
    1b3a:	22 0f       	add	r18, r18
    1b3c:	33 1f       	adc	r19, r19
    1b3e:	44 1f       	adc	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	0a 94       	dec	r0
    1b44:	d2 f7       	brpl	.-12     	; 0x1b3a <__umoddi3+0xc78>
    1b46:	d4 01       	movw	r26, r8
    1b48:	c3 01       	movw	r24, r6
    1b4a:	67 96       	adiw	r28, 0x17	; 23
    1b4c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b4e:	67 97       	sbiw	r28, 0x17	; 23
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <__umoddi3+0xc98>
    1b52:	b6 95       	lsr	r27
    1b54:	a7 95       	ror	r26
    1b56:	97 95       	ror	r25
    1b58:	87 95       	ror	r24
    1b5a:	0a 94       	dec	r0
    1b5c:	d2 f7       	brpl	.-12     	; 0x1b52 <__umoddi3+0xc90>
    1b5e:	28 2b       	or	r18, r24
    1b60:	39 2b       	or	r19, r25
    1b62:	4a 2b       	or	r20, r26
    1b64:	5b 2b       	or	r21, r27
    1b66:	29 8b       	std	Y+17, r18	; 0x11
    1b68:	3a 8b       	std	Y+18, r19	; 0x12
    1b6a:	4b 8b       	std	Y+19, r20	; 0x13
    1b6c:	5c 8b       	std	Y+20, r21	; 0x14
    1b6e:	67 96       	adiw	r28, 0x17	; 23
    1b70:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b72:	67 97       	sbiw	r28, 0x17	; 23
    1b74:	04 c0       	rjmp	.+8      	; 0x1b7e <__umoddi3+0xcbc>
    1b76:	16 95       	lsr	r17
    1b78:	07 95       	ror	r16
    1b7a:	f7 94       	ror	r15
    1b7c:	e7 94       	ror	r14
    1b7e:	0a 94       	dec	r0
    1b80:	d2 f7       	brpl	.-12     	; 0x1b76 <__umoddi3+0xcb4>
    1b82:	ed 8a       	std	Y+21, r14	; 0x15
    1b84:	fe 8a       	std	Y+22, r15	; 0x16
    1b86:	0f 8b       	std	Y+23, r16	; 0x17
    1b88:	18 8f       	std	Y+24, r17	; 0x18
    1b8a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b8c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b8e:	5c 89       	ldd	r21, Y+20	; 0x14
    1b90:	6e 2d       	mov	r22, r14
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	c5 5a       	subi	r28, 0xA5	; 165
    1b9a:	df 4f       	sbci	r29, 0xFF	; 255
    1b9c:	e2 e1       	ldi	r30, 0x12	; 18
    1b9e:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__>

00001ba2 <_fpadd_parts>:
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    1ba8:	fd e0       	ldi	r31, 0x0D	; 13
    1baa:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	2b 01       	movw	r4, r22
    1bb2:	fa 01       	movw	r30, r20
    1bb4:	9c 91       	ld	r25, X
    1bb6:	92 30       	cpi	r25, 0x02	; 2
    1bb8:	08 f4       	brcc	.+2      	; 0x1bbc <_fpadd_parts+0x1a>
    1bba:	39 c1       	rjmp	.+626    	; 0x1e2e <_fpadd_parts+0x28c>
    1bbc:	eb 01       	movw	r28, r22
    1bbe:	88 81       	ld	r24, Y
    1bc0:	82 30       	cpi	r24, 0x02	; 2
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <_fpadd_parts+0x24>
    1bc4:	33 c1       	rjmp	.+614    	; 0x1e2c <_fpadd_parts+0x28a>
    1bc6:	94 30       	cpi	r25, 0x04	; 4
    1bc8:	69 f4       	brne	.+26     	; 0x1be4 <_fpadd_parts+0x42>
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <_fpadd_parts+0x2e>
    1bce:	2f c1       	rjmp	.+606    	; 0x1e2e <_fpadd_parts+0x28c>
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	9c 91       	ld	r25, X
    1bd4:	11 97       	sbiw	r26, 0x01	; 1
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	98 17       	cp	r25, r24
    1bda:	09 f4       	brne	.+2      	; 0x1bde <_fpadd_parts+0x3c>
    1bdc:	28 c1       	rjmp	.+592    	; 0x1e2e <_fpadd_parts+0x28c>
    1bde:	ac e6       	ldi	r26, 0x6C	; 108
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	25 c1       	rjmp	.+586    	; 0x1e2e <_fpadd_parts+0x28c>
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	09 f4       	brne	.+2      	; 0x1bea <_fpadd_parts+0x48>
    1be8:	21 c1       	rjmp	.+578    	; 0x1e2c <_fpadd_parts+0x28a>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	a9 f4       	brne	.+42     	; 0x1c18 <_fpadd_parts+0x76>
    1bee:	92 30       	cpi	r25, 0x02	; 2
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <_fpadd_parts+0x52>
    1bf2:	1d c1       	rjmp	.+570    	; 0x1e2e <_fpadd_parts+0x28c>
    1bf4:	9a 01       	movw	r18, r20
    1bf6:	ad 01       	movw	r20, r26
    1bf8:	88 e0       	ldi	r24, 0x08	; 8
    1bfa:	ea 01       	movw	r28, r20
    1bfc:	09 90       	ld	r0, Y+
    1bfe:	ae 01       	movw	r20, r28
    1c00:	e9 01       	movw	r28, r18
    1c02:	09 92       	st	Y+, r0
    1c04:	9e 01       	movw	r18, r28
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	c1 f7       	brne	.-16     	; 0x1bfa <_fpadd_parts+0x58>
    1c0a:	e2 01       	movw	r28, r4
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	9c 91       	ld	r25, X
    1c12:	89 23       	and	r24, r25
    1c14:	81 83       	std	Z+1, r24	; 0x01
    1c16:	08 c1       	rjmp	.+528    	; 0x1e28 <_fpadd_parts+0x286>
    1c18:	92 30       	cpi	r25, 0x02	; 2
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_fpadd_parts+0x7c>
    1c1c:	07 c1       	rjmp	.+526    	; 0x1e2c <_fpadd_parts+0x28a>
    1c1e:	12 96       	adiw	r26, 0x02	; 2
    1c20:	2d 90       	ld	r2, X+
    1c22:	3c 90       	ld	r3, X
    1c24:	13 97       	sbiw	r26, 0x03	; 3
    1c26:	eb 01       	movw	r28, r22
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	14 96       	adiw	r26, 0x04	; 4
    1c2e:	ad 90       	ld	r10, X+
    1c30:	bd 90       	ld	r11, X+
    1c32:	cd 90       	ld	r12, X+
    1c34:	dc 90       	ld	r13, X
    1c36:	17 97       	sbiw	r26, 0x07	; 7
    1c38:	ec 80       	ldd	r14, Y+4	; 0x04
    1c3a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c3c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c3e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c40:	91 01       	movw	r18, r2
    1c42:	28 1b       	sub	r18, r24
    1c44:	39 0b       	sbc	r19, r25
    1c46:	b9 01       	movw	r22, r18
    1c48:	37 ff       	sbrs	r19, 7
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <_fpadd_parts+0xb2>
    1c4c:	66 27       	eor	r22, r22
    1c4e:	77 27       	eor	r23, r23
    1c50:	62 1b       	sub	r22, r18
    1c52:	73 0b       	sbc	r23, r19
    1c54:	60 32       	cpi	r22, 0x20	; 32
    1c56:	71 05       	cpc	r23, r1
    1c58:	0c f0       	brlt	.+2      	; 0x1c5c <_fpadd_parts+0xba>
    1c5a:	61 c0       	rjmp	.+194    	; 0x1d1e <_fpadd_parts+0x17c>
    1c5c:	12 16       	cp	r1, r18
    1c5e:	13 06       	cpc	r1, r19
    1c60:	6c f5       	brge	.+90     	; 0x1cbc <_fpadd_parts+0x11a>
    1c62:	37 01       	movw	r6, r14
    1c64:	48 01       	movw	r8, r16
    1c66:	06 2e       	mov	r0, r22
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <_fpadd_parts+0xd0>
    1c6a:	96 94       	lsr	r9
    1c6c:	87 94       	ror	r8
    1c6e:	77 94       	ror	r7
    1c70:	67 94       	ror	r6
    1c72:	0a 94       	dec	r0
    1c74:	d2 f7       	brpl	.-12     	; 0x1c6a <_fpadd_parts+0xc8>
    1c76:	21 e0       	ldi	r18, 0x01	; 1
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <_fpadd_parts+0xe6>
    1c80:	22 0f       	add	r18, r18
    1c82:	33 1f       	adc	r19, r19
    1c84:	44 1f       	adc	r20, r20
    1c86:	55 1f       	adc	r21, r21
    1c88:	6a 95       	dec	r22
    1c8a:	d2 f7       	brpl	.-12     	; 0x1c80 <_fpadd_parts+0xde>
    1c8c:	21 50       	subi	r18, 0x01	; 1
    1c8e:	30 40       	sbci	r19, 0x00	; 0
    1c90:	40 40       	sbci	r20, 0x00	; 0
    1c92:	50 40       	sbci	r21, 0x00	; 0
    1c94:	2e 21       	and	r18, r14
    1c96:	3f 21       	and	r19, r15
    1c98:	40 23       	and	r20, r16
    1c9a:	51 23       	and	r21, r17
    1c9c:	21 15       	cp	r18, r1
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	41 05       	cpc	r20, r1
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	21 f0       	breq	.+8      	; 0x1cae <_fpadd_parts+0x10c>
    1ca6:	21 e0       	ldi	r18, 0x01	; 1
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	79 01       	movw	r14, r18
    1cb0:	8a 01       	movw	r16, r20
    1cb2:	e6 28       	or	r14, r6
    1cb4:	f7 28       	or	r15, r7
    1cb6:	08 29       	or	r16, r8
    1cb8:	19 29       	or	r17, r9
    1cba:	3c c0       	rjmp	.+120    	; 0x1d34 <_fpadd_parts+0x192>
    1cbc:	23 2b       	or	r18, r19
    1cbe:	d1 f1       	breq	.+116    	; 0x1d34 <_fpadd_parts+0x192>
    1cc0:	26 0e       	add	r2, r22
    1cc2:	37 1e       	adc	r3, r23
    1cc4:	35 01       	movw	r6, r10
    1cc6:	46 01       	movw	r8, r12
    1cc8:	06 2e       	mov	r0, r22
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <_fpadd_parts+0x132>
    1ccc:	96 94       	lsr	r9
    1cce:	87 94       	ror	r8
    1cd0:	77 94       	ror	r7
    1cd2:	67 94       	ror	r6
    1cd4:	0a 94       	dec	r0
    1cd6:	d2 f7       	brpl	.-12     	; 0x1ccc <_fpadd_parts+0x12a>
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <_fpadd_parts+0x148>
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	44 1f       	adc	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	6a 95       	dec	r22
    1cec:	d2 f7       	brpl	.-12     	; 0x1ce2 <_fpadd_parts+0x140>
    1cee:	21 50       	subi	r18, 0x01	; 1
    1cf0:	30 40       	sbci	r19, 0x00	; 0
    1cf2:	40 40       	sbci	r20, 0x00	; 0
    1cf4:	50 40       	sbci	r21, 0x00	; 0
    1cf6:	2a 21       	and	r18, r10
    1cf8:	3b 21       	and	r19, r11
    1cfa:	4c 21       	and	r20, r12
    1cfc:	5d 21       	and	r21, r13
    1cfe:	21 15       	cp	r18, r1
    1d00:	31 05       	cpc	r19, r1
    1d02:	41 05       	cpc	r20, r1
    1d04:	51 05       	cpc	r21, r1
    1d06:	21 f0       	breq	.+8      	; 0x1d10 <_fpadd_parts+0x16e>
    1d08:	21 e0       	ldi	r18, 0x01	; 1
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	59 01       	movw	r10, r18
    1d12:	6a 01       	movw	r12, r20
    1d14:	a6 28       	or	r10, r6
    1d16:	b7 28       	or	r11, r7
    1d18:	c8 28       	or	r12, r8
    1d1a:	d9 28       	or	r13, r9
    1d1c:	0b c0       	rjmp	.+22     	; 0x1d34 <_fpadd_parts+0x192>
    1d1e:	82 15       	cp	r24, r2
    1d20:	93 05       	cpc	r25, r3
    1d22:	2c f0       	brlt	.+10     	; 0x1d2e <_fpadd_parts+0x18c>
    1d24:	1c 01       	movw	r2, r24
    1d26:	aa 24       	eor	r10, r10
    1d28:	bb 24       	eor	r11, r11
    1d2a:	65 01       	movw	r12, r10
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <_fpadd_parts+0x192>
    1d2e:	ee 24       	eor	r14, r14
    1d30:	ff 24       	eor	r15, r15
    1d32:	87 01       	movw	r16, r14
    1d34:	11 96       	adiw	r26, 0x01	; 1
    1d36:	9c 91       	ld	r25, X
    1d38:	d2 01       	movw	r26, r4
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	8c 91       	ld	r24, X
    1d3e:	98 17       	cp	r25, r24
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <_fpadd_parts+0x1a2>
    1d42:	45 c0       	rjmp	.+138    	; 0x1dce <_fpadd_parts+0x22c>
    1d44:	99 23       	and	r25, r25
    1d46:	39 f0       	breq	.+14     	; 0x1d56 <_fpadd_parts+0x1b4>
    1d48:	a8 01       	movw	r20, r16
    1d4a:	97 01       	movw	r18, r14
    1d4c:	2a 19       	sub	r18, r10
    1d4e:	3b 09       	sbc	r19, r11
    1d50:	4c 09       	sbc	r20, r12
    1d52:	5d 09       	sbc	r21, r13
    1d54:	06 c0       	rjmp	.+12     	; 0x1d62 <_fpadd_parts+0x1c0>
    1d56:	a6 01       	movw	r20, r12
    1d58:	95 01       	movw	r18, r10
    1d5a:	2e 19       	sub	r18, r14
    1d5c:	3f 09       	sbc	r19, r15
    1d5e:	40 0b       	sbc	r20, r16
    1d60:	51 0b       	sbc	r21, r17
    1d62:	57 fd       	sbrc	r21, 7
    1d64:	08 c0       	rjmp	.+16     	; 0x1d76 <_fpadd_parts+0x1d4>
    1d66:	11 82       	std	Z+1, r1	; 0x01
    1d68:	33 82       	std	Z+3, r3	; 0x03
    1d6a:	22 82       	std	Z+2, r2	; 0x02
    1d6c:	24 83       	std	Z+4, r18	; 0x04
    1d6e:	35 83       	std	Z+5, r19	; 0x05
    1d70:	46 83       	std	Z+6, r20	; 0x06
    1d72:	57 83       	std	Z+7, r21	; 0x07
    1d74:	1d c0       	rjmp	.+58     	; 0x1db0 <_fpadd_parts+0x20e>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	81 83       	std	Z+1, r24	; 0x01
    1d7a:	33 82       	std	Z+3, r3	; 0x03
    1d7c:	22 82       	std	Z+2, r2	; 0x02
    1d7e:	88 27       	eor	r24, r24
    1d80:	99 27       	eor	r25, r25
    1d82:	dc 01       	movw	r26, r24
    1d84:	82 1b       	sub	r24, r18
    1d86:	93 0b       	sbc	r25, r19
    1d88:	a4 0b       	sbc	r26, r20
    1d8a:	b5 0b       	sbc	r27, r21
    1d8c:	84 83       	std	Z+4, r24	; 0x04
    1d8e:	95 83       	std	Z+5, r25	; 0x05
    1d90:	a6 83       	std	Z+6, r26	; 0x06
    1d92:	b7 83       	std	Z+7, r27	; 0x07
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <_fpadd_parts+0x20e>
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	44 1f       	adc	r20, r20
    1d9c:	55 1f       	adc	r21, r21
    1d9e:	24 83       	std	Z+4, r18	; 0x04
    1da0:	35 83       	std	Z+5, r19	; 0x05
    1da2:	46 83       	std	Z+6, r20	; 0x06
    1da4:	57 83       	std	Z+7, r21	; 0x07
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	93 83       	std	Z+3, r25	; 0x03
    1dae:	82 83       	std	Z+2, r24	; 0x02
    1db0:	24 81       	ldd	r18, Z+4	; 0x04
    1db2:	35 81       	ldd	r19, Z+5	; 0x05
    1db4:	46 81       	ldd	r20, Z+6	; 0x06
    1db6:	57 81       	ldd	r21, Z+7	; 0x07
    1db8:	da 01       	movw	r26, r20
    1dba:	c9 01       	movw	r24, r18
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	a1 09       	sbc	r26, r1
    1dc0:	b1 09       	sbc	r27, r1
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc6:	af 4f       	sbci	r26, 0xFF	; 255
    1dc8:	bf 43       	sbci	r27, 0x3F	; 63
    1dca:	28 f3       	brcs	.-54     	; 0x1d96 <_fpadd_parts+0x1f4>
    1dcc:	0b c0       	rjmp	.+22     	; 0x1de4 <_fpadd_parts+0x242>
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	33 82       	std	Z+3, r3	; 0x03
    1dd2:	22 82       	std	Z+2, r2	; 0x02
    1dd4:	ea 0c       	add	r14, r10
    1dd6:	fb 1c       	adc	r15, r11
    1dd8:	0c 1d       	adc	r16, r12
    1dda:	1d 1d       	adc	r17, r13
    1ddc:	e4 82       	std	Z+4, r14	; 0x04
    1dde:	f5 82       	std	Z+5, r15	; 0x05
    1de0:	06 83       	std	Z+6, r16	; 0x06
    1de2:	17 83       	std	Z+7, r17	; 0x07
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	80 83       	st	Z, r24
    1de8:	24 81       	ldd	r18, Z+4	; 0x04
    1dea:	35 81       	ldd	r19, Z+5	; 0x05
    1dec:	46 81       	ldd	r20, Z+6	; 0x06
    1dee:	57 81       	ldd	r21, Z+7	; 0x07
    1df0:	57 ff       	sbrs	r21, 7
    1df2:	1a c0       	rjmp	.+52     	; 0x1e28 <_fpadd_parts+0x286>
    1df4:	c9 01       	movw	r24, r18
    1df6:	aa 27       	eor	r26, r26
    1df8:	97 fd       	sbrc	r25, 7
    1dfa:	a0 95       	com	r26
    1dfc:	ba 2f       	mov	r27, r26
    1dfe:	81 70       	andi	r24, 0x01	; 1
    1e00:	90 70       	andi	r25, 0x00	; 0
    1e02:	a0 70       	andi	r26, 0x00	; 0
    1e04:	b0 70       	andi	r27, 0x00	; 0
    1e06:	56 95       	lsr	r21
    1e08:	47 95       	ror	r20
    1e0a:	37 95       	ror	r19
    1e0c:	27 95       	ror	r18
    1e0e:	82 2b       	or	r24, r18
    1e10:	93 2b       	or	r25, r19
    1e12:	a4 2b       	or	r26, r20
    1e14:	b5 2b       	or	r27, r21
    1e16:	84 83       	std	Z+4, r24	; 0x04
    1e18:	95 83       	std	Z+5, r25	; 0x05
    1e1a:	a6 83       	std	Z+6, r26	; 0x06
    1e1c:	b7 83       	std	Z+7, r27	; 0x07
    1e1e:	82 81       	ldd	r24, Z+2	; 0x02
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	01 96       	adiw	r24, 0x01	; 1
    1e24:	93 83       	std	Z+3, r25	; 0x03
    1e26:	82 83       	std	Z+2, r24	; 0x02
    1e28:	df 01       	movw	r26, r30
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <_fpadd_parts+0x28c>
    1e2c:	d2 01       	movw	r26, r4
    1e2e:	cd 01       	movw	r24, r26
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	e2 e1       	ldi	r30, 0x12	; 18
    1e36:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__>

00001e3a <__subsf3>:
    1e3a:	a0 e2       	ldi	r26, 0x20	; 32
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e3 e2       	ldi	r30, 0x23	; 35
    1e40:	ff e0       	ldi	r31, 0x0F	; 15
    1e42:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    1e46:	69 83       	std	Y+1, r22	; 0x01
    1e48:	7a 83       	std	Y+2, r23	; 0x02
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	2d 83       	std	Y+5, r18	; 0x05
    1e50:	3e 83       	std	Y+6, r19	; 0x06
    1e52:	4f 83       	std	Y+7, r20	; 0x07
    1e54:	58 87       	std	Y+8, r21	; 0x08
    1e56:	e9 e0       	ldi	r30, 0x09	; 9
    1e58:	ee 2e       	mov	r14, r30
    1e5a:	f1 2c       	mov	r15, r1
    1e5c:	ec 0e       	add	r14, r28
    1e5e:	fd 1e       	adc	r15, r29
    1e60:	ce 01       	movw	r24, r28
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	b7 01       	movw	r22, r14
    1e66:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	0f 5e       	subi	r16, 0xEF	; 239
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	ce 01       	movw	r24, r28
    1e72:	05 96       	adiw	r24, 0x05	; 5
    1e74:	b8 01       	movw	r22, r16
    1e76:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    1e7a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e7c:	91 e0       	ldi	r25, 0x01	; 1
    1e7e:	89 27       	eor	r24, r25
    1e80:	8a 8b       	std	Y+18, r24	; 0x12
    1e82:	c7 01       	movw	r24, r14
    1e84:	b8 01       	movw	r22, r16
    1e86:	ae 01       	movw	r20, r28
    1e88:	47 5e       	subi	r20, 0xE7	; 231
    1e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e8c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_fpadd_parts>
    1e90:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__pack_f>
    1e94:	a0 96       	adiw	r28, 0x20	; 32
    1e96:	e6 e0       	ldi	r30, 0x06	; 6
    1e98:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00001e9c <__addsf3>:
    1e9c:	a0 e2       	ldi	r26, 0x20	; 32
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e4 e5       	ldi	r30, 0x54	; 84
    1ea2:	ff e0       	ldi	r31, 0x0F	; 15
    1ea4:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    1ea8:	69 83       	std	Y+1, r22	; 0x01
    1eaa:	7a 83       	std	Y+2, r23	; 0x02
    1eac:	8b 83       	std	Y+3, r24	; 0x03
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	2d 83       	std	Y+5, r18	; 0x05
    1eb2:	3e 83       	std	Y+6, r19	; 0x06
    1eb4:	4f 83       	std	Y+7, r20	; 0x07
    1eb6:	58 87       	std	Y+8, r21	; 0x08
    1eb8:	f9 e0       	ldi	r31, 0x09	; 9
    1eba:	ef 2e       	mov	r14, r31
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	ec 0e       	add	r14, r28
    1ec0:	fd 1e       	adc	r15, r29
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    1ecc:	8e 01       	movw	r16, r28
    1ece:	0f 5e       	subi	r16, 0xEF	; 239
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	05 96       	adiw	r24, 0x05	; 5
    1ed6:	b8 01       	movw	r22, r16
    1ed8:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    1edc:	c7 01       	movw	r24, r14
    1ede:	b8 01       	movw	r22, r16
    1ee0:	ae 01       	movw	r20, r28
    1ee2:	47 5e       	subi	r20, 0xE7	; 231
    1ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <_fpadd_parts>
    1eea:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__pack_f>
    1eee:	a0 96       	adiw	r28, 0x20	; 32
    1ef0:	e6 e0       	ldi	r30, 0x06	; 6
    1ef2:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00001ef6 <__mulsf3>:
    1ef6:	a0 e2       	ldi	r26, 0x20	; 32
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e1 e8       	ldi	r30, 0x81	; 129
    1efc:	ff e0       	ldi	r31, 0x0F	; 15
    1efe:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__>
    1f02:	69 83       	std	Y+1, r22	; 0x01
    1f04:	7a 83       	std	Y+2, r23	; 0x02
    1f06:	8b 83       	std	Y+3, r24	; 0x03
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	2d 83       	std	Y+5, r18	; 0x05
    1f0c:	3e 83       	std	Y+6, r19	; 0x06
    1f0e:	4f 83       	std	Y+7, r20	; 0x07
    1f10:	58 87       	std	Y+8, r21	; 0x08
    1f12:	ce 01       	movw	r24, r28
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	be 01       	movw	r22, r28
    1f18:	67 5f       	subi	r22, 0xF7	; 247
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    1f20:	ce 01       	movw	r24, r28
    1f22:	05 96       	adiw	r24, 0x05	; 5
    1f24:	be 01       	movw	r22, r28
    1f26:	6f 5e       	subi	r22, 0xEF	; 239
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    1f2e:	99 85       	ldd	r25, Y+9	; 0x09
    1f30:	92 30       	cpi	r25, 0x02	; 2
    1f32:	88 f0       	brcs	.+34     	; 0x1f56 <__mulsf3+0x60>
    1f34:	89 89       	ldd	r24, Y+17	; 0x11
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	c8 f0       	brcs	.+50     	; 0x1f6c <__mulsf3+0x76>
    1f3a:	94 30       	cpi	r25, 0x04	; 4
    1f3c:	19 f4       	brne	.+6      	; 0x1f44 <__mulsf3+0x4e>
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	51 f4       	brne	.+20     	; 0x1f56 <__mulsf3+0x60>
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <__mulsf3+0x56>
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	29 f4       	brne	.+10     	; 0x1f52 <__mulsf3+0x5c>
    1f48:	92 30       	cpi	r25, 0x02	; 2
    1f4a:	81 f4       	brne	.+32     	; 0x1f6c <__mulsf3+0x76>
    1f4c:	8c e6       	ldi	r24, 0x6C	; 108
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	c6 c0       	rjmp	.+396    	; 0x20de <__mulsf3+0x1e8>
    1f52:	92 30       	cpi	r25, 0x02	; 2
    1f54:	49 f4       	brne	.+18     	; 0x1f68 <__mulsf3+0x72>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f5c:	98 13       	cpse	r25, r24
    1f5e:	21 e0       	ldi	r18, 0x01	; 1
    1f60:	2a 87       	std	Y+10, r18	; 0x0a
    1f62:	ce 01       	movw	r24, r28
    1f64:	09 96       	adiw	r24, 0x09	; 9
    1f66:	bb c0       	rjmp	.+374    	; 0x20de <__mulsf3+0x1e8>
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	49 f4       	brne	.+18     	; 0x1f7e <__mulsf3+0x88>
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	8a 89       	ldd	r24, Y+18	; 0x12
    1f72:	98 13       	cpse	r25, r24
    1f74:	21 e0       	ldi	r18, 0x01	; 1
    1f76:	2a 8b       	std	Y+18, r18	; 0x12
    1f78:	ce 01       	movw	r24, r28
    1f7a:	41 96       	adiw	r24, 0x11	; 17
    1f7c:	b0 c0       	rjmp	.+352    	; 0x20de <__mulsf3+0x1e8>
    1f7e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f80:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f82:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f84:	58 88       	ldd	r5, Y+16	; 0x10
    1f86:	6d 88       	ldd	r6, Y+21	; 0x15
    1f88:	7e 88       	ldd	r7, Y+22	; 0x16
    1f8a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f8c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f8e:	ee 24       	eor	r14, r14
    1f90:	ff 24       	eor	r15, r15
    1f92:	87 01       	movw	r16, r14
    1f94:	aa 24       	eor	r10, r10
    1f96:	bb 24       	eor	r11, r11
    1f98:	65 01       	movw	r12, r10
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	e0 e0       	ldi	r30, 0x00	; 0
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	c1 01       	movw	r24, r2
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	89 2b       	or	r24, r25
    1fae:	e9 f0       	breq	.+58     	; 0x1fea <__mulsf3+0xf4>
    1fb0:	e6 0c       	add	r14, r6
    1fb2:	f7 1c       	adc	r15, r7
    1fb4:	08 1d       	adc	r16, r8
    1fb6:	19 1d       	adc	r17, r9
    1fb8:	9a 01       	movw	r18, r20
    1fba:	ab 01       	movw	r20, r22
    1fbc:	2a 0d       	add	r18, r10
    1fbe:	3b 1d       	adc	r19, r11
    1fc0:	4c 1d       	adc	r20, r12
    1fc2:	5d 1d       	adc	r21, r13
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	a0 e0       	ldi	r26, 0x00	; 0
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e6 14       	cp	r14, r6
    1fce:	f7 04       	cpc	r15, r7
    1fd0:	08 05       	cpc	r16, r8
    1fd2:	19 05       	cpc	r17, r9
    1fd4:	20 f4       	brcc	.+8      	; 0x1fde <__mulsf3+0xe8>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a0 e0       	ldi	r26, 0x00	; 0
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	ba 01       	movw	r22, r20
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	48 0f       	add	r20, r24
    1fe4:	59 1f       	adc	r21, r25
    1fe6:	6a 1f       	adc	r22, r26
    1fe8:	7b 1f       	adc	r23, r27
    1fea:	aa 0c       	add	r10, r10
    1fec:	bb 1c       	adc	r11, r11
    1fee:	cc 1c       	adc	r12, r12
    1ff0:	dd 1c       	adc	r13, r13
    1ff2:	97 fe       	sbrs	r9, 7
    1ff4:	08 c0       	rjmp	.+16     	; 0x2006 <__mulsf3+0x110>
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	a8 2a       	or	r10, r24
    2000:	b9 2a       	or	r11, r25
    2002:	ca 2a       	or	r12, r26
    2004:	db 2a       	or	r13, r27
    2006:	31 96       	adiw	r30, 0x01	; 1
    2008:	e0 32       	cpi	r30, 0x20	; 32
    200a:	f1 05       	cpc	r31, r1
    200c:	49 f0       	breq	.+18     	; 0x2020 <__mulsf3+0x12a>
    200e:	66 0c       	add	r6, r6
    2010:	77 1c       	adc	r7, r7
    2012:	88 1c       	adc	r8, r8
    2014:	99 1c       	adc	r9, r9
    2016:	56 94       	lsr	r5
    2018:	47 94       	ror	r4
    201a:	37 94       	ror	r3
    201c:	27 94       	ror	r2
    201e:	c3 cf       	rjmp	.-122    	; 0x1fa6 <__mulsf3+0xb0>
    2020:	fa 85       	ldd	r31, Y+10	; 0x0a
    2022:	ea 89       	ldd	r30, Y+18	; 0x12
    2024:	2b 89       	ldd	r18, Y+19	; 0x13
    2026:	3c 89       	ldd	r19, Y+20	; 0x14
    2028:	8b 85       	ldd	r24, Y+11	; 0x0b
    202a:	9c 85       	ldd	r25, Y+12	; 0x0c
    202c:	28 0f       	add	r18, r24
    202e:	39 1f       	adc	r19, r25
    2030:	2e 5f       	subi	r18, 0xFE	; 254
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	17 c0       	rjmp	.+46     	; 0x2064 <__mulsf3+0x16e>
    2036:	ca 01       	movw	r24, r20
    2038:	81 70       	andi	r24, 0x01	; 1
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	89 2b       	or	r24, r25
    203e:	61 f0       	breq	.+24     	; 0x2058 <__mulsf3+0x162>
    2040:	16 95       	lsr	r17
    2042:	07 95       	ror	r16
    2044:	f7 94       	ror	r15
    2046:	e7 94       	ror	r14
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	a0 e0       	ldi	r26, 0x00	; 0
    204e:	b0 e8       	ldi	r27, 0x80	; 128
    2050:	e8 2a       	or	r14, r24
    2052:	f9 2a       	or	r15, r25
    2054:	0a 2b       	or	r16, r26
    2056:	1b 2b       	or	r17, r27
    2058:	76 95       	lsr	r23
    205a:	67 95       	ror	r22
    205c:	57 95       	ror	r21
    205e:	47 95       	ror	r20
    2060:	2f 5f       	subi	r18, 0xFF	; 255
    2062:	3f 4f       	sbci	r19, 0xFF	; 255
    2064:	77 fd       	sbrc	r23, 7
    2066:	e7 cf       	rjmp	.-50     	; 0x2036 <__mulsf3+0x140>
    2068:	0c c0       	rjmp	.+24     	; 0x2082 <__mulsf3+0x18c>
    206a:	44 0f       	add	r20, r20
    206c:	55 1f       	adc	r21, r21
    206e:	66 1f       	adc	r22, r22
    2070:	77 1f       	adc	r23, r23
    2072:	17 fd       	sbrc	r17, 7
    2074:	41 60       	ori	r20, 0x01	; 1
    2076:	ee 0c       	add	r14, r14
    2078:	ff 1c       	adc	r15, r15
    207a:	00 1f       	adc	r16, r16
    207c:	11 1f       	adc	r17, r17
    207e:	21 50       	subi	r18, 0x01	; 1
    2080:	30 40       	sbci	r19, 0x00	; 0
    2082:	40 30       	cpi	r20, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	59 07       	cpc	r21, r25
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	69 07       	cpc	r22, r25
    208c:	90 e4       	ldi	r25, 0x40	; 64
    208e:	79 07       	cpc	r23, r25
    2090:	60 f3       	brcs	.-40     	; 0x206a <__mulsf3+0x174>
    2092:	2b 8f       	std	Y+27, r18	; 0x1b
    2094:	3c 8f       	std	Y+28, r19	; 0x1c
    2096:	db 01       	movw	r26, r22
    2098:	ca 01       	movw	r24, r20
    209a:	8f 77       	andi	r24, 0x7F	; 127
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	a0 70       	andi	r26, 0x00	; 0
    20a0:	b0 70       	andi	r27, 0x00	; 0
    20a2:	80 34       	cpi	r24, 0x40	; 64
    20a4:	91 05       	cpc	r25, r1
    20a6:	a1 05       	cpc	r26, r1
    20a8:	b1 05       	cpc	r27, r1
    20aa:	61 f4       	brne	.+24     	; 0x20c4 <__mulsf3+0x1ce>
    20ac:	47 fd       	sbrc	r20, 7
    20ae:	0a c0       	rjmp	.+20     	; 0x20c4 <__mulsf3+0x1ce>
    20b0:	e1 14       	cp	r14, r1
    20b2:	f1 04       	cpc	r15, r1
    20b4:	01 05       	cpc	r16, r1
    20b6:	11 05       	cpc	r17, r1
    20b8:	29 f0       	breq	.+10     	; 0x20c4 <__mulsf3+0x1ce>
    20ba:	40 5c       	subi	r20, 0xC0	; 192
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	6f 4f       	sbci	r22, 0xFF	; 255
    20c0:	7f 4f       	sbci	r23, 0xFF	; 255
    20c2:	40 78       	andi	r20, 0x80	; 128
    20c4:	1a 8e       	std	Y+26, r1	; 0x1a
    20c6:	fe 17       	cp	r31, r30
    20c8:	11 f0       	breq	.+4      	; 0x20ce <__mulsf3+0x1d8>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	8a 8f       	std	Y+26, r24	; 0x1a
    20ce:	4d 8f       	std	Y+29, r20	; 0x1d
    20d0:	5e 8f       	std	Y+30, r21	; 0x1e
    20d2:	6f 8f       	std	Y+31, r22	; 0x1f
    20d4:	78 a3       	std	Y+32, r23	; 0x20
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	89 8f       	std	Y+25, r24	; 0x19
    20da:	ce 01       	movw	r24, r28
    20dc:	49 96       	adiw	r24, 0x19	; 25
    20de:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__pack_f>
    20e2:	a0 96       	adiw	r28, 0x20	; 32
    20e4:	e2 e1       	ldi	r30, 0x12	; 18
    20e6:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__>

000020ea <__gtsf2>:
    20ea:	a8 e1       	ldi	r26, 0x18	; 24
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	eb e7       	ldi	r30, 0x7B	; 123
    20f0:	f0 e1       	ldi	r31, 0x10	; 16
    20f2:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    20f6:	69 83       	std	Y+1, r22	; 0x01
    20f8:	7a 83       	std	Y+2, r23	; 0x02
    20fa:	8b 83       	std	Y+3, r24	; 0x03
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	2d 83       	std	Y+5, r18	; 0x05
    2100:	3e 83       	std	Y+6, r19	; 0x06
    2102:	4f 83       	std	Y+7, r20	; 0x07
    2104:	58 87       	std	Y+8, r21	; 0x08
    2106:	89 e0       	ldi	r24, 0x09	; 9
    2108:	e8 2e       	mov	r14, r24
    210a:	f1 2c       	mov	r15, r1
    210c:	ec 0e       	add	r14, r28
    210e:	fd 1e       	adc	r15, r29
    2110:	ce 01       	movw	r24, r28
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	b7 01       	movw	r22, r14
    2116:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    211a:	8e 01       	movw	r16, r28
    211c:	0f 5e       	subi	r16, 0xEF	; 239
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	ce 01       	movw	r24, r28
    2122:	05 96       	adiw	r24, 0x05	; 5
    2124:	b8 01       	movw	r22, r16
    2126:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	82 30       	cpi	r24, 0x02	; 2
    212e:	40 f0       	brcs	.+16     	; 0x2140 <__gtsf2+0x56>
    2130:	89 89       	ldd	r24, Y+17	; 0x11
    2132:	82 30       	cpi	r24, 0x02	; 2
    2134:	28 f0       	brcs	.+10     	; 0x2140 <__gtsf2+0x56>
    2136:	c7 01       	movw	r24, r14
    2138:	b8 01       	movw	r22, r16
    213a:	0e 94 a6 12 	call	0x254c	; 0x254c <__fpcmp_parts_f>
    213e:	01 c0       	rjmp	.+2      	; 0x2142 <__gtsf2+0x58>
    2140:	8f ef       	ldi	r24, 0xFF	; 255
    2142:	68 96       	adiw	r28, 0x18	; 24
    2144:	e6 e0       	ldi	r30, 0x06	; 6
    2146:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

0000214a <__gesf2>:
    214a:	a8 e1       	ldi	r26, 0x18	; 24
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	eb ea       	ldi	r30, 0xAB	; 171
    2150:	f0 e1       	ldi	r31, 0x10	; 16
    2152:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    2156:	69 83       	std	Y+1, r22	; 0x01
    2158:	7a 83       	std	Y+2, r23	; 0x02
    215a:	8b 83       	std	Y+3, r24	; 0x03
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	2d 83       	std	Y+5, r18	; 0x05
    2160:	3e 83       	std	Y+6, r19	; 0x06
    2162:	4f 83       	std	Y+7, r20	; 0x07
    2164:	58 87       	std	Y+8, r21	; 0x08
    2166:	89 e0       	ldi	r24, 0x09	; 9
    2168:	e8 2e       	mov	r14, r24
    216a:	f1 2c       	mov	r15, r1
    216c:	ec 0e       	add	r14, r28
    216e:	fd 1e       	adc	r15, r29
    2170:	ce 01       	movw	r24, r28
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	b7 01       	movw	r22, r14
    2176:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    217a:	8e 01       	movw	r16, r28
    217c:	0f 5e       	subi	r16, 0xEF	; 239
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	ce 01       	movw	r24, r28
    2182:	05 96       	adiw	r24, 0x05	; 5
    2184:	b8 01       	movw	r22, r16
    2186:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    218a:	89 85       	ldd	r24, Y+9	; 0x09
    218c:	82 30       	cpi	r24, 0x02	; 2
    218e:	40 f0       	brcs	.+16     	; 0x21a0 <__gesf2+0x56>
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	82 30       	cpi	r24, 0x02	; 2
    2194:	28 f0       	brcs	.+10     	; 0x21a0 <__gesf2+0x56>
    2196:	c7 01       	movw	r24, r14
    2198:	b8 01       	movw	r22, r16
    219a:	0e 94 a6 12 	call	0x254c	; 0x254c <__fpcmp_parts_f>
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <__gesf2+0x58>
    21a0:	8f ef       	ldi	r24, 0xFF	; 255
    21a2:	68 96       	adiw	r28, 0x18	; 24
    21a4:	e6 e0       	ldi	r30, 0x06	; 6
    21a6:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

000021aa <__ltsf2>:
    21aa:	a8 e1       	ldi	r26, 0x18	; 24
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	eb ed       	ldi	r30, 0xDB	; 219
    21b0:	f0 e1       	ldi	r31, 0x10	; 16
    21b2:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    21b6:	69 83       	std	Y+1, r22	; 0x01
    21b8:	7a 83       	std	Y+2, r23	; 0x02
    21ba:	8b 83       	std	Y+3, r24	; 0x03
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	2d 83       	std	Y+5, r18	; 0x05
    21c0:	3e 83       	std	Y+6, r19	; 0x06
    21c2:	4f 83       	std	Y+7, r20	; 0x07
    21c4:	58 87       	std	Y+8, r21	; 0x08
    21c6:	89 e0       	ldi	r24, 0x09	; 9
    21c8:	e8 2e       	mov	r14, r24
    21ca:	f1 2c       	mov	r15, r1
    21cc:	ec 0e       	add	r14, r28
    21ce:	fd 1e       	adc	r15, r29
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	b7 01       	movw	r22, r14
    21d6:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    21da:	8e 01       	movw	r16, r28
    21dc:	0f 5e       	subi	r16, 0xEF	; 239
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	ce 01       	movw	r24, r28
    21e2:	05 96       	adiw	r24, 0x05	; 5
    21e4:	b8 01       	movw	r22, r16
    21e6:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	40 f0       	brcs	.+16     	; 0x2200 <__ltsf2+0x56>
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	28 f0       	brcs	.+10     	; 0x2200 <__ltsf2+0x56>
    21f6:	c7 01       	movw	r24, r14
    21f8:	b8 01       	movw	r22, r16
    21fa:	0e 94 a6 12 	call	0x254c	; 0x254c <__fpcmp_parts_f>
    21fe:	01 c0       	rjmp	.+2      	; 0x2202 <__ltsf2+0x58>
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	68 96       	adiw	r28, 0x18	; 24
    2204:	e6 e0       	ldi	r30, 0x06	; 6
    2206:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

0000220a <__fixsfsi>:
    220a:	ac e0       	ldi	r26, 0x0C	; 12
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	eb e0       	ldi	r30, 0x0B	; 11
    2210:	f1 e1       	ldi	r31, 0x11	; 17
    2212:	0c 94 0b 27 	jmp	0x4e16	; 0x4e16 <__prologue_saves__+0x20>
    2216:	69 83       	std	Y+1, r22	; 0x01
    2218:	7a 83       	std	Y+2, r23	; 0x02
    221a:	8b 83       	std	Y+3, r24	; 0x03
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	ce 01       	movw	r24, r28
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	be 01       	movw	r22, r28
    2224:	6b 5f       	subi	r22, 0xFB	; 251
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	0e 94 2e 12 	call	0x245c	; 0x245c <__unpack_f>
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	61 f1       	breq	.+88     	; 0x228a <__fixsfsi+0x80>
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	50 f1       	brcs	.+84     	; 0x228a <__fixsfsi+0x80>
    2236:	84 30       	cpi	r24, 0x04	; 4
    2238:	21 f4       	brne	.+8      	; 0x2242 <__fixsfsi+0x38>
    223a:	8e 81       	ldd	r24, Y+6	; 0x06
    223c:	88 23       	and	r24, r24
    223e:	51 f1       	breq	.+84     	; 0x2294 <__fixsfsi+0x8a>
    2240:	2e c0       	rjmp	.+92     	; 0x229e <__fixsfsi+0x94>
    2242:	2f 81       	ldd	r18, Y+7	; 0x07
    2244:	38 85       	ldd	r19, Y+8	; 0x08
    2246:	37 fd       	sbrc	r19, 7
    2248:	20 c0       	rjmp	.+64     	; 0x228a <__fixsfsi+0x80>
    224a:	6e 81       	ldd	r22, Y+6	; 0x06
    224c:	2f 31       	cpi	r18, 0x1F	; 31
    224e:	31 05       	cpc	r19, r1
    2250:	1c f0       	brlt	.+6      	; 0x2258 <__fixsfsi+0x4e>
    2252:	66 23       	and	r22, r22
    2254:	f9 f0       	breq	.+62     	; 0x2294 <__fixsfsi+0x8a>
    2256:	23 c0       	rjmp	.+70     	; 0x229e <__fixsfsi+0x94>
    2258:	8e e1       	ldi	r24, 0x1E	; 30
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	82 1b       	sub	r24, r18
    225e:	93 0b       	sbc	r25, r19
    2260:	29 85       	ldd	r18, Y+9	; 0x09
    2262:	3a 85       	ldd	r19, Y+10	; 0x0a
    2264:	4b 85       	ldd	r20, Y+11	; 0x0b
    2266:	5c 85       	ldd	r21, Y+12	; 0x0c
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <__fixsfsi+0x68>
    226a:	56 95       	lsr	r21
    226c:	47 95       	ror	r20
    226e:	37 95       	ror	r19
    2270:	27 95       	ror	r18
    2272:	8a 95       	dec	r24
    2274:	d2 f7       	brpl	.-12     	; 0x226a <__fixsfsi+0x60>
    2276:	66 23       	and	r22, r22
    2278:	b1 f0       	breq	.+44     	; 0x22a6 <__fixsfsi+0x9c>
    227a:	50 95       	com	r21
    227c:	40 95       	com	r20
    227e:	30 95       	com	r19
    2280:	21 95       	neg	r18
    2282:	3f 4f       	sbci	r19, 0xFF	; 255
    2284:	4f 4f       	sbci	r20, 0xFF	; 255
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	0e c0       	rjmp	.+28     	; 0x22a6 <__fixsfsi+0x9c>
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	09 c0       	rjmp	.+18     	; 0x22a6 <__fixsfsi+0x9c>
    2294:	2f ef       	ldi	r18, 0xFF	; 255
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f ef       	ldi	r20, 0xFF	; 255
    229a:	5f e7       	ldi	r21, 0x7F	; 127
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <__fixsfsi+0x9c>
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e8       	ldi	r21, 0x80	; 128
    22a6:	b9 01       	movw	r22, r18
    22a8:	ca 01       	movw	r24, r20
    22aa:	2c 96       	adiw	r28, 0x0c	; 12
    22ac:	e2 e0       	ldi	r30, 0x02	; 2
    22ae:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__epilogue_restores__+0x20>

000022b2 <__pack_f>:
    22b2:	df 92       	push	r13
    22b4:	ef 92       	push	r14
    22b6:	ff 92       	push	r15
    22b8:	0f 93       	push	r16
    22ba:	1f 93       	push	r17
    22bc:	fc 01       	movw	r30, r24
    22be:	e4 80       	ldd	r14, Z+4	; 0x04
    22c0:	f5 80       	ldd	r15, Z+5	; 0x05
    22c2:	06 81       	ldd	r16, Z+6	; 0x06
    22c4:	17 81       	ldd	r17, Z+7	; 0x07
    22c6:	d1 80       	ldd	r13, Z+1	; 0x01
    22c8:	80 81       	ld	r24, Z
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	48 f4       	brcc	.+18     	; 0x22e0 <__pack_f+0x2e>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e1       	ldi	r26, 0x10	; 16
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e8 2a       	or	r14, r24
    22d8:	f9 2a       	or	r15, r25
    22da:	0a 2b       	or	r16, r26
    22dc:	1b 2b       	or	r17, r27
    22de:	a5 c0       	rjmp	.+330    	; 0x242a <__pack_f+0x178>
    22e0:	84 30       	cpi	r24, 0x04	; 4
    22e2:	09 f4       	brne	.+2      	; 0x22e6 <__pack_f+0x34>
    22e4:	9f c0       	rjmp	.+318    	; 0x2424 <__pack_f+0x172>
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	21 f4       	brne	.+8      	; 0x22f2 <__pack_f+0x40>
    22ea:	ee 24       	eor	r14, r14
    22ec:	ff 24       	eor	r15, r15
    22ee:	87 01       	movw	r16, r14
    22f0:	05 c0       	rjmp	.+10     	; 0x22fc <__pack_f+0x4a>
    22f2:	e1 14       	cp	r14, r1
    22f4:	f1 04       	cpc	r15, r1
    22f6:	01 05       	cpc	r16, r1
    22f8:	11 05       	cpc	r17, r1
    22fa:	19 f4       	brne	.+6      	; 0x2302 <__pack_f+0x50>
    22fc:	e0 e0       	ldi	r30, 0x00	; 0
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	96 c0       	rjmp	.+300    	; 0x242e <__pack_f+0x17c>
    2302:	62 81       	ldd	r22, Z+2	; 0x02
    2304:	73 81       	ldd	r23, Z+3	; 0x03
    2306:	9f ef       	ldi	r25, 0xFF	; 255
    2308:	62 38       	cpi	r22, 0x82	; 130
    230a:	79 07       	cpc	r23, r25
    230c:	0c f0       	brlt	.+2      	; 0x2310 <__pack_f+0x5e>
    230e:	5b c0       	rjmp	.+182    	; 0x23c6 <__pack_f+0x114>
    2310:	22 e8       	ldi	r18, 0x82	; 130
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	26 1b       	sub	r18, r22
    2316:	37 0b       	sbc	r19, r23
    2318:	2a 31       	cpi	r18, 0x1A	; 26
    231a:	31 05       	cpc	r19, r1
    231c:	2c f0       	brlt	.+10     	; 0x2328 <__pack_f+0x76>
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	50 e0       	ldi	r21, 0x00	; 0
    2326:	2a c0       	rjmp	.+84     	; 0x237c <__pack_f+0xca>
    2328:	b8 01       	movw	r22, r16
    232a:	a7 01       	movw	r20, r14
    232c:	02 2e       	mov	r0, r18
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <__pack_f+0x86>
    2330:	76 95       	lsr	r23
    2332:	67 95       	ror	r22
    2334:	57 95       	ror	r21
    2336:	47 95       	ror	r20
    2338:	0a 94       	dec	r0
    233a:	d2 f7       	brpl	.-12     	; 0x2330 <__pack_f+0x7e>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e0       	ldi	r26, 0x00	; 0
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	04 c0       	rjmp	.+8      	; 0x234e <__pack_f+0x9c>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	aa 1f       	adc	r26, r26
    234c:	bb 1f       	adc	r27, r27
    234e:	2a 95       	dec	r18
    2350:	d2 f7       	brpl	.-12     	; 0x2346 <__pack_f+0x94>
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	a1 09       	sbc	r26, r1
    2356:	b1 09       	sbc	r27, r1
    2358:	8e 21       	and	r24, r14
    235a:	9f 21       	and	r25, r15
    235c:	a0 23       	and	r26, r16
    235e:	b1 23       	and	r27, r17
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	a1 05       	cpc	r26, r1
    2364:	b1 05       	cpc	r27, r1
    2366:	21 f0       	breq	.+8      	; 0x2370 <__pack_f+0xbe>
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e0       	ldi	r26, 0x00	; 0
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	9a 01       	movw	r18, r20
    2372:	ab 01       	movw	r20, r22
    2374:	28 2b       	or	r18, r24
    2376:	39 2b       	or	r19, r25
    2378:	4a 2b       	or	r20, r26
    237a:	5b 2b       	or	r21, r27
    237c:	da 01       	movw	r26, r20
    237e:	c9 01       	movw	r24, r18
    2380:	8f 77       	andi	r24, 0x7F	; 127
    2382:	90 70       	andi	r25, 0x00	; 0
    2384:	a0 70       	andi	r26, 0x00	; 0
    2386:	b0 70       	andi	r27, 0x00	; 0
    2388:	80 34       	cpi	r24, 0x40	; 64
    238a:	91 05       	cpc	r25, r1
    238c:	a1 05       	cpc	r26, r1
    238e:	b1 05       	cpc	r27, r1
    2390:	39 f4       	brne	.+14     	; 0x23a0 <__pack_f+0xee>
    2392:	27 ff       	sbrs	r18, 7
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <__pack_f+0xf6>
    2396:	20 5c       	subi	r18, 0xC0	; 192
    2398:	3f 4f       	sbci	r19, 0xFF	; 255
    239a:	4f 4f       	sbci	r20, 0xFF	; 255
    239c:	5f 4f       	sbci	r21, 0xFF	; 255
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <__pack_f+0xf6>
    23a0:	21 5c       	subi	r18, 0xC1	; 193
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	4f 4f       	sbci	r20, 0xFF	; 255
    23a6:	5f 4f       	sbci	r21, 0xFF	; 255
    23a8:	e0 e0       	ldi	r30, 0x00	; 0
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	20 30       	cpi	r18, 0x00	; 0
    23ae:	a0 e0       	ldi	r26, 0x00	; 0
    23b0:	3a 07       	cpc	r19, r26
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	4a 07       	cpc	r20, r26
    23b6:	a0 e4       	ldi	r26, 0x40	; 64
    23b8:	5a 07       	cpc	r21, r26
    23ba:	10 f0       	brcs	.+4      	; 0x23c0 <__pack_f+0x10e>
    23bc:	e1 e0       	ldi	r30, 0x01	; 1
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	79 01       	movw	r14, r18
    23c2:	8a 01       	movw	r16, r20
    23c4:	27 c0       	rjmp	.+78     	; 0x2414 <__pack_f+0x162>
    23c6:	60 38       	cpi	r22, 0x80	; 128
    23c8:	71 05       	cpc	r23, r1
    23ca:	64 f5       	brge	.+88     	; 0x2424 <__pack_f+0x172>
    23cc:	fb 01       	movw	r30, r22
    23ce:	e1 58       	subi	r30, 0x81	; 129
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	d8 01       	movw	r26, r16
    23d4:	c7 01       	movw	r24, r14
    23d6:	8f 77       	andi	r24, 0x7F	; 127
    23d8:	90 70       	andi	r25, 0x00	; 0
    23da:	a0 70       	andi	r26, 0x00	; 0
    23dc:	b0 70       	andi	r27, 0x00	; 0
    23de:	80 34       	cpi	r24, 0x40	; 64
    23e0:	91 05       	cpc	r25, r1
    23e2:	a1 05       	cpc	r26, r1
    23e4:	b1 05       	cpc	r27, r1
    23e6:	39 f4       	brne	.+14     	; 0x23f6 <__pack_f+0x144>
    23e8:	e7 fe       	sbrs	r14, 7
    23ea:	0d c0       	rjmp	.+26     	; 0x2406 <__pack_f+0x154>
    23ec:	80 e4       	ldi	r24, 0x40	; 64
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <__pack_f+0x14c>
    23f6:	8f e3       	ldi	r24, 0x3F	; 63
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	a0 e0       	ldi	r26, 0x00	; 0
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e8 0e       	add	r14, r24
    2400:	f9 1e       	adc	r15, r25
    2402:	0a 1f       	adc	r16, r26
    2404:	1b 1f       	adc	r17, r27
    2406:	17 ff       	sbrs	r17, 7
    2408:	05 c0       	rjmp	.+10     	; 0x2414 <__pack_f+0x162>
    240a:	16 95       	lsr	r17
    240c:	07 95       	ror	r16
    240e:	f7 94       	ror	r15
    2410:	e7 94       	ror	r14
    2412:	31 96       	adiw	r30, 0x01	; 1
    2414:	87 e0       	ldi	r24, 0x07	; 7
    2416:	16 95       	lsr	r17
    2418:	07 95       	ror	r16
    241a:	f7 94       	ror	r15
    241c:	e7 94       	ror	r14
    241e:	8a 95       	dec	r24
    2420:	d1 f7       	brne	.-12     	; 0x2416 <__pack_f+0x164>
    2422:	05 c0       	rjmp	.+10     	; 0x242e <__pack_f+0x17c>
    2424:	ee 24       	eor	r14, r14
    2426:	ff 24       	eor	r15, r15
    2428:	87 01       	movw	r16, r14
    242a:	ef ef       	ldi	r30, 0xFF	; 255
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	6e 2f       	mov	r22, r30
    2430:	67 95       	ror	r22
    2432:	66 27       	eor	r22, r22
    2434:	67 95       	ror	r22
    2436:	90 2f       	mov	r25, r16
    2438:	9f 77       	andi	r25, 0x7F	; 127
    243a:	d7 94       	ror	r13
    243c:	dd 24       	eor	r13, r13
    243e:	d7 94       	ror	r13
    2440:	8e 2f       	mov	r24, r30
    2442:	86 95       	lsr	r24
    2444:	49 2f       	mov	r20, r25
    2446:	46 2b       	or	r20, r22
    2448:	58 2f       	mov	r21, r24
    244a:	5d 29       	or	r21, r13
    244c:	b7 01       	movw	r22, r14
    244e:	ca 01       	movw	r24, r20
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	08 95       	ret

0000245c <__unpack_f>:
    245c:	fc 01       	movw	r30, r24
    245e:	db 01       	movw	r26, r22
    2460:	40 81       	ld	r20, Z
    2462:	51 81       	ldd	r21, Z+1	; 0x01
    2464:	22 81       	ldd	r18, Z+2	; 0x02
    2466:	62 2f       	mov	r22, r18
    2468:	6f 77       	andi	r22, 0x7F	; 127
    246a:	70 e0       	ldi	r23, 0x00	; 0
    246c:	22 1f       	adc	r18, r18
    246e:	22 27       	eor	r18, r18
    2470:	22 1f       	adc	r18, r18
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	89 2f       	mov	r24, r25
    2476:	88 0f       	add	r24, r24
    2478:	82 2b       	or	r24, r18
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	99 1f       	adc	r25, r25
    2480:	99 27       	eor	r25, r25
    2482:	99 1f       	adc	r25, r25
    2484:	11 96       	adiw	r26, 0x01	; 1
    2486:	9c 93       	st	X, r25
    2488:	11 97       	sbiw	r26, 0x01	; 1
    248a:	21 15       	cp	r18, r1
    248c:	31 05       	cpc	r19, r1
    248e:	a9 f5       	brne	.+106    	; 0x24fa <__unpack_f+0x9e>
    2490:	41 15       	cp	r20, r1
    2492:	51 05       	cpc	r21, r1
    2494:	61 05       	cpc	r22, r1
    2496:	71 05       	cpc	r23, r1
    2498:	11 f4       	brne	.+4      	; 0x249e <__unpack_f+0x42>
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	37 c0       	rjmp	.+110    	; 0x250c <__unpack_f+0xb0>
    249e:	82 e8       	ldi	r24, 0x82	; 130
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	13 96       	adiw	r26, 0x03	; 3
    24a4:	9c 93       	st	X, r25
    24a6:	8e 93       	st	-X, r24
    24a8:	12 97       	sbiw	r26, 0x02	; 2
    24aa:	9a 01       	movw	r18, r20
    24ac:	ab 01       	movw	r20, r22
    24ae:	67 e0       	ldi	r22, 0x07	; 7
    24b0:	22 0f       	add	r18, r18
    24b2:	33 1f       	adc	r19, r19
    24b4:	44 1f       	adc	r20, r20
    24b6:	55 1f       	adc	r21, r21
    24b8:	6a 95       	dec	r22
    24ba:	d1 f7       	brne	.-12     	; 0x24b0 <__unpack_f+0x54>
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	8c 93       	st	X, r24
    24c0:	0d c0       	rjmp	.+26     	; 0x24dc <__unpack_f+0x80>
    24c2:	22 0f       	add	r18, r18
    24c4:	33 1f       	adc	r19, r19
    24c6:	44 1f       	adc	r20, r20
    24c8:	55 1f       	adc	r21, r21
    24ca:	12 96       	adiw	r26, 0x02	; 2
    24cc:	8d 91       	ld	r24, X+
    24ce:	9c 91       	ld	r25, X
    24d0:	13 97       	sbiw	r26, 0x03	; 3
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	13 96       	adiw	r26, 0x03	; 3
    24d6:	9c 93       	st	X, r25
    24d8:	8e 93       	st	-X, r24
    24da:	12 97       	sbiw	r26, 0x02	; 2
    24dc:	20 30       	cpi	r18, 0x00	; 0
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	38 07       	cpc	r19, r24
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	48 07       	cpc	r20, r24
    24e6:	80 e4       	ldi	r24, 0x40	; 64
    24e8:	58 07       	cpc	r21, r24
    24ea:	58 f3       	brcs	.-42     	; 0x24c2 <__unpack_f+0x66>
    24ec:	14 96       	adiw	r26, 0x04	; 4
    24ee:	2d 93       	st	X+, r18
    24f0:	3d 93       	st	X+, r19
    24f2:	4d 93       	st	X+, r20
    24f4:	5c 93       	st	X, r21
    24f6:	17 97       	sbiw	r26, 0x07	; 7
    24f8:	08 95       	ret
    24fa:	2f 3f       	cpi	r18, 0xFF	; 255
    24fc:	31 05       	cpc	r19, r1
    24fe:	79 f4       	brne	.+30     	; 0x251e <__unpack_f+0xc2>
    2500:	41 15       	cp	r20, r1
    2502:	51 05       	cpc	r21, r1
    2504:	61 05       	cpc	r22, r1
    2506:	71 05       	cpc	r23, r1
    2508:	19 f4       	brne	.+6      	; 0x2510 <__unpack_f+0xb4>
    250a:	84 e0       	ldi	r24, 0x04	; 4
    250c:	8c 93       	st	X, r24
    250e:	08 95       	ret
    2510:	64 ff       	sbrs	r22, 4
    2512:	03 c0       	rjmp	.+6      	; 0x251a <__unpack_f+0xbe>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	8c 93       	st	X, r24
    2518:	12 c0       	rjmp	.+36     	; 0x253e <__unpack_f+0xe2>
    251a:	1c 92       	st	X, r1
    251c:	10 c0       	rjmp	.+32     	; 0x253e <__unpack_f+0xe2>
    251e:	2f 57       	subi	r18, 0x7F	; 127
    2520:	30 40       	sbci	r19, 0x00	; 0
    2522:	13 96       	adiw	r26, 0x03	; 3
    2524:	3c 93       	st	X, r19
    2526:	2e 93       	st	-X, r18
    2528:	12 97       	sbiw	r26, 0x02	; 2
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	8c 93       	st	X, r24
    252e:	87 e0       	ldi	r24, 0x07	; 7
    2530:	44 0f       	add	r20, r20
    2532:	55 1f       	adc	r21, r21
    2534:	66 1f       	adc	r22, r22
    2536:	77 1f       	adc	r23, r23
    2538:	8a 95       	dec	r24
    253a:	d1 f7       	brne	.-12     	; 0x2530 <__unpack_f+0xd4>
    253c:	70 64       	ori	r23, 0x40	; 64
    253e:	14 96       	adiw	r26, 0x04	; 4
    2540:	4d 93       	st	X+, r20
    2542:	5d 93       	st	X+, r21
    2544:	6d 93       	st	X+, r22
    2546:	7c 93       	st	X, r23
    2548:	17 97       	sbiw	r26, 0x07	; 7
    254a:	08 95       	ret

0000254c <__fpcmp_parts_f>:
    254c:	1f 93       	push	r17
    254e:	dc 01       	movw	r26, r24
    2550:	fb 01       	movw	r30, r22
    2552:	9c 91       	ld	r25, X
    2554:	92 30       	cpi	r25, 0x02	; 2
    2556:	08 f4       	brcc	.+2      	; 0x255a <__fpcmp_parts_f+0xe>
    2558:	47 c0       	rjmp	.+142    	; 0x25e8 <__fpcmp_parts_f+0x9c>
    255a:	80 81       	ld	r24, Z
    255c:	82 30       	cpi	r24, 0x02	; 2
    255e:	08 f4       	brcc	.+2      	; 0x2562 <__fpcmp_parts_f+0x16>
    2560:	43 c0       	rjmp	.+134    	; 0x25e8 <__fpcmp_parts_f+0x9c>
    2562:	94 30       	cpi	r25, 0x04	; 4
    2564:	51 f4       	brne	.+20     	; 0x257a <__fpcmp_parts_f+0x2e>
    2566:	11 96       	adiw	r26, 0x01	; 1
    2568:	1c 91       	ld	r17, X
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	99 f5       	brne	.+102    	; 0x25d4 <__fpcmp_parts_f+0x88>
    256e:	81 81       	ldd	r24, Z+1	; 0x01
    2570:	68 2f       	mov	r22, r24
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	61 1b       	sub	r22, r17
    2576:	71 09       	sbc	r23, r1
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <__fpcmp_parts_f+0xac>
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	21 f0       	breq	.+8      	; 0x2586 <__fpcmp_parts_f+0x3a>
    257e:	92 30       	cpi	r25, 0x02	; 2
    2580:	31 f4       	brne	.+12     	; 0x258e <__fpcmp_parts_f+0x42>
    2582:	82 30       	cpi	r24, 0x02	; 2
    2584:	b9 f1       	breq	.+110    	; 0x25f4 <__fpcmp_parts_f+0xa8>
    2586:	81 81       	ldd	r24, Z+1	; 0x01
    2588:	88 23       	and	r24, r24
    258a:	89 f1       	breq	.+98     	; 0x25ee <__fpcmp_parts_f+0xa2>
    258c:	2d c0       	rjmp	.+90     	; 0x25e8 <__fpcmp_parts_f+0x9c>
    258e:	11 96       	adiw	r26, 0x01	; 1
    2590:	1c 91       	ld	r17, X
    2592:	11 97       	sbiw	r26, 0x01	; 1
    2594:	82 30       	cpi	r24, 0x02	; 2
    2596:	f1 f0       	breq	.+60     	; 0x25d4 <__fpcmp_parts_f+0x88>
    2598:	81 81       	ldd	r24, Z+1	; 0x01
    259a:	18 17       	cp	r17, r24
    259c:	d9 f4       	brne	.+54     	; 0x25d4 <__fpcmp_parts_f+0x88>
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	2d 91       	ld	r18, X+
    25a2:	3c 91       	ld	r19, X
    25a4:	13 97       	sbiw	r26, 0x03	; 3
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	82 17       	cp	r24, r18
    25ac:	93 07       	cpc	r25, r19
    25ae:	94 f0       	brlt	.+36     	; 0x25d4 <__fpcmp_parts_f+0x88>
    25b0:	28 17       	cp	r18, r24
    25b2:	39 07       	cpc	r19, r25
    25b4:	bc f0       	brlt	.+46     	; 0x25e4 <__fpcmp_parts_f+0x98>
    25b6:	14 96       	adiw	r26, 0x04	; 4
    25b8:	8d 91       	ld	r24, X+
    25ba:	9d 91       	ld	r25, X+
    25bc:	0d 90       	ld	r0, X+
    25be:	bc 91       	ld	r27, X
    25c0:	a0 2d       	mov	r26, r0
    25c2:	24 81       	ldd	r18, Z+4	; 0x04
    25c4:	35 81       	ldd	r19, Z+5	; 0x05
    25c6:	46 81       	ldd	r20, Z+6	; 0x06
    25c8:	57 81       	ldd	r21, Z+7	; 0x07
    25ca:	28 17       	cp	r18, r24
    25cc:	39 07       	cpc	r19, r25
    25ce:	4a 07       	cpc	r20, r26
    25d0:	5b 07       	cpc	r21, r27
    25d2:	18 f4       	brcc	.+6      	; 0x25da <__fpcmp_parts_f+0x8e>
    25d4:	11 23       	and	r17, r17
    25d6:	41 f0       	breq	.+16     	; 0x25e8 <__fpcmp_parts_f+0x9c>
    25d8:	0a c0       	rjmp	.+20     	; 0x25ee <__fpcmp_parts_f+0xa2>
    25da:	82 17       	cp	r24, r18
    25dc:	93 07       	cpc	r25, r19
    25de:	a4 07       	cpc	r26, r20
    25e0:	b5 07       	cpc	r27, r21
    25e2:	40 f4       	brcc	.+16     	; 0x25f4 <__fpcmp_parts_f+0xa8>
    25e4:	11 23       	and	r17, r17
    25e6:	19 f0       	breq	.+6      	; 0x25ee <__fpcmp_parts_f+0xa2>
    25e8:	61 e0       	ldi	r22, 0x01	; 1
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	05 c0       	rjmp	.+10     	; 0x25f8 <__fpcmp_parts_f+0xac>
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <__fpcmp_parts_f+0xac>
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	cb 01       	movw	r24, r22
    25fa:	1f 91       	pop	r17
    25fc:	08 95       	ret

000025fe <S_push>:
S_push stand for stack push
this function doesn't retern anything and takes pointer to the struct that has the stack array
and the value
*/
void S_push(struct Array * A,u8 value)
{
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	00 d0       	rcall	.+0      	; 0x2604 <S_push+0x6>
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	6b 83       	std	Y+3, r22	; 0x03
    // make suer thta's the array isn't full
    if(A->len>=A->size)
    2610:	e9 81       	ldd	r30, Y+1	; 0x01
    2612:	fa 81       	ldd	r31, Y+2	; 0x02
    2614:	90 89       	ldd	r25, Z+16	; 0x10
    2616:	e9 81       	ldd	r30, Y+1	; 0x01
    2618:	fa 81       	ldd	r31, Y+2	; 0x02
    261a:	81 89       	ldd	r24, Z+17	; 0x11
    261c:	98 17       	cp	r25, r24
    261e:	88 f4       	brcc	.+34     	; 0x2642 <S_push+0x44>
    {

    }
    else
    {
        A->data[A->len++]=value;
    2620:	e9 81       	ldd	r30, Y+1	; 0x01
    2622:	fa 81       	ldd	r31, Y+2	; 0x02
    2624:	40 89       	ldd	r20, Z+16	; 0x10
    2626:	24 2f       	mov	r18, r20
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	fc 01       	movw	r30, r24
    2630:	e2 0f       	add	r30, r18
    2632:	f3 1f       	adc	r31, r19
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	80 83       	st	Z, r24
    2638:	84 2f       	mov	r24, r20
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	e9 81       	ldd	r30, Y+1	; 0x01
    263e:	fa 81       	ldd	r31, Y+2	; 0x02
    2640:	80 8b       	std	Z+16, r24	; 0x10
    }
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <S_pop>:
/*
S_pop stand for stack pop
this function  return the value that the array hold and takes pointer to the struct that has the stack array
*/
u8 S_pop(struct Array * A)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <S_pop+0x6>
    2654:	0f 92       	push	r0
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	9b 83       	std	Y+3, r25	; 0x03
    265c:	8a 83       	std	Y+2, r24	; 0x02
    u8 temp;
    // make sure that the array isn't empty
    if(A->len<=0)
    265e:	ea 81       	ldd	r30, Y+2	; 0x02
    2660:	fb 81       	ldd	r31, Y+3	; 0x03
    2662:	80 89       	ldd	r24, Z+16	; 0x10
    2664:	88 23       	and	r24, r24
    2666:	19 f4       	brne	.+6      	; 0x266e <S_pop+0x20>
    {
        temp= -1;
    2668:	8f ef       	ldi	r24, 0xFF	; 255
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	13 c0       	rjmp	.+38     	; 0x2694 <S_pop+0x46>
    }
    else
    {
        temp= A->data[--A->len];
    266e:	ea 81       	ldd	r30, Y+2	; 0x02
    2670:	fb 81       	ldd	r31, Y+3	; 0x03
    2672:	80 89       	ldd	r24, Z+16	; 0x10
    2674:	81 50       	subi	r24, 0x01	; 1
    2676:	ea 81       	ldd	r30, Y+2	; 0x02
    2678:	fb 81       	ldd	r31, Y+3	; 0x03
    267a:	80 8b       	std	Z+16, r24	; 0x10
    267c:	ea 81       	ldd	r30, Y+2	; 0x02
    267e:	fb 81       	ldd	r31, Y+3	; 0x03
    2680:	80 89       	ldd	r24, Z+16	; 0x10
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	89 83       	std	Y+1, r24	; 0x01
    }
    return temp;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <getpriority>:

/*
-getpriority is a function that takes the opretion and retrun it's priority
*/
u8 getpriority(u8 opretion)
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <getpriority+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <getpriority+0x8>
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    u8 res ;
    switch (opretion)
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	28 2f       	mov	r18, r24
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	3c 83       	std	Y+4, r19	; 0x04
    26b8:	2b 83       	std	Y+3, r18	; 0x03
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	8b 32       	cpi	r24, 0x2B	; 43
    26c0:	91 05       	cpc	r25, r1
    26c2:	d1 f0       	breq	.+52     	; 0x26f8 <getpriority+0x56>
    26c4:	2b 81       	ldd	r18, Y+3	; 0x03
    26c6:	3c 81       	ldd	r19, Y+4	; 0x04
    26c8:	2c 32       	cpi	r18, 0x2C	; 44
    26ca:	31 05       	cpc	r19, r1
    26cc:	34 f4       	brge	.+12     	; 0x26da <getpriority+0x38>
    26ce:	8b 81       	ldd	r24, Y+3	; 0x03
    26d0:	9c 81       	ldd	r25, Y+4	; 0x04
    26d2:	8a 32       	cpi	r24, 0x2A	; 42
    26d4:	91 05       	cpc	r25, r1
    26d6:	61 f0       	breq	.+24     	; 0x26f0 <getpriority+0x4e>
    26d8:	15 c0       	rjmp	.+42     	; 0x2704 <getpriority+0x62>
    26da:	2b 81       	ldd	r18, Y+3	; 0x03
    26dc:	3c 81       	ldd	r19, Y+4	; 0x04
    26de:	2d 32       	cpi	r18, 0x2D	; 45
    26e0:	31 05       	cpc	r19, r1
    26e2:	69 f0       	breq	.+26     	; 0x26fe <getpriority+0x5c>
    26e4:	8b 81       	ldd	r24, Y+3	; 0x03
    26e6:	9c 81       	ldd	r25, Y+4	; 0x04
    26e8:	8f 32       	cpi	r24, 0x2F	; 47
    26ea:	91 05       	cpc	r25, r1
    26ec:	19 f0       	breq	.+6      	; 0x26f4 <getpriority+0x52>
    26ee:	0a c0       	rjmp	.+20     	; 0x2704 <getpriority+0x62>
    {
    case '*':
         res=0;
    26f0:	19 82       	std	Y+1, r1	; 0x01
    26f2:	0a c0       	rjmp	.+20     	; 0x2708 <getpriority+0x66>
         break;
    case '/':
         res=0;
    26f4:	19 82       	std	Y+1, r1	; 0x01
    26f6:	08 c0       	rjmp	.+16     	; 0x2708 <getpriority+0x66>
         break;
    case '+':
         res=1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <getpriority+0x66>
         break;
    case '-':
         res=1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <getpriority+0x66>
         break;
    default:
        res=-1;
    2704:	8f ef       	ldi	r24, 0xFF	; 255
    2706:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
return res;
    2708:	89 81       	ldd	r24, Y+1	; 0x01
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <infixtopostfix>:
void infixtopostfix(struct Array * input,struct Array * op,struct Array *  expr )
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	2a 97       	sbiw	r28, 0x0a	; 10
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	78 87       	std	Y+8, r23	; 0x08
    2732:	6f 83       	std	Y+7, r22	; 0x07
    2734:	5a 87       	std	Y+10, r21	; 0x0a
    2736:	49 87       	std	Y+9, r20	; 0x09

        u8 priority;
    u8 operation,temp;
    for(u8 i=0;i<input->len;i++)
    2738:	19 82       	std	Y+1, r1	; 0x01
    273a:	8c c0       	rjmp	.+280    	; 0x2854 <infixtopostfix+0x13c>
    {

        if((input->data[i] >=48 && input->data[i] <= 57) || input->data[i] == ';' )
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	fc 01       	movw	r30, r24
    2748:	e2 0f       	add	r30, r18
    274a:	f3 1f       	adc	r31, r19
    274c:	80 81       	ld	r24, Z
    274e:	80 33       	cpi	r24, 0x30	; 48
    2750:	58 f0       	brcs	.+22     	; 0x2768 <infixtopostfix+0x50>
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	8a 33       	cpi	r24, 0x3A	; 58
    2766:	58 f0       	brcs	.+22     	; 0x277e <infixtopostfix+0x66>
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	fc 01       	movw	r30, r24
    2774:	e2 0f       	add	r30, r18
    2776:	f3 1f       	adc	r31, r19
    2778:	80 81       	ld	r24, Z
    277a:	8b 33       	cpi	r24, 0x3B	; 59
    277c:	79 f4       	brne	.+30     	; 0x279c <infixtopostfix+0x84>
        {

            S_push(expr,input->data[i]);
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	fc 01       	movw	r30, r24
    278a:	e2 0f       	add	r30, r18
    278c:	f3 1f       	adc	r31, r19
    278e:	20 81       	ld	r18, Z
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	62 2f       	mov	r22, r18
    2796:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>
    279a:	59 c0       	rjmp	.+178    	; 0x284e <infixtopostfix+0x136>
        }
        else
        {

           operation=input->data[i];
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	fc 01       	movw	r30, r24
    27a8:	e2 0f       	add	r30, r18
    27aa:	f3 1f       	adc	r31, r19
    27ac:	80 81       	ld	r24, Z
    27ae:	8b 83       	std	Y+3, r24	; 0x03
            priority=getpriority(operation);
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	0e 94 51 13 	call	0x26a2	; 0x26a2 <getpriority>
    27b6:	8c 83       	std	Y+4, r24	; 0x04
            if(priority != -1)
            {

                if(op->len==0)
    27b8:	ef 81       	ldd	r30, Y+7	; 0x07
    27ba:	f8 85       	ldd	r31, Y+8	; 0x08
    27bc:	80 89       	ldd	r24, Z+16	; 0x10
    27be:	88 23       	and	r24, r24
    27c0:	79 f4       	brne	.+30     	; 0x27e0 <infixtopostfix+0xc8>
                {

                    S_push(op,input->data[i]);
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	fc 01       	movw	r30, r24
    27ce:	e2 0f       	add	r30, r18
    27d0:	f3 1f       	adc	r31, r19
    27d2:	20 81       	ld	r18, Z
    27d4:	8f 81       	ldd	r24, Y+7	; 0x07
    27d6:	98 85       	ldd	r25, Y+8	; 0x08
    27d8:	62 2f       	mov	r22, r18
    27da:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>
    27de:	37 c0       	rjmp	.+110    	; 0x284e <infixtopostfix+0x136>
                }
                else
                {
                    if(priority<(getpriority(op->data[op->len-1])))
    27e0:	ef 81       	ldd	r30, Y+7	; 0x07
    27e2:	f8 85       	ldd	r31, Y+8	; 0x08
    27e4:	80 89       	ldd	r24, Z+16	; 0x10
    27e6:	88 2f       	mov	r24, r24
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	9c 01       	movw	r18, r24
    27ec:	21 50       	subi	r18, 0x01	; 1
    27ee:	30 40       	sbci	r19, 0x00	; 0
    27f0:	8f 81       	ldd	r24, Y+7	; 0x07
    27f2:	98 85       	ldd	r25, Y+8	; 0x08
    27f4:	fc 01       	movw	r30, r24
    27f6:	e2 0f       	add	r30, r18
    27f8:	f3 1f       	adc	r31, r19
    27fa:	80 81       	ld	r24, Z
    27fc:	0e 94 51 13 	call	0x26a2	; 0x26a2 <getpriority>
    2800:	98 2f       	mov	r25, r24
    2802:	8c 81       	ldd	r24, Y+4	; 0x04
    2804:	89 17       	cp	r24, r25
    2806:	c8 f4       	brcc	.+50     	; 0x283a <infixtopostfix+0x122>
                    {
                        S_push(op,input->data[i]);
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	fc 01       	movw	r30, r24
    2814:	e2 0f       	add	r30, r18
    2816:	f3 1f       	adc	r31, r19
    2818:	20 81       	ld	r18, Z
    281a:	8f 81       	ldd	r24, Y+7	; 0x07
    281c:	98 85       	ldd	r25, Y+8	; 0x08
    281e:	62 2f       	mov	r22, r18
    2820:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <infixtopostfix+0x136>
                    }
                    else
                    {
                        while (op->len !=0)
                        {
                            temp=S_pop(op);
    2826:	8f 81       	ldd	r24, Y+7	; 0x07
    2828:	98 85       	ldd	r25, Y+8	; 0x08
    282a:	0e 94 27 13 	call	0x264e	; 0x264e <S_pop>
    282e:	8a 83       	std	Y+2, r24	; 0x02
                            S_push(expr,temp);
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	6a 81       	ldd	r22, Y+2	; 0x02
    2836:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>
                    {
                        S_push(op,input->data[i]);
                    }
                    else
                    {
                        while (op->len !=0)
    283a:	ef 81       	ldd	r30, Y+7	; 0x07
    283c:	f8 85       	ldd	r31, Y+8	; 0x08
    283e:	80 89       	ldd	r24, Z+16	; 0x10
    2840:	88 23       	and	r24, r24
    2842:	89 f7       	brne	.-30     	; 0x2826 <infixtopostfix+0x10e>
                        {
                            temp=S_pop(op);
                            S_push(expr,temp);
                        }
                        S_push(op,operation);
    2844:	8f 81       	ldd	r24, Y+7	; 0x07
    2846:	98 85       	ldd	r25, Y+8	; 0x08
    2848:	6b 81       	ldd	r22, Y+3	; 0x03
    284a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>
void infixtopostfix(struct Array * input,struct Array * op,struct Array *  expr )
{

        u8 priority;
    u8 operation,temp;
    for(u8 i=0;i<input->len;i++)
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	8f 5f       	subi	r24, 0xFF	; 255
    2852:	89 83       	std	Y+1, r24	; 0x01
    2854:	ed 81       	ldd	r30, Y+5	; 0x05
    2856:	fe 81       	ldd	r31, Y+6	; 0x06
    2858:	90 89       	ldd	r25, Z+16	; 0x10
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	89 17       	cp	r24, r25
    285e:	08 f4       	brcc	.+2      	; 0x2862 <infixtopostfix+0x14a>
    2860:	6d cf       	rjmp	.-294    	; 0x273c <infixtopostfix+0x24>
    2862:	0a c0       	rjmp	.+20     	; 0x2878 <infixtopostfix+0x160>
            }
        }
    }
      while (op->len !=0)
                        {
                            temp=S_pop(op);
    2864:	8f 81       	ldd	r24, Y+7	; 0x07
    2866:	98 85       	ldd	r25, Y+8	; 0x08
    2868:	0e 94 27 13 	call	0x264e	; 0x264e <S_pop>
    286c:	8a 83       	std	Y+2, r24	; 0x02
                            S_push(expr,temp);
    286e:	89 85       	ldd	r24, Y+9	; 0x09
    2870:	9a 85       	ldd	r25, Y+10	; 0x0a
    2872:	6a 81       	ldd	r22, Y+2	; 0x02
    2874:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>
                    }
                }
            }
        }
    }
      while (op->len !=0)
    2878:	ef 81       	ldd	r30, Y+7	; 0x07
    287a:	f8 85       	ldd	r31, Y+8	; 0x08
    287c:	80 89       	ldd	r24, Z+16	; 0x10
    287e:	88 23       	and	r24, r24
    2880:	89 f7       	brne	.-30     	; 0x2864 <infixtopostfix+0x14c>
                        {
                            temp=S_pop(op);
                            S_push(expr,temp);
                        }

    S_push(expr,'=');
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	6d e3       	ldi	r22, 0x3D	; 61
    2888:	0e 94 ff 12 	call	0x25fe	; 0x25fe <S_push>

}
    288c:	2a 96       	adiw	r28, 0x0a	; 10
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <stoi>:
int stoi(char a[], int len) {
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	2a 97       	sbiw	r28, 0x0a	; 10
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	98 87       	std	Y+8, r25	; 0x08
    28b4:	8f 83       	std	Y+7, r24	; 0x07
    28b6:	7a 87       	std	Y+10, r23	; 0x0a
    28b8:	69 87       	std	Y+9, r22	; 0x09
    int res = 0;
    28ba:	1e 82       	std	Y+6, r1	; 0x06
    28bc:	1d 82       	std	Y+5, r1	; 0x05
    int i = 0;
    28be:	1c 82       	std	Y+4, r1	; 0x04
    28c0:	1b 82       	std	Y+3, r1	; 0x03
    int factor = 1; // Positional weight
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01

    // Start from the least significant digit
    for (i = len - 1; i >= 0; i--) {
    28ca:	89 85       	ldd	r24, Y+9	; 0x09
    28cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9c 83       	std	Y+4, r25	; 0x04
    28d2:	8b 83       	std	Y+3, r24	; 0x03
    28d4:	44 c0       	rjmp	.+136    	; 0x295e <stoi+0xc0>
        // Check if the character is a digit
        if (a[i] >= '0' && a[i] <= '9') {
    28d6:	2b 81       	ldd	r18, Y+3	; 0x03
    28d8:	3c 81       	ldd	r19, Y+4	; 0x04
    28da:	8f 81       	ldd	r24, Y+7	; 0x07
    28dc:	98 85       	ldd	r25, Y+8	; 0x08
    28de:	fc 01       	movw	r30, r24
    28e0:	e2 0f       	add	r30, r18
    28e2:	f3 1f       	adc	r31, r19
    28e4:	80 81       	ld	r24, Z
    28e6:	80 33       	cpi	r24, 0x30	; 48
    28e8:	a8 f1       	brcs	.+106    	; 0x2954 <stoi+0xb6>
    28ea:	2b 81       	ldd	r18, Y+3	; 0x03
    28ec:	3c 81       	ldd	r19, Y+4	; 0x04
    28ee:	8f 81       	ldd	r24, Y+7	; 0x07
    28f0:	98 85       	ldd	r25, Y+8	; 0x08
    28f2:	fc 01       	movw	r30, r24
    28f4:	e2 0f       	add	r30, r18
    28f6:	f3 1f       	adc	r31, r19
    28f8:	80 81       	ld	r24, Z
    28fa:	8a 33       	cpi	r24, 0x3A	; 58
    28fc:	58 f5       	brcc	.+86     	; 0x2954 <stoi+0xb6>
            // Convert the character to its integer value and add it to the result
            res += (a[i] - '0') * factor;
    28fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2900:	3c 81       	ldd	r19, Y+4	; 0x04
    2902:	8f 81       	ldd	r24, Y+7	; 0x07
    2904:	98 85       	ldd	r25, Y+8	; 0x08
    2906:	fc 01       	movw	r30, r24
    2908:	e2 0f       	add	r30, r18
    290a:	f3 1f       	adc	r31, r19
    290c:	80 81       	ld	r24, Z
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9c 01       	movw	r18, r24
    2914:	20 53       	subi	r18, 0x30	; 48
    2916:	30 40       	sbci	r19, 0x00	; 0
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	a9 01       	movw	r20, r18
    291e:	48 9f       	mul	r20, r24
    2920:	90 01       	movw	r18, r0
    2922:	49 9f       	mul	r20, r25
    2924:	30 0d       	add	r19, r0
    2926:	58 9f       	mul	r21, r24
    2928:	30 0d       	add	r19, r0
    292a:	11 24       	eor	r1, r1
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
    2930:	82 0f       	add	r24, r18
    2932:	93 1f       	adc	r25, r19
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
            // Update the positional weight for the next digit
            factor *= 10;
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	9c 01       	movw	r18, r24
    293e:	22 0f       	add	r18, r18
    2940:	33 1f       	adc	r19, r19
    2942:	c9 01       	movw	r24, r18
    2944:	88 0f       	add	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	82 0f       	add	r24, r18
    294e:	93 1f       	adc	r25, r19
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    int res = 0;
    int i = 0;
    int factor = 1; // Positional weight

    // Start from the least significant digit
    for (i = len - 1; i >= 0; i--) {
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	9c 83       	std	Y+4, r25	; 0x04
    295c:	8b 83       	std	Y+3, r24	; 0x03
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	99 23       	and	r25, r25
    2964:	0c f0       	brlt	.+2      	; 0x2968 <stoi+0xca>
    2966:	b7 cf       	rjmp	.-146    	; 0x28d6 <stoi+0x38>
            // Update the positional weight for the next digit
            factor *= 10;
        }

    }
    return res;
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
}
    296c:	2a 96       	adiw	r28, 0x0a	; 10
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <get_operand>:

struct Array get_operand(struct Array  * expression )
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	6f 97       	sbiw	r28, 0x1f	; 31
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	9a 8f       	std	Y+26, r25	; 0x1a
    2994:	89 8f       	std	Y+25, r24	; 0x19
    2996:	78 8f       	std	Y+24, r23	; 0x18
    2998:	6f 8b       	std	Y+23, r22	; 0x17
    struct Array oprand ={{0},0,16}; // this hold operand
    299a:	82 e1       	ldi	r24, 0x12	; 18
    299c:	fe 01       	movw	r30, r28
    299e:	35 96       	adiw	r30, 0x05	; 5
    29a0:	df 01       	movw	r26, r30
    29a2:	98 2f       	mov	r25, r24
    29a4:	1d 92       	st	X+, r1
    29a6:	9a 95       	dec	r25
    29a8:	e9 f7       	brne	.-6      	; 0x29a4 <get_operand+0x26>
    29aa:	80 e1       	ldi	r24, 0x10	; 16
    29ac:	8e 8b       	std	Y+22, r24	; 0x16
    int i=0;
    29ae:	1c 82       	std	Y+4, r1	; 0x04
    29b0:	1b 82       	std	Y+3, r1	; 0x03
    29b2:	18 c0       	rjmp	.+48     	; 0x29e4 <get_operand+0x66>


        while (expression->data[i]!= ';' && expression->data[i] >= '0' && expression->data[i]<='9')
    {
        /* code */
        oprand.data[i]=expression->data[i];
    29b4:	4b 81       	ldd	r20, Y+3	; 0x03
    29b6:	5c 81       	ldd	r21, Y+4	; 0x04
    29b8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ba:	3c 81       	ldd	r19, Y+4	; 0x04
    29bc:	8f 89       	ldd	r24, Y+23	; 0x17
    29be:	98 8d       	ldd	r25, Y+24	; 0x18
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	20 81       	ld	r18, Z
    29c8:	ce 01       	movw	r24, r28
    29ca:	05 96       	adiw	r24, 0x05	; 5
    29cc:	fc 01       	movw	r30, r24
    29ce:	e4 0f       	add	r30, r20
    29d0:	f5 1f       	adc	r31, r21
    29d2:	20 83       	st	Z, r18
        oprand.len++;
    29d4:	8d 89       	ldd	r24, Y+21	; 0x15
    29d6:	8f 5f       	subi	r24, 0xFF	; 255
    29d8:	8d 8b       	std	Y+21, r24	; 0x15
        i++;
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	9c 81       	ldd	r25, Y+4	; 0x04
    29de:	01 96       	adiw	r24, 0x01	; 1
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
{
    struct Array oprand ={{0},0,16}; // this hold operand
    int i=0;


        while (expression->data[i]!= ';' && expression->data[i] >= '0' && expression->data[i]<='9')
    29e4:	2b 81       	ldd	r18, Y+3	; 0x03
    29e6:	3c 81       	ldd	r19, Y+4	; 0x04
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	fc 01       	movw	r30, r24
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	80 81       	ld	r24, Z
    29f4:	8b 33       	cpi	r24, 0x3B	; 59
    29f6:	09 f4       	brne	.+2      	; 0x29fa <get_operand+0x7c>
    29f8:	49 c0       	rjmp	.+146    	; 0x2a8c <get_operand+0x10e>
    29fa:	2b 81       	ldd	r18, Y+3	; 0x03
    29fc:	3c 81       	ldd	r19, Y+4	; 0x04
    29fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2a00:	98 8d       	ldd	r25, Y+24	; 0x18
    2a02:	fc 01       	movw	r30, r24
    2a04:	e2 0f       	add	r30, r18
    2a06:	f3 1f       	adc	r31, r19
    2a08:	80 81       	ld	r24, Z
    2a0a:	80 33       	cpi	r24, 0x30	; 48
    2a0c:	08 f4       	brcc	.+2      	; 0x2a10 <get_operand+0x92>
    2a0e:	3e c0       	rjmp	.+124    	; 0x2a8c <get_operand+0x10e>
    2a10:	2b 81       	ldd	r18, Y+3	; 0x03
    2a12:	3c 81       	ldd	r19, Y+4	; 0x04
    2a14:	8f 89       	ldd	r24, Y+23	; 0x17
    2a16:	98 8d       	ldd	r25, Y+24	; 0x18
    2a18:	fc 01       	movw	r30, r24
    2a1a:	e2 0f       	add	r30, r18
    2a1c:	f3 1f       	adc	r31, r19
    2a1e:	80 81       	ld	r24, Z
    2a20:	8a 33       	cpi	r24, 0x3A	; 58
    2a22:	40 f2       	brcs	.-112    	; 0x29b4 <get_operand+0x36>
    2a24:	33 c0       	rjmp	.+102    	; 0x2a8c <get_operand+0x10e>
    }

    // shift the exprssion array left
    for(;i>=0;i--)
    {
        for(int j=i;j<expression->len;j++)
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	9a 83       	std	Y+2, r25	; 0x02
    2a2c:	89 83       	std	Y+1, r24	; 0x01
    2a2e:	18 c0       	rjmp	.+48     	; 0x2a60 <get_operand+0xe2>
        {
            expression->data[j]=expression->data[j+1];
    2a30:	49 81       	ldd	r20, Y+1	; 0x01
    2a32:	5a 81       	ldd	r21, Y+2	; 0x02
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	9c 01       	movw	r18, r24
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a40:	98 8d       	ldd	r25, Y+24	; 0x18
    2a42:	fc 01       	movw	r30, r24
    2a44:	e2 0f       	add	r30, r18
    2a46:	f3 1f       	adc	r31, r19
    2a48:	20 81       	ld	r18, Z
    2a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4e:	fc 01       	movw	r30, r24
    2a50:	e4 0f       	add	r30, r20
    2a52:	f5 1f       	adc	r31, r21
    2a54:	20 83       	st	Z, r18
    }

    // shift the exprssion array left
    for(;i>=0;i--)
    {
        for(int j=i;j<expression->len;j++)
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	ef 89       	ldd	r30, Y+23	; 0x17
    2a62:	f8 8d       	ldd	r31, Y+24	; 0x18
    2a64:	80 89       	ldd	r24, Z+16	; 0x10
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6e:	82 17       	cp	r24, r18
    2a70:	93 07       	cpc	r25, r19
    2a72:	f4 f2       	brlt	.-68     	; 0x2a30 <get_operand+0xb2>
        {
            expression->data[j]=expression->data[j+1];
        }
        expression->len--;
    2a74:	ef 89       	ldd	r30, Y+23	; 0x17
    2a76:	f8 8d       	ldd	r31, Y+24	; 0x18
    2a78:	80 89       	ldd	r24, Z+16	; 0x10
    2a7a:	81 50       	subi	r24, 0x01	; 1
    2a7c:	ef 89       	ldd	r30, Y+23	; 0x17
    2a7e:	f8 8d       	ldd	r31, Y+24	; 0x18
    2a80:	80 8b       	std	Z+16, r24	; 0x10
        oprand.len++;
        i++;
    }

    // shift the exprssion array left
    for(;i>=0;i--)
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	9c 83       	std	Y+4, r25	; 0x04
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a90:	99 23       	and	r25, r25
    2a92:	4c f6       	brge	.-110    	; 0x2a26 <get_operand+0xa8>
        {
            expression->data[j]=expression->data[j+1];
        }
        expression->len--;
    }
    return oprand;
    2a94:	a9 8d       	ldd	r26, Y+25	; 0x19
    2a96:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2a98:	bc 8f       	std	Y+28, r27	; 0x1c
    2a9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	35 96       	adiw	r30, 0x05	; 5
    2aa0:	fe 8f       	std	Y+30, r31	; 0x1e
    2aa2:	ed 8f       	std	Y+29, r30	; 0x1d
    2aa4:	f2 e1       	ldi	r31, 0x12	; 18
    2aa6:	ff 8f       	std	Y+31, r31	; 0x1f
    2aa8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2aaa:	be 8d       	ldd	r27, Y+30	; 0x1e
    2aac:	0c 90       	ld	r0, X
    2aae:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2ab0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2ab2:	31 96       	adiw	r30, 0x01	; 1
    2ab4:	fe 8f       	std	Y+30, r31	; 0x1e
    2ab6:	ed 8f       	std	Y+29, r30	; 0x1d
    2ab8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2aba:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2abc:	0c 92       	st	X, r0
    2abe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2ac0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2ac2:	31 96       	adiw	r30, 0x01	; 1
    2ac4:	fc 8f       	std	Y+28, r31	; 0x1c
    2ac6:	eb 8f       	std	Y+27, r30	; 0x1b
    2ac8:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2aca:	f1 50       	subi	r31, 0x01	; 1
    2acc:	ff 8f       	std	Y+31, r31	; 0x1f
    2ace:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad0:	88 23       	and	r24, r24
    2ad2:	51 f7       	brne	.-44     	; 0x2aa8 <get_operand+0x12a>
}
    2ad4:	89 8d       	ldd	r24, Y+25	; 0x19
    2ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ad8:	6f 96       	adiw	r28, 0x1f	; 31
    2ada:	0f b6       	in	r0, 0x3f	; 63
    2adc:	f8 94       	cli
    2ade:	de bf       	out	0x3e, r29	; 62
    2ae0:	0f be       	out	0x3f, r0	; 63
    2ae2:	cd bf       	out	0x3d, r28	; 61
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <get_opration>:
char get_opration(struct Array  * expression)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <get_opration+0x6>
    2af0:	0f 92       	push	r0
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
    2af6:	9b 83       	std	Y+3, r25	; 0x03
    2af8:	8a 83       	std	Y+2, r24	; 0x02
    char opreation ='?';
    2afa:	8f e3       	ldi	r24, 0x3F	; 63
    2afc:	89 83       	std	Y+1, r24	; 0x01
    if(expression->data[0] == '*' || expression->data[0] == '-' || expression->data[0] == '+' || expression->data[0] == '/' )
    2afe:	ea 81       	ldd	r30, Y+2	; 0x02
    2b00:	fb 81       	ldd	r31, Y+3	; 0x03
    2b02:	80 81       	ld	r24, Z
    2b04:	8a 32       	cpi	r24, 0x2A	; 42
    2b06:	79 f0       	breq	.+30     	; 0x2b26 <get_opration+0x3c>
    2b08:	ea 81       	ldd	r30, Y+2	; 0x02
    2b0a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8d 32       	cpi	r24, 0x2D	; 45
    2b10:	51 f0       	breq	.+20     	; 0x2b26 <get_opration+0x3c>
    2b12:	ea 81       	ldd	r30, Y+2	; 0x02
    2b14:	fb 81       	ldd	r31, Y+3	; 0x03
    2b16:	80 81       	ld	r24, Z
    2b18:	8b 32       	cpi	r24, 0x2B	; 43
    2b1a:	29 f0       	breq	.+10     	; 0x2b26 <get_opration+0x3c>
    2b1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b20:	80 81       	ld	r24, Z
    2b22:	8f 32       	cpi	r24, 0x2F	; 47
    2b24:	21 f4       	brne	.+8      	; 0x2b2e <get_opration+0x44>
        opreation = expression->data[0];
    2b26:	ea 81       	ldd	r30, Y+2	; 0x02
    2b28:	fb 81       	ldd	r31, Y+3	; 0x03
    2b2a:	80 81       	ld	r24, Z
    2b2c:	89 83       	std	Y+1, r24	; 0x01

        return opreation;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <main>:



int main (void)
{
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	e5 97       	sbiw	r28, 0x35	; 53
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
	int num1,num2;
	char opre;


	s8 CLCD_COL_POS=1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	88 8b       	std	Y+16, r24	; 0x10
	CLCD_voidInit();
    2b64:	0e 94 ad 1c 	call	0x395a	; 0x395a <CLCD_voidInit>
	KPD_voidInit();
    2b68:	0e 94 57 25 	call	0x4aae	; 0x4aae <KPD_voidInit>
	CLCD_voidSendCommand(CLCD_DISPON_CURSON);
    2b6c:	8e e0       	ldi	r24, 0x0E	; 14
    2b6e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
	CLCD_voidSendString("welcome ..!");
    2b72:	80 e6       	ldi	r24, 0x60	; 96
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	0e 94 c7 20 	call	0x418e	; 0x418e <CLCD_voidSendString>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e8       	ldi	r25, 0x80	; 128
    2b7e:	ab e3       	ldi	r26, 0x3B	; 59
    2b80:	b5 e4       	ldi	r27, 0x45	; 69
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <main+0x90>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <main+0x10e>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <main+0xf0>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <main+0xde>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <main+0xd2>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <main+0x11a>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
	CLCD_voidSendCommand(CLCD_CLR);
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <CLCD_voidSetPosition>

	while(1)
	{
		u8 LOC_input=0;
    2c6c:	1f 86       	std	Y+15, r1	; 0x0f
		LOC_input=KPD_u8GetPressed();
    2c6e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <KPD_u8GetPressed>
    2c72:	8f 87       	std	Y+15, r24	; 0x0f
		if(LOC_input !=0 )
    2c74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c76:	88 23       	and	r24, r24
    2c78:	c9 f3       	breq	.-14     	; 0x2c6c <main+0x130>
		{
			switch (LOC_input) {
    2c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	3b a7       	std	Y+43, r19	; 0x2b
    2c82:	2a a7       	std	Y+42, r18	; 0x2a
    2c84:	4a a5       	ldd	r20, Y+42	; 0x2a
    2c86:	5b a5       	ldd	r21, Y+43	; 0x2b
    2c88:	4d 33       	cpi	r20, 0x3D	; 61
    2c8a:	51 05       	cpc	r21, r1
    2c8c:	39 f0       	breq	.+14     	; 0x2c9c <main+0x160>
    2c8e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c90:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c92:	83 34       	cpi	r24, 0x43	; 67
    2c94:	91 05       	cpc	r25, r1
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <main+0x15e>
    2c98:	e9 c0       	rjmp	.+466    	; 0x2e6c <main+0x330>
    2c9a:	44 c1       	rjmp	.+648    	; 0x2f24 <main+0x3e8>
				case '=':
					// get the answer
				    infixtopostfix(&input,&op,&expr);
    2c9c:	84 e7       	ldi	r24, 0x74	; 116
    2c9e:	91 e0       	ldi	r25, 0x01	; 1
    2ca0:	26 e8       	ldi	r18, 0x86	; 134
    2ca2:	31 e0       	ldi	r19, 0x01	; 1
    2ca4:	48 e9       	ldi	r20, 0x98	; 152
    2ca6:	51 e0       	ldi	r21, 0x01	; 1
    2ca8:	b9 01       	movw	r22, r18
    2caa:	0e 94 8c 13 	call	0x2718	; 0x2718 <infixtopostfix>
					CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    2cae:	82 e0       	ldi	r24, 0x02	; 2
    2cb0:	61 e0       	ldi	r22, 0x01	; 1
    2cb2:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <CLCD_voidSetPosition>

			    	CLCD_voidSendString(expr.data);
    2cb6:	88 e9       	ldi	r24, 0x98	; 152
    2cb8:	91 e0       	ldi	r25, 0x01	; 1
    2cba:	0e 94 c7 20 	call	0x418e	; 0x418e <CLCD_voidSendString>

				    op1=get_operand(&expr);
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	46 96       	adiw	r24, 0x16	; 22
    2cc2:	28 e9       	ldi	r18, 0x98	; 152
    2cc4:	31 e0       	ldi	r19, 0x01	; 1
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	0e 94 bf 14 	call	0x297e	; 0x297e <get_operand>
    2ccc:	ea ea       	ldi	r30, 0xAA	; 170
    2cce:	f1 e0       	ldi	r31, 0x01	; 1
    2cd0:	fd a7       	std	Y+45, r31	; 0x2d
    2cd2:	ec a7       	std	Y+44, r30	; 0x2c
    2cd4:	9e 01       	movw	r18, r28
    2cd6:	2a 5e       	subi	r18, 0xEA	; 234
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	3f a7       	std	Y+47, r19	; 0x2f
    2cdc:	2e a7       	std	Y+46, r18	; 0x2e
    2cde:	32 e1       	ldi	r19, 0x12	; 18
    2ce0:	38 ab       	std	Y+48, r19	; 0x30
    2ce2:	ee a5       	ldd	r30, Y+46	; 0x2e
    2ce4:	ff a5       	ldd	r31, Y+47	; 0x2f
    2ce6:	00 80       	ld	r0, Z
    2ce8:	2e a5       	ldd	r18, Y+46	; 0x2e
    2cea:	3f a5       	ldd	r19, Y+47	; 0x2f
    2cec:	2f 5f       	subi	r18, 0xFF	; 255
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	3f a7       	std	Y+47, r19	; 0x2f
    2cf2:	2e a7       	std	Y+46, r18	; 0x2e
    2cf4:	ec a5       	ldd	r30, Y+44	; 0x2c
    2cf6:	fd a5       	ldd	r31, Y+45	; 0x2d
    2cf8:	00 82       	st	Z, r0
    2cfa:	2c a5       	ldd	r18, Y+44	; 0x2c
    2cfc:	3d a5       	ldd	r19, Y+45	; 0x2d
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	3d a7       	std	Y+45, r19	; 0x2d
    2d04:	2c a7       	std	Y+44, r18	; 0x2c
    2d06:	38 a9       	ldd	r19, Y+48	; 0x30
    2d08:	31 50       	subi	r19, 0x01	; 1
    2d0a:	38 ab       	std	Y+48, r19	; 0x30
    2d0c:	48 a9       	ldd	r20, Y+48	; 0x30
    2d0e:	44 23       	and	r20, r20
    2d10:	41 f7       	brne	.-48     	; 0x2ce2 <main+0x1a6>
				    num1=stoi(op1.data,op1.len);
    2d12:	80 91 ba 01 	lds	r24, 0x01BA
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	8a ea       	ldi	r24, 0xAA	; 170
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	b9 01       	movw	r22, r18
    2d20:	0e 94 4f 14 	call	0x289e	; 0x289e <stoi>
    2d24:	9d 8b       	std	Y+21, r25	; 0x15
    2d26:	8c 8b       	std	Y+20, r24	; 0x14
    2d28:	84 c0       	rjmp	.+264    	; 0x2e32 <main+0x2f6>
				    while (expr.data[0]!='=')
				    {
				        /* code */
				        op1=get_operand(&expr);
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	46 96       	adiw	r24, 0x16	; 22
    2d2e:	28 e9       	ldi	r18, 0x98	; 152
    2d30:	31 e0       	ldi	r19, 0x01	; 1
    2d32:	b9 01       	movw	r22, r18
    2d34:	0e 94 bf 14 	call	0x297e	; 0x297e <get_operand>
    2d38:	8a ea       	ldi	r24, 0xAA	; 170
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	9a ab       	std	Y+50, r25	; 0x32
    2d3e:	89 ab       	std	Y+49, r24	; 0x31
    2d40:	fe 01       	movw	r30, r28
    2d42:	76 96       	adiw	r30, 0x16	; 22
    2d44:	fc ab       	std	Y+52, r31	; 0x34
    2d46:	eb ab       	std	Y+51, r30	; 0x33
    2d48:	f2 e1       	ldi	r31, 0x12	; 18
    2d4a:	fd ab       	std	Y+53, r31	; 0x35
    2d4c:	eb a9       	ldd	r30, Y+51	; 0x33
    2d4e:	fc a9       	ldd	r31, Y+52	; 0x34
    2d50:	00 80       	ld	r0, Z
    2d52:	2b a9       	ldd	r18, Y+51	; 0x33
    2d54:	3c a9       	ldd	r19, Y+52	; 0x34
    2d56:	2f 5f       	subi	r18, 0xFF	; 255
    2d58:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5a:	3c ab       	std	Y+52, r19	; 0x34
    2d5c:	2b ab       	std	Y+51, r18	; 0x33
    2d5e:	e9 a9       	ldd	r30, Y+49	; 0x31
    2d60:	fa a9       	ldd	r31, Y+50	; 0x32
    2d62:	00 82       	st	Z, r0
    2d64:	29 a9       	ldd	r18, Y+49	; 0x31
    2d66:	3a a9       	ldd	r19, Y+50	; 0x32
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	3a ab       	std	Y+50, r19	; 0x32
    2d6e:	29 ab       	std	Y+49, r18	; 0x31
    2d70:	3d a9       	ldd	r19, Y+53	; 0x35
    2d72:	31 50       	subi	r19, 0x01	; 1
    2d74:	3d ab       	std	Y+53, r19	; 0x35
    2d76:	4d a9       	ldd	r20, Y+53	; 0x35
    2d78:	44 23       	and	r20, r20
    2d7a:	41 f7       	brne	.-48     	; 0x2d4c <main+0x210>
				        num2=stoi(op1.data,op1.len);
    2d7c:	80 91 ba 01 	lds	r24, 0x01BA
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	8a ea       	ldi	r24, 0xAA	; 170
    2d86:	91 e0       	ldi	r25, 0x01	; 1
    2d88:	b9 01       	movw	r22, r18
    2d8a:	0e 94 4f 14 	call	0x289e	; 0x289e <stoi>
    2d8e:	9b 8b       	std	Y+19, r25	; 0x13
    2d90:	8a 8b       	std	Y+18, r24	; 0x12
				        opre=get_opration(&expr);
    2d92:	88 e9       	ldi	r24, 0x98	; 152
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	0e 94 75 15 	call	0x2aea	; 0x2aea <get_opration>
    2d9a:	89 8b       	std	Y+17, r24	; 0x11
				        switch (opre)
    2d9c:	89 89       	ldd	r24, Y+17	; 0x11
    2d9e:	e8 2f       	mov	r30, r24
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	f9 a7       	std	Y+41, r31	; 0x29
    2da4:	e8 a7       	std	Y+40, r30	; 0x28
    2da6:	28 a5       	ldd	r18, Y+40	; 0x28
    2da8:	39 a5       	ldd	r19, Y+41	; 0x29
    2daa:	2b 32       	cpi	r18, 0x2B	; 43
    2dac:	31 05       	cpc	r19, r1
    2dae:	81 f1       	breq	.+96     	; 0x2e10 <main+0x2d4>
    2db0:	48 a5       	ldd	r20, Y+40	; 0x28
    2db2:	59 a5       	ldd	r21, Y+41	; 0x29
    2db4:	4c 32       	cpi	r20, 0x2C	; 44
    2db6:	51 05       	cpc	r21, r1
    2db8:	34 f4       	brge	.+12     	; 0x2dc6 <main+0x28a>
    2dba:	88 a5       	ldd	r24, Y+40	; 0x28
    2dbc:	99 a5       	ldd	r25, Y+41	; 0x29
    2dbe:	8a 32       	cpi	r24, 0x2A	; 42
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	61 f0       	breq	.+24     	; 0x2ddc <main+0x2a0>
    2dc4:	36 c0       	rjmp	.+108    	; 0x2e32 <main+0x2f6>
    2dc6:	e8 a5       	ldd	r30, Y+40	; 0x28
    2dc8:	f9 a5       	ldd	r31, Y+41	; 0x29
    2dca:	ed 32       	cpi	r30, 0x2D	; 45
    2dcc:	f1 05       	cpc	r31, r1
    2dce:	49 f1       	breq	.+82     	; 0x2e22 <main+0x2e6>
    2dd0:	28 a5       	ldd	r18, Y+40	; 0x28
    2dd2:	39 a5       	ldd	r19, Y+41	; 0x29
    2dd4:	2f 32       	cpi	r18, 0x2F	; 47
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	81 f0       	breq	.+32     	; 0x2dfa <main+0x2be>
    2dda:	2b c0       	rjmp	.+86     	; 0x2e32 <main+0x2f6>
				        {
				        case '*':
				            num1=num1*num2;
    2ddc:	8c 89       	ldd	r24, Y+20	; 0x14
    2dde:	9d 89       	ldd	r25, Y+21	; 0x15
    2de0:	2a 89       	ldd	r18, Y+18	; 0x12
    2de2:	3b 89       	ldd	r19, Y+19	; 0x13
    2de4:	ac 01       	movw	r20, r24
    2de6:	42 9f       	mul	r20, r18
    2de8:	c0 01       	movw	r24, r0
    2dea:	43 9f       	mul	r20, r19
    2dec:	90 0d       	add	r25, r0
    2dee:	52 9f       	mul	r21, r18
    2df0:	90 0d       	add	r25, r0
    2df2:	11 24       	eor	r1, r1
    2df4:	9d 8b       	std	Y+21, r25	; 0x15
    2df6:	8c 8b       	std	Y+20, r24	; 0x14
    2df8:	1c c0       	rjmp	.+56     	; 0x2e32 <main+0x2f6>
				            /* code */
				            break;
				        case '/':
				            num1=num1/num2;
    2dfa:	8c 89       	ldd	r24, Y+20	; 0x14
    2dfc:	9d 89       	ldd	r25, Y+21	; 0x15
    2dfe:	2a 89       	ldd	r18, Y+18	; 0x12
    2e00:	3b 89       	ldd	r19, Y+19	; 0x13
    2e02:	b9 01       	movw	r22, r18
    2e04:	0e 94 93 26 	call	0x4d26	; 0x4d26 <__divmodhi4>
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9d 8b       	std	Y+21, r25	; 0x15
    2e0c:	8c 8b       	std	Y+20, r24	; 0x14
    2e0e:	11 c0       	rjmp	.+34     	; 0x2e32 <main+0x2f6>
				            /* code */
				            break;
				        case '+':
				            num1=num1+num2;
    2e10:	8c 89       	ldd	r24, Y+20	; 0x14
    2e12:	9d 89       	ldd	r25, Y+21	; 0x15
    2e14:	2a 89       	ldd	r18, Y+18	; 0x12
    2e16:	3b 89       	ldd	r19, Y+19	; 0x13
    2e18:	82 0f       	add	r24, r18
    2e1a:	93 1f       	adc	r25, r19
    2e1c:	9d 8b       	std	Y+21, r25	; 0x15
    2e1e:	8c 8b       	std	Y+20, r24	; 0x14
    2e20:	08 c0       	rjmp	.+16     	; 0x2e32 <main+0x2f6>
				            /* code */
				            break;
				         case '-':
				            num1=num1-num2;
    2e22:	8c 89       	ldd	r24, Y+20	; 0x14
    2e24:	9d 89       	ldd	r25, Y+21	; 0x15
    2e26:	2a 89       	ldd	r18, Y+18	; 0x12
    2e28:	3b 89       	ldd	r19, Y+19	; 0x13
    2e2a:	82 1b       	sub	r24, r18
    2e2c:	93 0b       	sbc	r25, r19
    2e2e:	9d 8b       	std	Y+21, r25	; 0x15
    2e30:	8c 8b       	std	Y+20, r24	; 0x14

			    	CLCD_voidSendString(expr.data);

				    op1=get_operand(&expr);
				    num1=stoi(op1.data,op1.len);
				    while (expr.data[0]!='=')
    2e32:	80 91 98 01 	lds	r24, 0x0198
    2e36:	8d 33       	cpi	r24, 0x3D	; 61
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <main+0x300>
    2e3a:	77 cf       	rjmp	.-274    	; 0x2d2a <main+0x1ee>
				        }

				    }
				//	CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);

					CLCD_voidSendNumber(num1);
    2e3c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e3e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e40:	99 0f       	add	r25, r25
    2e42:	88 0b       	sbc	r24, r24
    2e44:	98 2f       	mov	r25, r24
    2e46:	ac 88       	ldd	r10, Y+20	; 0x14
    2e48:	bd 88       	ldd	r11, Y+21	; 0x15
    2e4a:	c8 2e       	mov	r12, r24
    2e4c:	d8 2e       	mov	r13, r24
    2e4e:	e8 2e       	mov	r14, r24
    2e50:	f8 2e       	mov	r15, r24
    2e52:	08 2f       	mov	r16, r24
    2e54:	18 2f       	mov	r17, r24
    2e56:	2a 2d       	mov	r18, r10
    2e58:	3b 2d       	mov	r19, r11
    2e5a:	4c 2d       	mov	r20, r12
    2e5c:	5d 2d       	mov	r21, r13
    2e5e:	6e 2d       	mov	r22, r14
    2e60:	7f 2d       	mov	r23, r15
    2e62:	80 2f       	mov	r24, r16
    2e64:	91 2f       	mov	r25, r17
    2e66:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <CLCD_voidSendNumber>
    2e6a:	00 cf       	rjmp	.-512    	; 0x2c6c <main+0x130>

					break;
				case 'C':
					// delete the last input only

					if(CLCD_COL_POS >= 0)
    2e6c:	88 89       	ldd	r24, Y+16	; 0x10
    2e6e:	88 23       	and	r24, r24
    2e70:	0c f4       	brge	.+2      	; 0x2e74 <main+0x338>
    2e72:	4f c0       	rjmp	.+158    	; 0x2f12 <main+0x3d6>
					{
						CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_POS-1);
    2e74:	88 89       	ldd	r24, Y+16	; 0x10
    2e76:	98 2f       	mov	r25, r24
    2e78:	91 50       	subi	r25, 0x01	; 1
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	69 2f       	mov	r22, r25
    2e7e:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <CLCD_voidSetPosition>
						CLCD_voidSendChar(' ');
    2e82:	80 e2       	ldi	r24, 0x20	; 32
    2e84:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <CLCD_voidSendChar>
					    CLCD_voidSetPosition(CLCD_ROW_1,--CLCD_COL_POS);
    2e88:	88 89       	ldd	r24, Y+16	; 0x10
    2e8a:	81 50       	subi	r24, 0x01	; 1
    2e8c:	88 8b       	std	Y+16, r24	; 0x10
    2e8e:	98 89       	ldd	r25, Y+16	; 0x10
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	69 2f       	mov	r22, r25
    2e94:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <CLCD_voidSetPosition>

						if(input.data[input.len] >= 48 && input.data[input.len] <= 57)
    2e98:	80 91 84 01 	lds	r24, 0x0184
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	ec 58       	subi	r30, 0x8C	; 140
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	80 81       	ld	r24, Z
    2ea8:	80 33       	cpi	r24, 0x30	; 48
    2eaa:	c0 f0       	brcs	.+48     	; 0x2edc <main+0x3a0>
    2eac:	80 91 84 01 	lds	r24, 0x0184
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	ec 58       	subi	r30, 0x8C	; 140
    2eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eba:	80 81       	ld	r24, Z
    2ebc:	8a 33       	cpi	r24, 0x3A	; 58
    2ebe:	70 f4       	brcc	.+28     	; 0x2edc <main+0x3a0>
						{
							input.data[input.len--]='f';
    2ec0:	20 91 84 01 	lds	r18, 0x0184
    2ec4:	82 2f       	mov	r24, r18
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	fc 01       	movw	r30, r24
    2eca:	ec 58       	subi	r30, 0x8C	; 140
    2ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ece:	86 e6       	ldi	r24, 0x66	; 102
    2ed0:	80 83       	st	Z, r24
    2ed2:	82 2f       	mov	r24, r18
    2ed4:	81 50       	subi	r24, 0x01	; 1
    2ed6:	80 93 84 01 	sts	0x0184, r24
    2eda:	c8 ce       	rjmp	.-624    	; 0x2c6c <main+0x130>
						}
						else
						{
							input.data[input.len--]='f';
    2edc:	20 91 84 01 	lds	r18, 0x0184
    2ee0:	82 2f       	mov	r24, r18
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	ec 58       	subi	r30, 0x8C	; 140
    2ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eea:	86 e6       	ldi	r24, 0x66	; 102
    2eec:	80 83       	st	Z, r24
    2eee:	82 2f       	mov	r24, r18
    2ef0:	81 50       	subi	r24, 0x01	; 1
    2ef2:	80 93 84 01 	sts	0x0184, r24
							input.data[input.len--]='f';
    2ef6:	20 91 84 01 	lds	r18, 0x0184
    2efa:	82 2f       	mov	r24, r18
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	fc 01       	movw	r30, r24
    2f00:	ec 58       	subi	r30, 0x8C	; 140
    2f02:	fe 4f       	sbci	r31, 0xFE	; 254
    2f04:	86 e6       	ldi	r24, 0x66	; 102
    2f06:	80 83       	st	Z, r24
    2f08:	82 2f       	mov	r24, r18
    2f0a:	81 50       	subi	r24, 0x01	; 1
    2f0c:	80 93 84 01 	sts	0x0184, r24
    2f10:	ad ce       	rjmp	.-678    	; 0x2c6c <main+0x130>


					}
					else
					{
						CLCD_voidSendCommand(CLCD_CLR);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
						CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <CLCD_voidSetPosition>
						CLCD_COL_POS=0;
    2f20:	18 8a       	std	Y+16, r1	; 0x10
    2f22:	a4 ce       	rjmp	.-696    	; 0x2c6c <main+0x130>

					break;

				default:
					// put the LOC on input array
					if(LOC_input >= 48 && LOC_input <= 57)
    2f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f26:	80 33       	cpi	r24, 0x30	; 48
    2f28:	b8 f0       	brcs	.+46     	; 0x2f58 <main+0x41c>
    2f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2c:	8a 33       	cpi	r24, 0x3A	; 58
    2f2e:	a0 f4       	brcc	.+40     	; 0x2f58 <main+0x41c>
					{
						// insert the input to input array and increment the position pointer

					input.data[input.len++]=LOC_input;
    2f30:	20 91 84 01 	lds	r18, 0x0184
    2f34:	82 2f       	mov	r24, r18
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	fc 01       	movw	r30, r24
    2f3a:	ec 58       	subi	r30, 0x8C	; 140
    2f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f40:	80 83       	st	Z, r24
    2f42:	82 2f       	mov	r24, r18
    2f44:	8f 5f       	subi	r24, 0xFF	; 255
    2f46:	80 93 84 01 	sts	0x0184, r24
					CLCD_voidSendChar(LOC_input);
    2f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4c:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <CLCD_voidSendChar>
					CLCD_COL_POS++;
    2f50:	88 89       	ldd	r24, Y+16	; 0x10
    2f52:	8f 5f       	subi	r24, 0xFF	; 255
    2f54:	88 8b       	std	Y+16, r24	; 0x10
    2f56:	8a ce       	rjmp	.-748    	; 0x2c6c <main+0x130>
					}
					else
					{
						input.data[input.len++]=';';
    2f58:	20 91 84 01 	lds	r18, 0x0184
    2f5c:	82 2f       	mov	r24, r18
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	fc 01       	movw	r30, r24
    2f62:	ec 58       	subi	r30, 0x8C	; 140
    2f64:	fe 4f       	sbci	r31, 0xFE	; 254
    2f66:	8b e3       	ldi	r24, 0x3B	; 59
    2f68:	80 83       	st	Z, r24
    2f6a:	82 2f       	mov	r24, r18
    2f6c:	8f 5f       	subi	r24, 0xFF	; 255
    2f6e:	80 93 84 01 	sts	0x0184, r24
						input.data[input.len++]=LOC_input;
    2f72:	20 91 84 01 	lds	r18, 0x0184
    2f76:	82 2f       	mov	r24, r18
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	ec 58       	subi	r30, 0x8C	; 140
    2f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f82:	80 83       	st	Z, r24
    2f84:	82 2f       	mov	r24, r18
    2f86:	8f 5f       	subi	r24, 0xFF	; 255
    2f88:	80 93 84 01 	sts	0x0184, r24
						CLCD_voidSendChar(LOC_input);
    2f8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f8e:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <CLCD_voidSendChar>
						CLCD_COL_POS++;
    2f92:	88 89       	ldd	r24, Y+16	; 0x10
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	88 8b       	std	Y+16, r24	; 0x10
    2f98:	69 ce       	rjmp	.-814    	; 0x2c6c <main+0x130>

00002f9a <DIO_enumSetPortDirection>:
#include "DIO_private.h"
#include "DIO_interface.h"


 DIO_ErroStatus DIO_enumSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
 {
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <DIO_enumSetPortDirection+0x6>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <DIO_enumSetPortDirection+0x8>
    2fa2:	0f 92       	push	r0
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
    2faa:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Port)
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	3d 83       	std	Y+5, r19	; 0x05
    2fb8:	2c 83       	std	Y+4, r18	; 0x04
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	91 05       	cpc	r25, r1
    2fc2:	39 f1       	breq	.+78     	; 0x3012 <DIO_enumSetPortDirection+0x78>
    2fc4:	2c 81       	ldd	r18, Y+4	; 0x04
    2fc6:	3d 81       	ldd	r19, Y+5	; 0x05
    2fc8:	23 30       	cpi	r18, 0x03	; 3
    2fca:	31 05       	cpc	r19, r1
    2fcc:	34 f4       	brge	.+12     	; 0x2fda <DIO_enumSetPortDirection+0x40>
    2fce:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd2:	81 30       	cpi	r24, 0x01	; 1
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	61 f0       	breq	.+24     	; 0x2ff0 <DIO_enumSetPortDirection+0x56>
    2fd8:	4f c0       	rjmp	.+158    	; 0x3078 <DIO_enumSetPortDirection+0xde>
    2fda:	2c 81       	ldd	r18, Y+4	; 0x04
    2fdc:	3d 81       	ldd	r19, Y+5	; 0x05
    2fde:	23 30       	cpi	r18, 0x03	; 3
    2fe0:	31 05       	cpc	r19, r1
    2fe2:	41 f1       	breq	.+80     	; 0x3034 <DIO_enumSetPortDirection+0x9a>
    2fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe8:	84 30       	cpi	r24, 0x04	; 4
    2fea:	91 05       	cpc	r25, r1
    2fec:	a1 f1       	breq	.+104    	; 0x3056 <DIO_enumSetPortDirection+0xbc>
    2fee:	44 c0       	rjmp	.+136    	; 0x3078 <DIO_enumSetPortDirection+0xde>
    {

        case DIO_PORTA : 
                        if(Copy_u8Direction == DIO_OUTPUT)
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <DIO_enumSetPortDirection+0x66>
                           {
                                DDRA_REG =0xff; 
    2ff6:	ea e3       	ldi	r30, 0x3A	; 58
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	8f ef       	ldi	r24, 0xFF	; 255
    2ffc:	80 83       	st	Z, r24
    2ffe:	3d c0       	rjmp	.+122    	; 0x307a <DIO_enumSetPortDirection+0xe0>
                           } 
                        else if(Copy_u8Direction == DIO_INPUT)
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	88 23       	and	r24, r24
    3004:	21 f4       	brne	.+8      	; 0x300e <DIO_enumSetPortDirection+0x74>
                          {  
                                DDRA_REG=0x00;
    3006:	ea e3       	ldi	r30, 0x3A	; 58
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	10 82       	st	Z, r1
    300c:	36 c0       	rjmp	.+108    	; 0x307a <DIO_enumSetPortDirection+0xe0>
                          }
                          else
                          {
                            /**/
                        	  LOC_enumState=DIO_NOK;
    300e:	19 82       	std	Y+1, r1	; 0x01
    3010:	34 c0       	rjmp	.+104    	; 0x307a <DIO_enumSetPortDirection+0xe0>
                          }
                    break;
        case DIO_PORTB :
                        if(Copy_u8Direction == DIO_OUTPUT)
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	81 30       	cpi	r24, 0x01	; 1
    3016:	29 f4       	brne	.+10     	; 0x3022 <DIO_enumSetPortDirection+0x88>
                            {
                                DDRB_REG =0xff; 
    3018:	e7 e3       	ldi	r30, 0x37	; 55
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	8f ef       	ldi	r24, 0xFF	; 255
    301e:	80 83       	st	Z, r24
    3020:	2c c0       	rjmp	.+88     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                        else if(Copy_u8Direction == DIO_INPUT)
    3022:	8b 81       	ldd	r24, Y+3	; 0x03
    3024:	88 23       	and	r24, r24
    3026:	21 f4       	brne	.+8      	; 0x3030 <DIO_enumSetPortDirection+0x96>
                            {
                                DDRB_REG=0x00;
    3028:	e7 e3       	ldi	r30, 0x37	; 55
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	10 82       	st	Z, r1
    302e:	25 c0       	rjmp	.+74     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
    3030:	19 82       	std	Y+1, r1	; 0x01
    3032:	23 c0       	rjmp	.+70     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                    break;
        case DIO_PORTC : 
                        if(Copy_u8Direction == DIO_OUTPUT)
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	29 f4       	brne	.+10     	; 0x3044 <DIO_enumSetPortDirection+0xaa>
                            {
                                DDRC_REG =0xff; 
    303a:	e4 e3       	ldi	r30, 0x34	; 52
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	8f ef       	ldi	r24, 0xFF	; 255
    3040:	80 83       	st	Z, r24
    3042:	1b c0       	rjmp	.+54     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                        else if (Copy_u8Direction == DIO_INPUT)
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	88 23       	and	r24, r24
    3048:	21 f4       	brne	.+8      	; 0x3052 <DIO_enumSetPortDirection+0xb8>
                            {
                                DDRC_REG=0x00;
    304a:	e4 e3       	ldi	r30, 0x34	; 52
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	10 82       	st	Z, r1
    3050:	14 c0       	rjmp	.+40     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
    3052:	19 82       	std	Y+1, r1	; 0x01
    3054:	12 c0       	rjmp	.+36     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                    break;
        case DIO_PORTD : 
                        if(Copy_u8Direction == DIO_OUTPUT)
    3056:	8b 81       	ldd	r24, Y+3	; 0x03
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	29 f4       	brne	.+10     	; 0x3066 <DIO_enumSetPortDirection+0xcc>
                            {
                                DDRD_REG =0xff; 
    305c:	e1 e3       	ldi	r30, 0x31	; 49
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	8f ef       	ldi	r24, 0xFF	; 255
    3062:	80 83       	st	Z, r24
    3064:	0a c0       	rjmp	.+20     	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                        else if (Copy_u8Direction==DIO_INPUT)
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	88 23       	and	r24, r24
    306a:	21 f4       	brne	.+8      	; 0x3074 <DIO_enumSetPortDirection+0xda>
                            {
                                DDRD_REG=0x00;
    306c:	e1 e3       	ldi	r30, 0x31	; 49
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	10 82       	st	Z, r1
    3072:	03 c0       	rjmp	.+6      	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
    3074:	19 82       	std	Y+1, r1	; 0x01
    3076:	01 c0       	rjmp	.+2      	; 0x307a <DIO_enumSetPortDirection+0xe0>
                            }
                    break;

        default:
      	  LOC_enumState=DIO_NOK;
    3078:	19 82       	std	Y+1, r1	; 0x01

    }
return    LOC_enumState;
    307a:	89 81       	ldd	r24, Y+1	; 0x01
 }
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <DIO_enumSetPortValue>:
 DIO_ErroStatus DIO_enumSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value    )
 {
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	00 d0       	rcall	.+0      	; 0x3092 <DIO_enumSetPortValue+0x6>
    3092:	00 d0       	rcall	.+0      	; 0x3094 <DIO_enumSetPortValue+0x8>
    3094:	0f 92       	push	r0
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	8a 83       	std	Y+2, r24	; 0x02
    309c:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	89 83       	std	Y+1, r24	; 0x01

     switch(Copy_u8Port)
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	3d 83       	std	Y+5, r19	; 0x05
    30aa:	2c 83       	std	Y+4, r18	; 0x04
    30ac:	8c 81       	ldd	r24, Y+4	; 0x04
    30ae:	9d 81       	ldd	r25, Y+5	; 0x05
    30b0:	82 30       	cpi	r24, 0x02	; 2
    30b2:	91 05       	cpc	r25, r1
    30b4:	d9 f0       	breq	.+54     	; 0x30ec <DIO_enumSetPortValue+0x60>
    30b6:	2c 81       	ldd	r18, Y+4	; 0x04
    30b8:	3d 81       	ldd	r19, Y+5	; 0x05
    30ba:	23 30       	cpi	r18, 0x03	; 3
    30bc:	31 05       	cpc	r19, r1
    30be:	34 f4       	brge	.+12     	; 0x30cc <DIO_enumSetPortValue+0x40>
    30c0:	8c 81       	ldd	r24, Y+4	; 0x04
    30c2:	9d 81       	ldd	r25, Y+5	; 0x05
    30c4:	81 30       	cpi	r24, 0x01	; 1
    30c6:	91 05       	cpc	r25, r1
    30c8:	61 f0       	breq	.+24     	; 0x30e2 <DIO_enumSetPortValue+0x56>
    30ca:	1f c0       	rjmp	.+62     	; 0x310a <DIO_enumSetPortValue+0x7e>
    30cc:	2c 81       	ldd	r18, Y+4	; 0x04
    30ce:	3d 81       	ldd	r19, Y+5	; 0x05
    30d0:	23 30       	cpi	r18, 0x03	; 3
    30d2:	31 05       	cpc	r19, r1
    30d4:	81 f0       	breq	.+32     	; 0x30f6 <DIO_enumSetPortValue+0x6a>
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	9d 81       	ldd	r25, Y+5	; 0x05
    30da:	84 30       	cpi	r24, 0x04	; 4
    30dc:	91 05       	cpc	r25, r1
    30de:	81 f0       	breq	.+32     	; 0x3100 <DIO_enumSetPortValue+0x74>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <DIO_enumSetPortValue+0x7e>
    {
        case DIO_PORTA : 
                        if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
                           {
                                PORTA_REG =Copy_u8Value;
    30e2:	eb e3       	ldi	r30, 0x3B	; 59
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	80 83       	st	Z, r24
    30ea:	10 c0       	rjmp	.+32     	; 0x310c <DIO_enumSetPortValue+0x80>
                          }
                    break;
        case DIO_PORTB :
        	  if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
        	                           {
        	                                PORTB_REG =Copy_u8Value;
    30ec:	e8 e3       	ldi	r30, 0x38	; 56
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	80 83       	st	Z, r24
    30f4:	0b c0       	rjmp	.+22     	; 0x310c <DIO_enumSetPortValue+0x80>
        	                          }
        	                    break;
        case DIO_PORTC : 
        	  if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
        	                           {
        	                                PORTC_REG =Copy_u8Value;
    30f6:	e5 e3       	ldi	r30, 0x35	; 53
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	80 83       	st	Z, r24
    30fe:	06 c0       	rjmp	.+12     	; 0x310c <DIO_enumSetPortValue+0x80>
        	                          }
        	                    break;
        case DIO_PORTD : 
        	  if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
        	                           {
        	                                PORTD_REG =Copy_u8Value;
    3100:	e2 e3       	ldi	r30, 0x32	; 50
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	80 83       	st	Z, r24
    3108:	01 c0       	rjmp	.+2      	; 0x310c <DIO_enumSetPortValue+0x80>
        	                            /**/
        	                         	  LOC_enumState=DIO_NOK;
        	                          }
        	                    break;
        default:
       	  LOC_enumState=DIO_NOK;
    310a:	19 82       	std	Y+1, r1	; 0x01

     }
 return    LOC_enumState;
    310c:	89 81       	ldd	r24, Y+1	; 0x01
 }
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <DIO_enumSetPINDirection>:

 DIO_ErroStatus DIO_enumSetPINDirection(u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 Copy_u8Direction)
 {
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	00 d0       	rcall	.+0      	; 0x3124 <DIO_enumSetPINDirection+0x6>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <DIO_enumSetPINDirection+0x8>
    3126:	00 d0       	rcall	.+0      	; 0x3128 <DIO_enumSetPINDirection+0xa>
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	8a 83       	std	Y+2, r24	; 0x02
    312e:	6b 83       	std	Y+3, r22	; 0x03
    3130:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErroStatus LOC_enumState = DIO_OK;
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	88 30       	cpi	r24, 0x08	; 8
    313a:	08 f0       	brcs	.+2      	; 0x313e <DIO_enumSetPINDirection+0x20>
    313c:	e9 c0       	rjmp	.+466    	; 0x3310 <DIO_enumSetPINDirection+0x1f2>
	{
		 switch(Copy_u8Port)
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	28 2f       	mov	r18, r24
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	3e 83       	std	Y+6, r19	; 0x06
    3146:	2d 83       	std	Y+5, r18	; 0x05
    3148:	8d 81       	ldd	r24, Y+5	; 0x05
    314a:	9e 81       	ldd	r25, Y+6	; 0x06
    314c:	82 30       	cpi	r24, 0x02	; 2
    314e:	91 05       	cpc	r25, r1
    3150:	09 f4       	brne	.+2      	; 0x3154 <DIO_enumSetPINDirection+0x36>
    3152:	49 c0       	rjmp	.+146    	; 0x31e6 <DIO_enumSetPINDirection+0xc8>
    3154:	2d 81       	ldd	r18, Y+5	; 0x05
    3156:	3e 81       	ldd	r19, Y+6	; 0x06
    3158:	23 30       	cpi	r18, 0x03	; 3
    315a:	31 05       	cpc	r19, r1
    315c:	34 f4       	brge	.+12     	; 0x316a <DIO_enumSetPINDirection+0x4c>
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	91 05       	cpc	r25, r1
    3166:	71 f0       	breq	.+28     	; 0x3184 <DIO_enumSetPINDirection+0x66>
    3168:	d1 c0       	rjmp	.+418    	; 0x330c <DIO_enumSetPINDirection+0x1ee>
    316a:	2d 81       	ldd	r18, Y+5	; 0x05
    316c:	3e 81       	ldd	r19, Y+6	; 0x06
    316e:	23 30       	cpi	r18, 0x03	; 3
    3170:	31 05       	cpc	r19, r1
    3172:	09 f4       	brne	.+2      	; 0x3176 <DIO_enumSetPINDirection+0x58>
    3174:	69 c0       	rjmp	.+210    	; 0x3248 <DIO_enumSetPINDirection+0x12a>
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	84 30       	cpi	r24, 0x04	; 4
    317c:	91 05       	cpc	r25, r1
    317e:	09 f4       	brne	.+2      	; 0x3182 <DIO_enumSetPINDirection+0x64>
    3180:	94 c0       	rjmp	.+296    	; 0x32aa <DIO_enumSetPINDirection+0x18c>
    3182:	c4 c0       	rjmp	.+392    	; 0x330c <DIO_enumSetPINDirection+0x1ee>
		    {

		        case DIO_PORTA :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    3184:	8c 81       	ldd	r24, Y+4	; 0x04
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	a1 f4       	brne	.+40     	; 0x31b2 <DIO_enumSetPINDirection+0x94>
		                           {
		                                SET_BIT(DDRA_REG,Copy_u8PINNumber);
    318a:	aa e3       	ldi	r26, 0x3A	; 58
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	ea e3       	ldi	r30, 0x3A	; 58
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	48 2f       	mov	r20, r24
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	02 2e       	mov	r0, r18
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <DIO_enumSetPINDirection+0x8a>
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	0a 94       	dec	r0
    31aa:	e2 f7       	brpl	.-8      	; 0x31a4 <DIO_enumSetPINDirection+0x86>
    31ac:	84 2b       	or	r24, r20
    31ae:	8c 93       	st	X, r24
    31b0:	b0 c0       	rjmp	.+352    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                           }
		                        else if(Copy_u8Direction == DIO_INPUT)
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	88 23       	and	r24, r24
    31b6:	a9 f4       	brne	.+42     	; 0x31e2 <DIO_enumSetPINDirection+0xc4>
		                          {
		                                CLR_BIT(DDRA_REG,Copy_u8PINNumber);
    31b8:	aa e3       	ldi	r26, 0x3A	; 58
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ea e3       	ldi	r30, 0x3A	; 58
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	48 2f       	mov	r20, r24
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	02 2e       	mov	r0, r18
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <DIO_enumSetPINDirection+0xb8>
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	0a 94       	dec	r0
    31d8:	e2 f7       	brpl	.-8      	; 0x31d2 <DIO_enumSetPINDirection+0xb4>
    31da:	80 95       	com	r24
    31dc:	84 23       	and	r24, r20
    31de:	8c 93       	st	X, r24
    31e0:	98 c0       	rjmp	.+304    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                          }
		                          else
		                          {
		                            /**/
		                        	  LOC_enumState=DIO_NOK;
    31e2:	19 82       	std	Y+1, r1	; 0x01
    31e4:	96 c0       	rjmp	.+300    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                          }
		                    break;
		        case DIO_PORTB :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    31e6:	8c 81       	ldd	r24, Y+4	; 0x04
    31e8:	81 30       	cpi	r24, 0x01	; 1
    31ea:	a1 f4       	brne	.+40     	; 0x3214 <DIO_enumSetPINDirection+0xf6>
		                            {
		                                SET_BIT(DDRB_REG,Copy_u8PINNumber);
    31ec:	a7 e3       	ldi	r26, 0x37	; 55
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e7 e3       	ldi	r30, 0x37	; 55
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	48 2f       	mov	r20, r24
    31f8:	8b 81       	ldd	r24, Y+3	; 0x03
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	02 2e       	mov	r0, r18
    3204:	02 c0       	rjmp	.+4      	; 0x320a <DIO_enumSetPINDirection+0xec>
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	0a 94       	dec	r0
    320c:	e2 f7       	brpl	.-8      	; 0x3206 <DIO_enumSetPINDirection+0xe8>
    320e:	84 2b       	or	r24, r20
    3210:	8c 93       	st	X, r24
    3212:	7f c0       	rjmp	.+254    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if(Copy_u8Direction == DIO_INPUT)
    3214:	8c 81       	ldd	r24, Y+4	; 0x04
    3216:	88 23       	and	r24, r24
    3218:	a9 f4       	brne	.+42     	; 0x3244 <DIO_enumSetPINDirection+0x126>
		                            {
	                                    CLR_BIT(DDRB_REG,Copy_u8PINNumber);
    321a:	a7 e3       	ldi	r26, 0x37	; 55
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e7 e3       	ldi	r30, 0x37	; 55
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	48 2f       	mov	r20, r24
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	02 2e       	mov	r0, r18
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <DIO_enumSetPINDirection+0x11a>
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	0a 94       	dec	r0
    323a:	e2 f7       	brpl	.-8      	; 0x3234 <DIO_enumSetPINDirection+0x116>
    323c:	80 95       	com	r24
    323e:	84 23       	and	r24, r20
    3240:	8c 93       	st	X, r24
    3242:	67 c0       	rjmp	.+206    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
    3244:	19 82       	std	Y+1, r1	; 0x01
    3246:	65 c0       	rjmp	.+202    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;
		        case DIO_PORTC :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    3248:	8c 81       	ldd	r24, Y+4	; 0x04
    324a:	81 30       	cpi	r24, 0x01	; 1
    324c:	a1 f4       	brne	.+40     	; 0x3276 <DIO_enumSetPINDirection+0x158>
		                            {
	                                SET_BIT(DDRC_REG,Copy_u8PINNumber);
    324e:	a4 e3       	ldi	r26, 0x34	; 52
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e4 e3       	ldi	r30, 0x34	; 52
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	48 2f       	mov	r20, r24
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	02 2e       	mov	r0, r18
    3266:	02 c0       	rjmp	.+4      	; 0x326c <DIO_enumSetPINDirection+0x14e>
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	0a 94       	dec	r0
    326e:	e2 f7       	brpl	.-8      	; 0x3268 <DIO_enumSetPINDirection+0x14a>
    3270:	84 2b       	or	r24, r20
    3272:	8c 93       	st	X, r24
    3274:	4e c0       	rjmp	.+156    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if (Copy_u8Direction == DIO_INPUT)
    3276:	8c 81       	ldd	r24, Y+4	; 0x04
    3278:	88 23       	and	r24, r24
    327a:	a9 f4       	brne	.+42     	; 0x32a6 <DIO_enumSetPINDirection+0x188>
		                            {
	                                CLR_BIT(DDRC_REG,Copy_u8PINNumber);
    327c:	a4 e3       	ldi	r26, 0x34	; 52
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e4 e3       	ldi	r30, 0x34	; 52
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	48 2f       	mov	r20, r24
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	02 2e       	mov	r0, r18
    3294:	02 c0       	rjmp	.+4      	; 0x329a <DIO_enumSetPINDirection+0x17c>
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	0a 94       	dec	r0
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <DIO_enumSetPINDirection+0x178>
    329e:	80 95       	com	r24
    32a0:	84 23       	and	r24, r20
    32a2:	8c 93       	st	X, r24
    32a4:	36 c0       	rjmp	.+108    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
    32a6:	19 82       	std	Y+1, r1	; 0x01
    32a8:	34 c0       	rjmp	.+104    	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;
		        case DIO_PORTD :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	81 30       	cpi	r24, 0x01	; 1
    32ae:	a1 f4       	brne	.+40     	; 0x32d8 <DIO_enumSetPINDirection+0x1ba>
		                            {
	                                SET_BIT(DDRD_REG,Copy_u8PINNumber);
    32b0:	a1 e3       	ldi	r26, 0x31	; 49
    32b2:	b0 e0       	ldi	r27, 0x00	; 0
    32b4:	e1 e3       	ldi	r30, 0x31	; 49
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
    32ba:	48 2f       	mov	r20, r24
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	28 2f       	mov	r18, r24
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	02 2e       	mov	r0, r18
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <DIO_enumSetPINDirection+0x1b0>
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	0a 94       	dec	r0
    32d0:	e2 f7       	brpl	.-8      	; 0x32ca <DIO_enumSetPINDirection+0x1ac>
    32d2:	84 2b       	or	r24, r20
    32d4:	8c 93       	st	X, r24
    32d6:	1d c0       	rjmp	.+58     	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if (Copy_u8Direction==DIO_INPUT)
    32d8:	8c 81       	ldd	r24, Y+4	; 0x04
    32da:	88 23       	and	r24, r24
    32dc:	a9 f4       	brne	.+42     	; 0x3308 <DIO_enumSetPINDirection+0x1ea>
		                            {
	                                CLR_BIT(DDRD_REG,Copy_u8PINNumber);
    32de:	a1 e3       	ldi	r26, 0x31	; 49
    32e0:	b0 e0       	ldi	r27, 0x00	; 0
    32e2:	e1 e3       	ldi	r30, 0x31	; 49
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
    32e8:	48 2f       	mov	r20, r24
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	28 2f       	mov	r18, r24
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	02 2e       	mov	r0, r18
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <DIO_enumSetPINDirection+0x1de>
    32f8:	88 0f       	add	r24, r24
    32fa:	99 1f       	adc	r25, r25
    32fc:	0a 94       	dec	r0
    32fe:	e2 f7       	brpl	.-8      	; 0x32f8 <DIO_enumSetPINDirection+0x1da>
    3300:	80 95       	com	r24
    3302:	84 23       	and	r24, r20
    3304:	8c 93       	st	X, r24
    3306:	05 c0       	rjmp	.+10     	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
    3308:	19 82       	std	Y+1, r1	; 0x01
    330a:	03 c0       	rjmp	.+6      	; 0x3312 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;

		        default:
		      	  LOC_enumState=DIO_NOK;
    330c:	19 82       	std	Y+1, r1	; 0x01
    330e:	01 c0       	rjmp	.+2      	; 0x3312 <DIO_enumSetPINDirection+0x1f4>

	}
	}
	else
	{
		LOC_enumState=DIO_NOK;
    3310:	19 82       	std	Y+1, r1	; 0x01
	}



	return LOC_enumState;
    3312:	89 81       	ldd	r24, Y+1	; 0x01
 }
    3314:	26 96       	adiw	r28, 0x06	; 6
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <DIO_enumSetPINValue>:
 DIO_ErroStatus DIO_enumSetPINValue    (u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 Copy_u8Value    )
 {
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	00 d0       	rcall	.+0      	; 0x332c <DIO_enumSetPINValue+0x6>
    332c:	00 d0       	rcall	.+0      	; 0x332e <DIO_enumSetPINValue+0x8>
    332e:	00 d0       	rcall	.+0      	; 0x3330 <DIO_enumSetPINValue+0xa>
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	8a 83       	std	Y+2, r24	; 0x02
    3336:	6b 83       	std	Y+3, r22	; 0x03
    3338:	4c 83       	std	Y+4, r20	; 0x04
	 DIO_ErroStatus LOC_enumState = DIO_OK;
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	89 83       	std	Y+1, r24	; 0x01
	 	if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
    333e:	8b 81       	ldd	r24, Y+3	; 0x03
    3340:	88 30       	cpi	r24, 0x08	; 8
    3342:	08 f0       	brcs	.+2      	; 0x3346 <DIO_enumSetPINValue+0x20>
    3344:	e9 c0       	rjmp	.+466    	; 0x3518 <DIO_enumSetPINValue+0x1f2>
	 	{
	 		 switch(Copy_u8Port)
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	28 2f       	mov	r18, r24
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	3e 83       	std	Y+6, r19	; 0x06
    334e:	2d 83       	std	Y+5, r18	; 0x05
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	82 30       	cpi	r24, 0x02	; 2
    3356:	91 05       	cpc	r25, r1
    3358:	09 f4       	brne	.+2      	; 0x335c <DIO_enumSetPINValue+0x36>
    335a:	49 c0       	rjmp	.+146    	; 0x33ee <DIO_enumSetPINValue+0xc8>
    335c:	2d 81       	ldd	r18, Y+5	; 0x05
    335e:	3e 81       	ldd	r19, Y+6	; 0x06
    3360:	23 30       	cpi	r18, 0x03	; 3
    3362:	31 05       	cpc	r19, r1
    3364:	34 f4       	brge	.+12     	; 0x3372 <DIO_enumSetPINValue+0x4c>
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	81 30       	cpi	r24, 0x01	; 1
    336c:	91 05       	cpc	r25, r1
    336e:	71 f0       	breq	.+28     	; 0x338c <DIO_enumSetPINValue+0x66>
    3370:	d1 c0       	rjmp	.+418    	; 0x3514 <DIO_enumSetPINValue+0x1ee>
    3372:	2d 81       	ldd	r18, Y+5	; 0x05
    3374:	3e 81       	ldd	r19, Y+6	; 0x06
    3376:	23 30       	cpi	r18, 0x03	; 3
    3378:	31 05       	cpc	r19, r1
    337a:	09 f4       	brne	.+2      	; 0x337e <DIO_enumSetPINValue+0x58>
    337c:	69 c0       	rjmp	.+210    	; 0x3450 <DIO_enumSetPINValue+0x12a>
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	84 30       	cpi	r24, 0x04	; 4
    3384:	91 05       	cpc	r25, r1
    3386:	09 f4       	brne	.+2      	; 0x338a <DIO_enumSetPINValue+0x64>
    3388:	94 c0       	rjmp	.+296    	; 0x34b2 <DIO_enumSetPINValue+0x18c>
    338a:	c4 c0       	rjmp	.+392    	; 0x3514 <DIO_enumSetPINValue+0x1ee>
	 		    {

	 		        case DIO_PORTA :
	 		                        if(Copy_u8Value == DIO_HIGH)
    338c:	8c 81       	ldd	r24, Y+4	; 0x04
    338e:	81 30       	cpi	r24, 0x01	; 1
    3390:	a1 f4       	brne	.+40     	; 0x33ba <DIO_enumSetPINValue+0x94>
	 		                           {
	 		                                SET_BIT(PORTA_REG,Copy_u8PINNumber);
    3392:	ab e3       	ldi	r26, 0x3B	; 59
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	eb e3       	ldi	r30, 0x3B	; 59
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	48 2f       	mov	r20, r24
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 2e       	mov	r0, r18
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <DIO_enumSetPINValue+0x8a>
    33ac:	88 0f       	add	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <DIO_enumSetPINValue+0x86>
    33b4:	84 2b       	or	r24, r20
    33b6:	8c 93       	st	X, r24
    33b8:	b0 c0       	rjmp	.+352    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                           }
	 		                        else if(Copy_u8Value == DIO_LOW)
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	88 23       	and	r24, r24
    33be:	a9 f4       	brne	.+42     	; 0x33ea <DIO_enumSetPINValue+0xc4>
	 		                          {
	 		                                CLR_BIT(PORTA_REG,Copy_u8PINNumber);
    33c0:	ab e3       	ldi	r26, 0x3B	; 59
    33c2:	b0 e0       	ldi	r27, 0x00	; 0
    33c4:	eb e3       	ldi	r30, 0x3B	; 59
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	48 2f       	mov	r20, r24
    33cc:	8b 81       	ldd	r24, Y+3	; 0x03
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 2e       	mov	r0, r18
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <DIO_enumSetPINValue+0xb8>
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	0a 94       	dec	r0
    33e0:	e2 f7       	brpl	.-8      	; 0x33da <DIO_enumSetPINValue+0xb4>
    33e2:	80 95       	com	r24
    33e4:	84 23       	and	r24, r20
    33e6:	8c 93       	st	X, r24
    33e8:	98 c0       	rjmp	.+304    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                          }
	 		                          else
	 		                          {
	 		                            /**/
	 		                        	  LOC_enumState=DIO_NOK;
    33ea:	19 82       	std	Y+1, r1	; 0x01
    33ec:	96 c0       	rjmp	.+300    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                          }
	 		                    break;
	 		        case DIO_PORTB :
	 		                        if(Copy_u8Value == DIO_HIGH)
    33ee:	8c 81       	ldd	r24, Y+4	; 0x04
    33f0:	81 30       	cpi	r24, 0x01	; 1
    33f2:	a1 f4       	brne	.+40     	; 0x341c <DIO_enumSetPINValue+0xf6>
	 		                            {
	 		                                SET_BIT(PORTB_REG,Copy_u8PINNumber);
    33f4:	a8 e3       	ldi	r26, 0x38	; 56
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	e8 e3       	ldi	r30, 0x38	; 56
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	48 2f       	mov	r20, r24
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	28 2f       	mov	r18, r24
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	02 2e       	mov	r0, r18
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <DIO_enumSetPINValue+0xec>
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	0a 94       	dec	r0
    3414:	e2 f7       	brpl	.-8      	; 0x340e <DIO_enumSetPINValue+0xe8>
    3416:	84 2b       	or	r24, r20
    3418:	8c 93       	st	X, r24
    341a:	7f c0       	rjmp	.+254    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                        else if(Copy_u8Value == DIO_LOW)
    341c:	8c 81       	ldd	r24, Y+4	; 0x04
    341e:	88 23       	and	r24, r24
    3420:	a9 f4       	brne	.+42     	; 0x344c <DIO_enumSetPINValue+0x126>
	 		                            {
	 	                                    CLR_BIT(PORTB_REG,Copy_u8PINNumber);
    3422:	a8 e3       	ldi	r26, 0x38	; 56
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e8 e3       	ldi	r30, 0x38	; 56
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	48 2f       	mov	r20, r24
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	02 2e       	mov	r0, r18
    343a:	02 c0       	rjmp	.+4      	; 0x3440 <DIO_enumSetPINValue+0x11a>
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	0a 94       	dec	r0
    3442:	e2 f7       	brpl	.-8      	; 0x343c <DIO_enumSetPINValue+0x116>
    3444:	80 95       	com	r24
    3446:	84 23       	and	r24, r20
    3448:	8c 93       	st	X, r24
    344a:	67 c0       	rjmp	.+206    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
    344c:	19 82       	std	Y+1, r1	; 0x01
    344e:	65 c0       	rjmp	.+202    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                    break;
	 		        case DIO_PORTC :
	 		                        if(Copy_u8Value == DIO_HIGH)
    3450:	8c 81       	ldd	r24, Y+4	; 0x04
    3452:	81 30       	cpi	r24, 0x01	; 1
    3454:	a1 f4       	brne	.+40     	; 0x347e <DIO_enumSetPINValue+0x158>
	 		                            {
	 	                                SET_BIT(PORTC_REG,Copy_u8PINNumber);
    3456:	a5 e3       	ldi	r26, 0x35	; 53
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	e5 e3       	ldi	r30, 0x35	; 53
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	48 2f       	mov	r20, r24
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	28 2f       	mov	r18, r24
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	02 2e       	mov	r0, r18
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <DIO_enumSetPINValue+0x14e>
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	0a 94       	dec	r0
    3476:	e2 f7       	brpl	.-8      	; 0x3470 <DIO_enumSetPINValue+0x14a>
    3478:	84 2b       	or	r24, r20
    347a:	8c 93       	st	X, r24
    347c:	4e c0       	rjmp	.+156    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                        else if (Copy_u8Value==DIO_LOW)
    347e:	8c 81       	ldd	r24, Y+4	; 0x04
    3480:	88 23       	and	r24, r24
    3482:	a9 f4       	brne	.+42     	; 0x34ae <DIO_enumSetPINValue+0x188>
	 		                            {
	 	                                CLR_BIT(PORTC_REG,Copy_u8PINNumber);
    3484:	a5 e3       	ldi	r26, 0x35	; 53
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e5 e3       	ldi	r30, 0x35	; 53
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	48 2f       	mov	r20, r24
    3490:	8b 81       	ldd	r24, Y+3	; 0x03
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	02 2e       	mov	r0, r18
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <DIO_enumSetPINValue+0x17c>
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	0a 94       	dec	r0
    34a4:	e2 f7       	brpl	.-8      	; 0x349e <DIO_enumSetPINValue+0x178>
    34a6:	80 95       	com	r24
    34a8:	84 23       	and	r24, r20
    34aa:	8c 93       	st	X, r24
    34ac:	36 c0       	rjmp	.+108    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
    34ae:	19 82       	std	Y+1, r1	; 0x01
    34b0:	34 c0       	rjmp	.+104    	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                    break;
	 		        case DIO_PORTD :
	 		                        if(Copy_u8Value == DIO_HIGH)
    34b2:	8c 81       	ldd	r24, Y+4	; 0x04
    34b4:	81 30       	cpi	r24, 0x01	; 1
    34b6:	a1 f4       	brne	.+40     	; 0x34e0 <DIO_enumSetPINValue+0x1ba>
	 		                            {
	 	                                SET_BIT(PORTD_REG,Copy_u8PINNumber);
    34b8:	a2 e3       	ldi	r26, 0x32	; 50
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e2 e3       	ldi	r30, 0x32	; 50
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	48 2f       	mov	r20, r24
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	02 2e       	mov	r0, r18
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <DIO_enumSetPINValue+0x1b0>
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	0a 94       	dec	r0
    34d8:	e2 f7       	brpl	.-8      	; 0x34d2 <DIO_enumSetPINValue+0x1ac>
    34da:	84 2b       	or	r24, r20
    34dc:	8c 93       	st	X, r24
    34de:	1d c0       	rjmp	.+58     	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                        else if (Copy_u8Value==DIO_LOW)
    34e0:	8c 81       	ldd	r24, Y+4	; 0x04
    34e2:	88 23       	and	r24, r24
    34e4:	a9 f4       	brne	.+42     	; 0x3510 <DIO_enumSetPINValue+0x1ea>
	 		                            {
	 	                                CLR_BIT(PORTD_REG,Copy_u8PINNumber);
    34e6:	a2 e3       	ldi	r26, 0x32	; 50
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e2 e3       	ldi	r30, 0x32	; 50
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	48 2f       	mov	r20, r24
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	28 2f       	mov	r18, r24
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	02 2e       	mov	r0, r18
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <DIO_enumSetPINValue+0x1de>
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	0a 94       	dec	r0
    3506:	e2 f7       	brpl	.-8      	; 0x3500 <DIO_enumSetPINValue+0x1da>
    3508:	80 95       	com	r24
    350a:	84 23       	and	r24, r20
    350c:	8c 93       	st	X, r24
    350e:	05 c0       	rjmp	.+10     	; 0x351a <DIO_enumSetPINValue+0x1f4>

	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
    3510:	19 82       	std	Y+1, r1	; 0x01
    3512:	03 c0       	rjmp	.+6      	; 0x351a <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                    break;

	 		        default:
	 		      	  LOC_enumState=DIO_NOK;
    3514:	19 82       	std	Y+1, r1	; 0x01
    3516:	01 c0       	rjmp	.+2      	; 0x351a <DIO_enumSetPINValue+0x1f4>

	 	}
	 	}
	 	else
	 	{
	 		LOC_enumState=DIO_NOK;
    3518:	19 82       	std	Y+1, r1	; 0x01
	 	}



	 	return LOC_enumState;
    351a:	89 81       	ldd	r24, Y+1	; 0x01
	  }
    351c:	26 96       	adiw	r28, 0x06	; 6
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	cd bf       	out	0x3d, r28	; 61
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <DIO_enumGetPortValue>:

 DIO_ErroStatus DIO_enumGetPortValue    (u8 Copy_u8Port, u8 *Copy_ptrData   )
 {
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	00 d0       	rcall	.+0      	; 0x3534 <DIO_enumGetPortValue+0x6>
    3534:	00 d0       	rcall	.+0      	; 0x3536 <DIO_enumGetPortValue+0x8>
    3536:	00 d0       	rcall	.+0      	; 0x3538 <DIO_enumGetPortValue+0xa>
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
    353c:	8a 83       	std	Y+2, r24	; 0x02
    353e:	7c 83       	std	Y+4, r23	; 0x04
    3540:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	89 83       	std	Y+1, r24	; 0x01
	 switch (Copy_u8Port) {
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	3e 83       	std	Y+6, r19	; 0x06
    354e:	2d 83       	std	Y+5, r18	; 0x05
    3550:	8d 81       	ldd	r24, Y+5	; 0x05
    3552:	9e 81       	ldd	r25, Y+6	; 0x06
    3554:	82 30       	cpi	r24, 0x02	; 2
    3556:	91 05       	cpc	r25, r1
    3558:	e9 f0       	breq	.+58     	; 0x3594 <DIO_enumGetPortValue+0x66>
    355a:	2d 81       	ldd	r18, Y+5	; 0x05
    355c:	3e 81       	ldd	r19, Y+6	; 0x06
    355e:	23 30       	cpi	r18, 0x03	; 3
    3560:	31 05       	cpc	r19, r1
    3562:	34 f4       	brge	.+12     	; 0x3570 <DIO_enumGetPortValue+0x42>
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	81 30       	cpi	r24, 0x01	; 1
    356a:	91 05       	cpc	r25, r1
    356c:	61 f0       	breq	.+24     	; 0x3586 <DIO_enumGetPortValue+0x58>
    356e:	27 c0       	rjmp	.+78     	; 0x35be <DIO_enumGetPortValue+0x90>
    3570:	2d 81       	ldd	r18, Y+5	; 0x05
    3572:	3e 81       	ldd	r19, Y+6	; 0x06
    3574:	23 30       	cpi	r18, 0x03	; 3
    3576:	31 05       	cpc	r19, r1
    3578:	a1 f0       	breq	.+40     	; 0x35a2 <DIO_enumGetPortValue+0x74>
    357a:	8d 81       	ldd	r24, Y+5	; 0x05
    357c:	9e 81       	ldd	r25, Y+6	; 0x06
    357e:	84 30       	cpi	r24, 0x04	; 4
    3580:	91 05       	cpc	r25, r1
    3582:	b1 f0       	breq	.+44     	; 0x35b0 <DIO_enumGetPortValue+0x82>
    3584:	1c c0       	rjmp	.+56     	; 0x35be <DIO_enumGetPortValue+0x90>
		case DIO_PORTA: *Copy_ptrData = PINA_REG;
    3586:	e9 e3       	ldi	r30, 0x39	; 57
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	eb 81       	ldd	r30, Y+3	; 0x03
    358e:	fc 81       	ldd	r31, Y+4	; 0x04
    3590:	80 83       	st	Z, r24
    3592:	16 c0       	rjmp	.+44     	; 0x35c0 <DIO_enumGetPortValue+0x92>
			break;
		case DIO_PORTB: *Copy_ptrData = PINB_REG;
    3594:	e6 e3       	ldi	r30, 0x36	; 54
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	eb 81       	ldd	r30, Y+3	; 0x03
    359c:	fc 81       	ldd	r31, Y+4	; 0x04
    359e:	80 83       	st	Z, r24
    35a0:	0f c0       	rjmp	.+30     	; 0x35c0 <DIO_enumGetPortValue+0x92>
					break;
		case DIO_PORTC: *Copy_ptrData = PINC_REG;
    35a2:	e3 e3       	ldi	r30, 0x33	; 51
    35a4:	f0 e0       	ldi	r31, 0x00	; 0
    35a6:	80 81       	ld	r24, Z
    35a8:	eb 81       	ldd	r30, Y+3	; 0x03
    35aa:	fc 81       	ldd	r31, Y+4	; 0x04
    35ac:	80 83       	st	Z, r24
    35ae:	08 c0       	rjmp	.+16     	; 0x35c0 <DIO_enumGetPortValue+0x92>
					break;
		case DIO_PORTD: *Copy_ptrData = PIND_REG;
    35b0:	e0 e3       	ldi	r30, 0x30	; 48
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	eb 81       	ldd	r30, Y+3	; 0x03
    35b8:	fc 81       	ldd	r31, Y+4	; 0x04
    35ba:	80 83       	st	Z, r24
    35bc:	01 c0       	rjmp	.+2      	; 0x35c0 <DIO_enumGetPortValue+0x92>
					break;
		default:
			LOC_enumState =DIO_NOK;
    35be:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
	 return LOC_enumState;
    35c0:	89 81       	ldd	r24, Y+1	; 0x01


 }
    35c2:	26 96       	adiw	r28, 0x06	; 6
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	cf 91       	pop	r28
    35d0:	df 91       	pop	r29
    35d2:	08 95       	ret

000035d4 <DIO_enumGetPINValue>:

 DIO_ErroStatus DIO_enumGetPINValue     (u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 *Copy_ptrData   )
 {
    35d4:	df 93       	push	r29
    35d6:	cf 93       	push	r28
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	27 97       	sbiw	r28, 0x07	; 7
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	8a 83       	std	Y+2, r24	; 0x02
    35ea:	6b 83       	std	Y+3, r22	; 0x03
    35ec:	5d 83       	std	Y+5, r21	; 0x05
    35ee:	4c 83       	std	Y+4, r20	; 0x04
	 DIO_ErroStatus LOC_enumState = DIO_OK;
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
    35f4:	8b 81       	ldd	r24, Y+3	; 0x03
    35f6:	88 30       	cpi	r24, 0x08	; 8
    35f8:	08 f0       	brcs	.+2      	; 0x35fc <DIO_enumGetPINValue+0x28>
    35fa:	73 c0       	rjmp	.+230    	; 0x36e2 <DIO_enumGetPINValue+0x10e>
		 	{
		 		 switch(Copy_u8Port)
    35fc:	8a 81       	ldd	r24, Y+2	; 0x02
    35fe:	28 2f       	mov	r18, r24
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	3f 83       	std	Y+7, r19	; 0x07
    3604:	2e 83       	std	Y+6, r18	; 0x06
    3606:	4e 81       	ldd	r20, Y+6	; 0x06
    3608:	5f 81       	ldd	r21, Y+7	; 0x07
    360a:	42 30       	cpi	r20, 0x02	; 2
    360c:	51 05       	cpc	r21, r1
    360e:	59 f1       	breq	.+86     	; 0x3666 <DIO_enumGetPINValue+0x92>
    3610:	8e 81       	ldd	r24, Y+6	; 0x06
    3612:	9f 81       	ldd	r25, Y+7	; 0x07
    3614:	83 30       	cpi	r24, 0x03	; 3
    3616:	91 05       	cpc	r25, r1
    3618:	34 f4       	brge	.+12     	; 0x3626 <DIO_enumGetPINValue+0x52>
    361a:	2e 81       	ldd	r18, Y+6	; 0x06
    361c:	3f 81       	ldd	r19, Y+7	; 0x07
    361e:	21 30       	cpi	r18, 0x01	; 1
    3620:	31 05       	cpc	r19, r1
    3622:	69 f0       	breq	.+26     	; 0x363e <DIO_enumGetPINValue+0x6a>
    3624:	5c c0       	rjmp	.+184    	; 0x36de <DIO_enumGetPINValue+0x10a>
    3626:	4e 81       	ldd	r20, Y+6	; 0x06
    3628:	5f 81       	ldd	r21, Y+7	; 0x07
    362a:	43 30       	cpi	r20, 0x03	; 3
    362c:	51 05       	cpc	r21, r1
    362e:	79 f1       	breq	.+94     	; 0x368e <DIO_enumGetPINValue+0xba>
    3630:	8e 81       	ldd	r24, Y+6	; 0x06
    3632:	9f 81       	ldd	r25, Y+7	; 0x07
    3634:	84 30       	cpi	r24, 0x04	; 4
    3636:	91 05       	cpc	r25, r1
    3638:	09 f4       	brne	.+2      	; 0x363c <DIO_enumGetPINValue+0x68>
    363a:	3d c0       	rjmp	.+122    	; 0x36b6 <DIO_enumGetPINValue+0xe2>
    363c:	50 c0       	rjmp	.+160    	; 0x36de <DIO_enumGetPINValue+0x10a>
		 		    {
		 		case DIO_PORTA: *Copy_ptrData = GET_BIT(PINA_REG,Copy_u8PINNumber);
    363e:	e9 e3       	ldi	r30, 0x39	; 57
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	80 81       	ld	r24, Z
    3644:	28 2f       	mov	r18, r24
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	a9 01       	movw	r20, r18
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <DIO_enumGetPINValue+0x82>
    3652:	55 95       	asr	r21
    3654:	47 95       	ror	r20
    3656:	8a 95       	dec	r24
    3658:	e2 f7       	brpl	.-8      	; 0x3652 <DIO_enumGetPINValue+0x7e>
    365a:	ca 01       	movw	r24, r20
    365c:	81 70       	andi	r24, 0x01	; 1
    365e:	ec 81       	ldd	r30, Y+4	; 0x04
    3660:	fd 81       	ldd	r31, Y+5	; 0x05
    3662:	80 83       	st	Z, r24
    3664:	3f c0       	rjmp	.+126    	; 0x36e4 <DIO_enumGetPINValue+0x110>
		 			break;
		 		case DIO_PORTB: *Copy_ptrData = GET_BIT(PINB_REG,Copy_u8PINNumber);
    3666:	e6 e3       	ldi	r30, 0x36	; 54
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	28 2f       	mov	r18, r24
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	8b 81       	ldd	r24, Y+3	; 0x03
    3672:	88 2f       	mov	r24, r24
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	a9 01       	movw	r20, r18
    3678:	02 c0       	rjmp	.+4      	; 0x367e <DIO_enumGetPINValue+0xaa>
    367a:	55 95       	asr	r21
    367c:	47 95       	ror	r20
    367e:	8a 95       	dec	r24
    3680:	e2 f7       	brpl	.-8      	; 0x367a <DIO_enumGetPINValue+0xa6>
    3682:	ca 01       	movw	r24, r20
    3684:	81 70       	andi	r24, 0x01	; 1
    3686:	ec 81       	ldd	r30, Y+4	; 0x04
    3688:	fd 81       	ldd	r31, Y+5	; 0x05
    368a:	80 83       	st	Z, r24
    368c:	2b c0       	rjmp	.+86     	; 0x36e4 <DIO_enumGetPINValue+0x110>
		 					break;
		 		case DIO_PORTC: *Copy_ptrData = GET_BIT(PINC_REG,Copy_u8PINNumber);
    368e:	e3 e3       	ldi	r30, 0x33	; 51
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	8b 81       	ldd	r24, Y+3	; 0x03
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a9 01       	movw	r20, r18
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <DIO_enumGetPINValue+0xd2>
    36a2:	55 95       	asr	r21
    36a4:	47 95       	ror	r20
    36a6:	8a 95       	dec	r24
    36a8:	e2 f7       	brpl	.-8      	; 0x36a2 <DIO_enumGetPINValue+0xce>
    36aa:	ca 01       	movw	r24, r20
    36ac:	81 70       	andi	r24, 0x01	; 1
    36ae:	ec 81       	ldd	r30, Y+4	; 0x04
    36b0:	fd 81       	ldd	r31, Y+5	; 0x05
    36b2:	80 83       	st	Z, r24
    36b4:	17 c0       	rjmp	.+46     	; 0x36e4 <DIO_enumGetPINValue+0x110>
		 					break;
		 		case DIO_PORTD: *Copy_ptrData = GET_BIT(PIND_REG,Copy_u8PINNumber);
    36b6:	e0 e3       	ldi	r30, 0x30	; 48
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	80 81       	ld	r24, Z
    36bc:	28 2f       	mov	r18, r24
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	8b 81       	ldd	r24, Y+3	; 0x03
    36c2:	88 2f       	mov	r24, r24
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	a9 01       	movw	r20, r18
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <DIO_enumGetPINValue+0xfa>
    36ca:	55 95       	asr	r21
    36cc:	47 95       	ror	r20
    36ce:	8a 95       	dec	r24
    36d0:	e2 f7       	brpl	.-8      	; 0x36ca <DIO_enumGetPINValue+0xf6>
    36d2:	ca 01       	movw	r24, r20
    36d4:	81 70       	andi	r24, 0x01	; 1
    36d6:	ec 81       	ldd	r30, Y+4	; 0x04
    36d8:	fd 81       	ldd	r31, Y+5	; 0x05
    36da:	80 83       	st	Z, r24
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <DIO_enumGetPINValue+0x110>
		 					break;
		 		default:
		 			LOC_enumState =DIO_NOK;
    36de:	19 82       	std	Y+1, r1	; 0x01
    36e0:	01 c0       	rjmp	.+2      	; 0x36e4 <DIO_enumGetPINValue+0x110>
		 			break;

		 		    }
		 	}
	 else {
		 LOC_enumState = DIO_NOK;
    36e2:	19 82       	std	Y+1, r1	; 0x01
	}

	 return LOC_enumState;
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
 }
    36e6:	27 96       	adiw	r28, 0x07	; 7
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	08 95       	ret

000036f8 <SW_voidInit>:
#include "SW_private.h"
#include "SW_config.h"
#include "../../MCAL/DIO/DIO_interface.h"

void SW_voidInit(SW_Type SW_Config)
{
    36f8:	df 93       	push	r29
    36fa:	cf 93       	push	r28
    36fc:	00 d0       	rcall	.+0      	; 0x36fe <SW_voidInit+0x6>
    36fe:	0f 92       	push	r0
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
    3704:	69 83       	std	Y+1, r22	; 0x01
    3706:	7a 83       	std	Y+2, r23	; 0x02
    3708:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enumSetPINDirection(SW_Config.Port, SW_Config.Pin, DIO_INPUT);
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	9a 81       	ldd	r25, Y+2	; 0x02
    370e:	69 2f       	mov	r22, r25
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
    if (SW_Config.Pull_State == SW_PULL_UP)
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	81 30       	cpi	r24, 0x01	; 1
    371a:	39 f4       	brne	.+14     	; 0x372a <SW_voidInit+0x32>
    {
        DIO_enumSetPINValue(SW_Config.Port, SW_Config.Pin, DIO_HIGH);
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	9a 81       	ldd	r25, Y+2	; 0x02
    3720:	69 2f       	mov	r22, r25
    3722:	41 e0       	ldi	r20, 0x01	; 1
    3724:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    3728:	06 c0       	rjmp	.+12     	; 0x3736 <SW_voidInit+0x3e>
    }
    else 
    {
        DIO_enumSetPINValue(SW_Config.Port, SW_Config.Pin, DIO_LOW);
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	69 2f       	mov	r22, r25
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    }
}
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <SW_u8GetPressed>:
u8 SW_u8GetPressed(SW_Type SW_Config)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	00 d0       	rcall	.+0      	; 0x3748 <SW_u8GetPressed+0x6>
    3748:	00 d0       	rcall	.+0      	; 0x374a <SW_u8GetPressed+0x8>
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	6a 83       	std	Y+2, r22	; 0x02
    3750:	7b 83       	std	Y+3, r23	; 0x03
    3752:	8c 83       	std	Y+4, r24	; 0x04
    u8 LOC_u8Result = 0;
    3754:	19 82       	std	Y+1, r1	; 0x01
    DIO_enumGetPINValue     (SW_Config.Port,SW_Config.Pin, &LOC_u8Result  );
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	9b 81       	ldd	r25, Y+3	; 0x03
    375a:	69 2f       	mov	r22, r25
    375c:	9e 01       	movw	r18, r28
    375e:	2f 5f       	subi	r18, 0xFF	; 255
    3760:	3f 4f       	sbci	r19, 0xFF	; 255
    3762:	a9 01       	movw	r20, r18
    3764:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <DIO_enumGetPINValue>

    return LOC_u8Result;
    3768:	89 81       	ldd	r24, Y+1	; 0x01
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <SSD_voidInit>:

// all the numbers value frome 0 to 9 Common cathod
const u8 SSD_u8ArrNumbers[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
// function that sets the data and enables pin direction to output 
void SSD_voidInit(SSD_Type Copy_structSSD_Config)
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	00 d0       	rcall	.+0      	; 0x377e <SSD_voidInit+0x6>
    377e:	00 d0       	rcall	.+0      	; 0x3780 <SSD_voidInit+0x8>
    3780:	cd b7       	in	r28, 0x3d	; 61
    3782:	de b7       	in	r29, 0x3e	; 62
    3784:	69 83       	std	Y+1, r22	; 0x01
    3786:	7a 83       	std	Y+2, r23	; 0x02
    3788:	8b 83       	std	Y+3, r24	; 0x03
    378a:	9c 83       	std	Y+4, r25	; 0x04
    DIO_enumSetPortDirection(Copy_structSSD_Config.Data_Port,DIO_OUTPUT);
    378c:	8a 81       	ldd	r24, Y+2	; 0x02
    378e:	61 e0       	ldi	r22, 0x01	; 1
    3790:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <DIO_enumSetPortDirection>
    DIO_enumSetPINDirection(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_OUTPUT);
    3794:	8b 81       	ldd	r24, Y+3	; 0x03
    3796:	9c 81       	ldd	r25, Y+4	; 0x04
    3798:	69 2f       	mov	r22, r25
    379a:	41 e0       	ldi	r20, 0x01	; 1
    379c:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>

}
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	08 95       	ret

000037ae <SSD_voidSendNumber>:
// function thats sends the value of a number on the data port
void SSD_voidSendNumber(SSD_Type Copy_structSSD_Config,u8 Copy_u8Number)
{
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	00 d0       	rcall	.+0      	; 0x37b4 <SSD_voidSendNumber+0x6>
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <SSD_voidSendNumber+0x8>
    37b6:	0f 92       	push	r0
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	69 83       	std	Y+1, r22	; 0x01
    37be:	7a 83       	std	Y+2, r23	; 0x02
    37c0:	8b 83       	std	Y+3, r24	; 0x03
    37c2:	9c 83       	std	Y+4, r25	; 0x04
    37c4:	4d 83       	std	Y+5, r20	; 0x05
    if(Copy_structSSD_Config.Type == SSD_COMMON_CATHODE)
    37c6:	89 81       	ldd	r24, Y+1	; 0x01
    37c8:	88 23       	and	r24, r24
    37ca:	69 f4       	brne	.+26     	; 0x37e6 <SSD_voidSendNumber+0x38>
    {
        DIO_enumSetPortValue(Copy_structSSD_Config.Data_Port, SSD_u8ArrNumbers[Copy_u8Number]);
    37cc:	2a 81       	ldd	r18, Y+2	; 0x02
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	88 2f       	mov	r24, r24
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	fc 01       	movw	r30, r24
    37d6:	ec 51       	subi	r30, 0x1C	; 28
    37d8:	fe 4f       	sbci	r31, 0xFE	; 254
    37da:	90 81       	ld	r25, Z
    37dc:	82 2f       	mov	r24, r18
    37de:	69 2f       	mov	r22, r25
    37e0:	0e 94 46 18 	call	0x308c	; 0x308c <DIO_enumSetPortValue>
    37e4:	11 c0       	rjmp	.+34     	; 0x3808 <SSD_voidSendNumber+0x5a>

    }
    else if (Copy_structSSD_Config.Type == SSD_COMMON_ANOD)
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	81 30       	cpi	r24, 0x01	; 1
    37ea:	71 f4       	brne	.+28     	; 0x3808 <SSD_voidSendNumber+0x5a>
    {
        DIO_enumSetPortValue(Copy_structSSD_Config.Data_Port, ~(SSD_u8ArrNumbers[Copy_u8Number]));
    37ec:	2a 81       	ldd	r18, Y+2	; 0x02
    37ee:	8d 81       	ldd	r24, Y+5	; 0x05
    37f0:	88 2f       	mov	r24, r24
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	fc 01       	movw	r30, r24
    37f6:	ec 51       	subi	r30, 0x1C	; 28
    37f8:	fe 4f       	sbci	r31, 0xFE	; 254
    37fa:	80 81       	ld	r24, Z
    37fc:	98 2f       	mov	r25, r24
    37fe:	90 95       	com	r25
    3800:	82 2f       	mov	r24, r18
    3802:	69 2f       	mov	r22, r25
    3804:	0e 94 46 18 	call	0x308c	; 0x308c <DIO_enumSetPortValue>


    }
}
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <SSD_voidEnable>:
// function that sets the enable pin to the value that makes the seven segments on
void SSD_voidEnable    (SSD_Type Copy_structSSD_Config)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	00 d0       	rcall	.+0      	; 0x381e <SSD_voidEnable+0x6>
    381e:	00 d0       	rcall	.+0      	; 0x3820 <SSD_voidEnable+0x8>
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	69 83       	std	Y+1, r22	; 0x01
    3826:	7a 83       	std	Y+2, r23	; 0x02
    3828:	8b 83       	std	Y+3, r24	; 0x03
    382a:	9c 83       	std	Y+4, r25	; 0x04
      if(Copy_structSSD_Config.Type == SSD_COMMON_CATHODE)
    382c:	89 81       	ldd	r24, Y+1	; 0x01
    382e:	88 23       	and	r24, r24
    3830:	39 f4       	brne	.+14     	; 0x3840 <SSD_voidEnable+0x28>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_LOW);
    3832:	8b 81       	ldd	r24, Y+3	; 0x03
    3834:	9c 81       	ldd	r25, Y+4	; 0x04
    3836:	69 2f       	mov	r22, r25
    3838:	40 e0       	ldi	r20, 0x00	; 0
    383a:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    383e:	09 c0       	rjmp	.+18     	; 0x3852 <SSD_voidEnable+0x3a>

    }
    else if (Copy_structSSD_Config.Type == SSD_COMMON_ANOD)
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	81 30       	cpi	r24, 0x01	; 1
    3844:	31 f4       	brne	.+12     	; 0x3852 <SSD_voidEnable+0x3a>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_HIGH);
    3846:	8b 81       	ldd	r24, Y+3	; 0x03
    3848:	9c 81       	ldd	r25, Y+4	; 0x04
    384a:	69 2f       	mov	r22, r25
    384c:	41 e0       	ldi	r20, 0x01	; 1
    384e:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>


    }
}
    3852:	0f 90       	pop	r0
    3854:	0f 90       	pop	r0
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	cf 91       	pop	r28
    385c:	df 91       	pop	r29
    385e:	08 95       	ret

00003860 <SSD_voidDisable>:
// function that sets the enable pin to the value that makes the seven segments off

void SSD_voidDisable   (SSD_Type Copy_structSSD_Config)
{
    3860:	df 93       	push	r29
    3862:	cf 93       	push	r28
    3864:	00 d0       	rcall	.+0      	; 0x3866 <SSD_voidDisable+0x6>
    3866:	00 d0       	rcall	.+0      	; 0x3868 <SSD_voidDisable+0x8>
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	69 83       	std	Y+1, r22	; 0x01
    386e:	7a 83       	std	Y+2, r23	; 0x02
    3870:	8b 83       	std	Y+3, r24	; 0x03
    3872:	9c 83       	std	Y+4, r25	; 0x04
        if(Copy_structSSD_Config.Type == SSD_COMMON_CATHODE)
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	88 23       	and	r24, r24
    3878:	39 f4       	brne	.+14     	; 0x3888 <SSD_voidDisable+0x28>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_HIGH);
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	69 2f       	mov	r22, r25
    3880:	41 e0       	ldi	r20, 0x01	; 1
    3882:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    3886:	09 c0       	rjmp	.+18     	; 0x389a <SSD_voidDisable+0x3a>

    }
    else if (Copy_structSSD_Config.Type == SSD_COMMON_ANOD)
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	81 30       	cpi	r24, 0x01	; 1
    388c:	31 f4       	brne	.+12     	; 0x389a <SSD_voidDisable+0x3a>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_LOW);
    388e:	8b 81       	ldd	r24, Y+3	; 0x03
    3890:	9c 81       	ldd	r25, Y+4	; 0x04
    3892:	69 2f       	mov	r22, r25
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>


    }
}
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	cf 91       	pop	r28
    38a4:	df 91       	pop	r29
    38a6:	08 95       	ret

000038a8 <LED_voidInit>:
#include "LED_config.h"



void LED_voidInit(LED_Type LED_Config )
{
    38a8:	df 93       	push	r29
    38aa:	cf 93       	push	r28
    38ac:	00 d0       	rcall	.+0      	; 0x38ae <LED_voidInit+0x6>
    38ae:	0f 92       	push	r0
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	69 83       	std	Y+1, r22	; 0x01
    38b6:	7a 83       	std	Y+2, r23	; 0x02
    38b8:	8b 83       	std	Y+3, r24	; 0x03
      DIO_enumSetPINDirection(LED_Config.Port,LED_Config.Pin,DIO_OUTPUT);
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	9a 81       	ldd	r25, Y+2	; 0x02
    38be:	69 2f       	mov	r22, r25
    38c0:	41 e0       	ldi	r20, 0x01	; 1
    38c2:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>


}
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	08 95       	ret

000038d2 <LED_voidOn>:
void LED_voidOn  (LED_Type LED_Config )
{
    38d2:	df 93       	push	r29
    38d4:	cf 93       	push	r28
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <LED_voidOn+0x6>
    38d8:	0f 92       	push	r0
    38da:	cd b7       	in	r28, 0x3d	; 61
    38dc:	de b7       	in	r29, 0x3e	; 62
    38de:	69 83       	std	Y+1, r22	; 0x01
    38e0:	7a 83       	std	Y+2, r23	; 0x02
    38e2:	8b 83       	std	Y+3, r24	; 0x03
    if(LED_Config.Active_State == ACTIVE_HIGH)
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	39 f4       	brne	.+14     	; 0x38f8 <LED_voidOn+0x26>
    {
      
      DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_HIGH);
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	9a 81       	ldd	r25, Y+2	; 0x02
    38ee:	69 2f       	mov	r22, r25
    38f0:	41 e0       	ldi	r20, 0x01	; 1
    38f2:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    38f6:	09 c0       	rjmp	.+18     	; 0x390a <LED_voidOn+0x38>

    }
    else if(LED_Config.Active_State == ACTIVE_LOW)
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	88 23       	and	r24, r24
    38fc:	31 f4       	brne	.+12     	; 0x390a <LED_voidOn+0x38>
    {

           DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_LOW);
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
    3900:	9a 81       	ldd	r25, Y+2	; 0x02
    3902:	69 2f       	mov	r22, r25
    3904:	40 e0       	ldi	r20, 0x00	; 0
    3906:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>

    }
}
    390a:	0f 90       	pop	r0
    390c:	0f 90       	pop	r0
    390e:	0f 90       	pop	r0
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <LED_voidOff>:
void LED_voidOff (LED_Type LED_Config )
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	00 d0       	rcall	.+0      	; 0x391c <LED_voidOff+0x6>
    391c:	0f 92       	push	r0
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	69 83       	std	Y+1, r22	; 0x01
    3924:	7a 83       	std	Y+2, r23	; 0x02
    3926:	8b 83       	std	Y+3, r24	; 0x03
     if(LED_Config.Active_State == ACTIVE_HIGH)
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	81 30       	cpi	r24, 0x01	; 1
    392c:	39 f4       	brne	.+14     	; 0x393c <LED_voidOff+0x26>
    {
      
      DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_LOW);
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	9a 81       	ldd	r25, Y+2	; 0x02
    3932:	69 2f       	mov	r22, r25
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    393a:	09 c0       	rjmp	.+18     	; 0x394e <LED_voidOff+0x38>

    }
     else if(LED_Config.Active_State == ACTIVE_LOW)
    393c:	8b 81       	ldd	r24, Y+3	; 0x03
    393e:	88 23       	and	r24, r24
    3940:	31 f4       	brne	.+12     	; 0x394e <LED_voidOff+0x38>
    {

           DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_HIGH);
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	9a 81       	ldd	r25, Y+2	; 0x02
    3946:	69 2f       	mov	r22, r25
    3948:	41 e0       	ldi	r20, 0x01	; 1
    394a:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>

    }

}
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	0f 90       	pop	r0
    3954:	cf 91       	pop	r28
    3956:	df 91       	pop	r29
    3958:	08 95       	ret

0000395a <CLCD_voidInit>:
#include "CLCD_private.h"



void CLCD_voidInit			(void)
{
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	e8 97       	sbiw	r28, 0x38	; 56
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(CLCD_DATA_PORT,DIO_OUTPUT			 );
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	61 e0       	ldi	r22, 0x01	; 1
    3972:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <DIO_enumSetPortDirection>
	DIO_enumSetPINDirection (CLCD_CONTROL_PORT,CLCD_RS,DIO_OUTPUT);
    3976:	83 e0       	ldi	r24, 0x03	; 3
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	41 e0       	ldi	r20, 0x01	; 1
    397c:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection (CLCD_CONTROL_PORT,CLCD_RW,DIO_OUTPUT);
    3980:	83 e0       	ldi	r24, 0x03	; 3
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	41 e0       	ldi	r20, 0x01	; 1
    3986:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection (CLCD_CONTROL_PORT,CLCD_EN,DIO_OUTPUT);
    398a:	83 e0       	ldi	r24, 0x03	; 3
    398c:	62 e0       	ldi	r22, 0x02	; 2
    398e:	41 e0       	ldi	r20, 0x01	; 1
    3990:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	a8 e4       	ldi	r26, 0x48	; 72
    399a:	b2 e4       	ldi	r27, 0x42	; 66
    399c:	8d ab       	std	Y+53, r24	; 0x35
    399e:	9e ab       	std	Y+54, r25	; 0x36
    39a0:	af ab       	std	Y+55, r26	; 0x37
    39a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a4:	6d a9       	ldd	r22, Y+53	; 0x35
    39a6:	7e a9       	ldd	r23, Y+54	; 0x36
    39a8:	8f a9       	ldd	r24, Y+55	; 0x37
    39aa:	98 ad       	ldd	r25, Y+56	; 0x38
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	4a ef       	ldi	r20, 0xFA	; 250
    39b2:	54 e4       	ldi	r21, 0x44	; 68
    39b4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	89 ab       	std	Y+49, r24	; 0x31
    39be:	9a ab       	std	Y+50, r25	; 0x32
    39c0:	ab ab       	std	Y+51, r26	; 0x33
    39c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39c4:	69 a9       	ldd	r22, Y+49	; 0x31
    39c6:	7a a9       	ldd	r23, Y+50	; 0x32
    39c8:	8b a9       	ldd	r24, Y+51	; 0x33
    39ca:	9c a9       	ldd	r25, Y+52	; 0x34
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	40 e8       	ldi	r20, 0x80	; 128
    39d2:	5f e3       	ldi	r21, 0x3F	; 63
    39d4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    39d8:	88 23       	and	r24, r24
    39da:	2c f4       	brge	.+10     	; 0x39e6 <CLCD_voidInit+0x8c>
		__ticks = 1;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	98 ab       	std	Y+48, r25	; 0x30
    39e2:	8f a7       	std	Y+47, r24	; 0x2f
    39e4:	3f c0       	rjmp	.+126    	; 0x3a64 <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    39e6:	69 a9       	ldd	r22, Y+49	; 0x31
    39e8:	7a a9       	ldd	r23, Y+50	; 0x32
    39ea:	8b a9       	ldd	r24, Y+51	; 0x33
    39ec:	9c a9       	ldd	r25, Y+52	; 0x34
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	3f ef       	ldi	r19, 0xFF	; 255
    39f2:	4f e7       	ldi	r20, 0x7F	; 127
    39f4:	57 e4       	ldi	r21, 0x47	; 71
    39f6:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    39fa:	18 16       	cp	r1, r24
    39fc:	4c f5       	brge	.+82     	; 0x3a50 <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3a00:	7e a9       	ldd	r23, Y+54	; 0x36
    3a02:	8f a9       	ldd	r24, Y+55	; 0x37
    3a04:	98 ad       	ldd	r25, Y+56	; 0x38
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e2       	ldi	r20, 0x20	; 32
    3a0c:	51 e4       	ldi	r21, 0x41	; 65
    3a0e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	bc 01       	movw	r22, r24
    3a18:	cd 01       	movw	r24, r26
    3a1a:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	98 ab       	std	Y+48, r25	; 0x30
    3a24:	8f a7       	std	Y+47, r24	; 0x2f
    3a26:	0f c0       	rjmp	.+30     	; 0x3a46 <CLCD_voidInit+0xec>
    3a28:	88 ec       	ldi	r24, 0xC8	; 200
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	9e a7       	std	Y+46, r25	; 0x2e
    3a2e:	8d a7       	std	Y+45, r24	; 0x2d
    3a30:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a32:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	f1 f7       	brne	.-4      	; 0x3a34 <CLCD_voidInit+0xda>
    3a38:	9e a7       	std	Y+46, r25	; 0x2e
    3a3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	98 ab       	std	Y+48, r25	; 0x30
    3a44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a46:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a48:	98 a9       	ldd	r25, Y+48	; 0x30
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	69 f7       	brne	.-38     	; 0x3a28 <CLCD_voidInit+0xce>
    3a4e:	14 c0       	rjmp	.+40     	; 0x3a78 <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a50:	69 a9       	ldd	r22, Y+49	; 0x31
    3a52:	7a a9       	ldd	r23, Y+50	; 0x32
    3a54:	8b a9       	ldd	r24, Y+51	; 0x33
    3a56:	9c a9       	ldd	r25, Y+52	; 0x34
    3a58:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	cb 01       	movw	r24, r22
    3a60:	98 ab       	std	Y+48, r25	; 0x30
    3a62:	8f a7       	std	Y+47, r24	; 0x2f
    3a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a66:	98 a9       	ldd	r25, Y+48	; 0x30
    3a68:	9c a7       	std	Y+44, r25	; 0x2c
    3a6a:	8b a7       	std	Y+43, r24	; 0x2b
    3a6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <CLCD_voidInit+0x116>
    3a74:	9c a7       	std	Y+44, r25	; 0x2c
    3a76:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	CLCD_voidSendCommand(CLCD_FUNCSET_8BIT);//Func Set
    3a78:	88 e3       	ldi	r24, 0x38	; 56
    3a7a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	a0 e8       	ldi	r26, 0x80	; 128
    3a84:	bf e3       	ldi	r27, 0x3F	; 63
    3a86:	8f a3       	std	Y+39, r24	; 0x27
    3a88:	98 a7       	std	Y+40, r25	; 0x28
    3a8a:	a9 a7       	std	Y+41, r26	; 0x29
    3a8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8e:	6f a1       	ldd	r22, Y+39	; 0x27
    3a90:	78 a5       	ldd	r23, Y+40	; 0x28
    3a92:	89 a5       	ldd	r24, Y+41	; 0x29
    3a94:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	4a ef       	ldi	r20, 0xFA	; 250
    3a9c:	54 e4       	ldi	r21, 0x44	; 68
    3a9e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	8b a3       	std	Y+35, r24	; 0x23
    3aa8:	9c a3       	std	Y+36, r25	; 0x24
    3aaa:	ad a3       	std	Y+37, r26	; 0x25
    3aac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aae:	6b a1       	ldd	r22, Y+35	; 0x23
    3ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	40 e8       	ldi	r20, 0x80	; 128
    3abc:	5f e3       	ldi	r21, 0x3F	; 63
    3abe:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    3ac2:	88 23       	and	r24, r24
    3ac4:	2c f4       	brge	.+10     	; 0x3ad0 <CLCD_voidInit+0x176>
		__ticks = 1;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	9a a3       	std	Y+34, r25	; 0x22
    3acc:	89 a3       	std	Y+33, r24	; 0x21
    3ace:	3f c0       	rjmp	.+126    	; 0x3b4e <CLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    3ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	3f ef       	ldi	r19, 0xFF	; 255
    3adc:	4f e7       	ldi	r20, 0x7F	; 127
    3ade:	57 e4       	ldi	r21, 0x47	; 71
    3ae0:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    3ae4:	18 16       	cp	r1, r24
    3ae6:	4c f5       	brge	.+82     	; 0x3b3a <CLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae8:	6f a1       	ldd	r22, Y+39	; 0x27
    3aea:	78 a5       	ldd	r23, Y+40	; 0x28
    3aec:	89 a5       	ldd	r24, Y+41	; 0x29
    3aee:	9a a5       	ldd	r25, Y+42	; 0x2a
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e2       	ldi	r20, 0x20	; 32
    3af6:	51 e4       	ldi	r21, 0x41	; 65
    3af8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	bc 01       	movw	r22, r24
    3b02:	cd 01       	movw	r24, r26
    3b04:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	9a a3       	std	Y+34, r25	; 0x22
    3b0e:	89 a3       	std	Y+33, r24	; 0x21
    3b10:	0f c0       	rjmp	.+30     	; 0x3b30 <CLCD_voidInit+0x1d6>
    3b12:	88 ec       	ldi	r24, 0xC8	; 200
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	98 a3       	std	Y+32, r25	; 0x20
    3b18:	8f 8f       	std	Y+31, r24	; 0x1f
    3b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	f1 f7       	brne	.-4      	; 0x3b1e <CLCD_voidInit+0x1c4>
    3b22:	98 a3       	std	Y+32, r25	; 0x20
    3b24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b26:	89 a1       	ldd	r24, Y+33	; 0x21
    3b28:	9a a1       	ldd	r25, Y+34	; 0x22
    3b2a:	01 97       	sbiw	r24, 0x01	; 1
    3b2c:	9a a3       	std	Y+34, r25	; 0x22
    3b2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b30:	89 a1       	ldd	r24, Y+33	; 0x21
    3b32:	9a a1       	ldd	r25, Y+34	; 0x22
    3b34:	00 97       	sbiw	r24, 0x00	; 0
    3b36:	69 f7       	brne	.-38     	; 0x3b12 <CLCD_voidInit+0x1b8>
    3b38:	14 c0       	rjmp	.+40     	; 0x3b62 <CLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b3a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b3c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b3e:	8d a1       	ldd	r24, Y+37	; 0x25
    3b40:	9e a1       	ldd	r25, Y+38	; 0x26
    3b42:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	9a a3       	std	Y+34, r25	; 0x22
    3b4c:	89 a3       	std	Y+33, r24	; 0x21
    3b4e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b50:	9a a1       	ldd	r25, Y+34	; 0x22
    3b52:	9e 8f       	std	Y+30, r25	; 0x1e
    3b54:	8d 8f       	std	Y+29, r24	; 0x1d
    3b56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	f1 f7       	brne	.-4      	; 0x3b5a <CLCD_voidInit+0x200>
    3b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b60:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(CLCD_DISPON_CURSOFF);//Display on and cursor off
    3b62:	8c e0       	ldi	r24, 0x0C	; 12
    3b64:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	a0 e8       	ldi	r26, 0x80	; 128
    3b6e:	bf e3       	ldi	r27, 0x3F	; 63
    3b70:	89 8f       	std	Y+25, r24	; 0x19
    3b72:	9a 8f       	std	Y+26, r25	; 0x1a
    3b74:	ab 8f       	std	Y+27, r26	; 0x1b
    3b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b78:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	4a ef       	ldi	r20, 0xFA	; 250
    3b86:	54 e4       	ldi	r21, 0x44	; 68
    3b88:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	8d 8b       	std	Y+21, r24	; 0x15
    3b92:	9e 8b       	std	Y+22, r25	; 0x16
    3b94:	af 8b       	std	Y+23, r26	; 0x17
    3b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b98:	6d 89       	ldd	r22, Y+21	; 0x15
    3b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e8       	ldi	r20, 0x80	; 128
    3ba6:	5f e3       	ldi	r21, 0x3F	; 63
    3ba8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    3bac:	88 23       	and	r24, r24
    3bae:	2c f4       	brge	.+10     	; 0x3bba <CLCD_voidInit+0x260>
		__ticks = 1;
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	9c 8b       	std	Y+20, r25	; 0x14
    3bb6:	8b 8b       	std	Y+19, r24	; 0x13
    3bb8:	3f c0       	rjmp	.+126    	; 0x3c38 <CLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    3bba:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	3f ef       	ldi	r19, 0xFF	; 255
    3bc6:	4f e7       	ldi	r20, 0x7F	; 127
    3bc8:	57 e4       	ldi	r21, 0x47	; 71
    3bca:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    3bce:	18 16       	cp	r1, r24
    3bd0:	4c f5       	brge	.+82     	; 0x3c24 <CLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	bc 01       	movw	r22, r24
    3bec:	cd 01       	movw	r24, r26
    3bee:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	9c 8b       	std	Y+20, r25	; 0x14
    3bf8:	8b 8b       	std	Y+19, r24	; 0x13
    3bfa:	0f c0       	rjmp	.+30     	; 0x3c1a <CLCD_voidInit+0x2c0>
    3bfc:	88 ec       	ldi	r24, 0xC8	; 200
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	9a 8b       	std	Y+18, r25	; 0x12
    3c02:	89 8b       	std	Y+17, r24	; 0x11
    3c04:	89 89       	ldd	r24, Y+17	; 0x11
    3c06:	9a 89       	ldd	r25, Y+18	; 0x12
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	f1 f7       	brne	.-4      	; 0x3c08 <CLCD_voidInit+0x2ae>
    3c0c:	9a 8b       	std	Y+18, r25	; 0x12
    3c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c10:	8b 89       	ldd	r24, Y+19	; 0x13
    3c12:	9c 89       	ldd	r25, Y+20	; 0x14
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	9c 8b       	std	Y+20, r25	; 0x14
    3c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c1e:	00 97       	sbiw	r24, 0x00	; 0
    3c20:	69 f7       	brne	.-38     	; 0x3bfc <CLCD_voidInit+0x2a2>
    3c22:	14 c0       	rjmp	.+40     	; 0x3c4c <CLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c24:	6d 89       	ldd	r22, Y+21	; 0x15
    3c26:	7e 89       	ldd	r23, Y+22	; 0x16
    3c28:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c2c:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	9c 8b       	std	Y+20, r25	; 0x14
    3c36:	8b 8b       	std	Y+19, r24	; 0x13
    3c38:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3c:	98 8b       	std	Y+16, r25	; 0x10
    3c3e:	8f 87       	std	Y+15, r24	; 0x0f
    3c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c42:	98 89       	ldd	r25, Y+16	; 0x10
    3c44:	01 97       	sbiw	r24, 0x01	; 1
    3c46:	f1 f7       	brne	.-4      	; 0x3c44 <CLCD_voidInit+0x2ea>
    3c48:	98 8b       	std	Y+16, r25	; 0x10
    3c4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(CLCD_CLR);//Display clear
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	a0 e0       	ldi	r26, 0x00	; 0
    3c58:	b0 e4       	ldi	r27, 0x40	; 64
    3c5a:	8b 87       	std	Y+11, r24	; 0x0b
    3c5c:	9c 87       	std	Y+12, r25	; 0x0c
    3c5e:	ad 87       	std	Y+13, r26	; 0x0d
    3c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	4a ef       	ldi	r20, 0xFA	; 250
    3c70:	54 e4       	ldi	r21, 0x44	; 68
    3c72:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	8f 83       	std	Y+7, r24	; 0x07
    3c7c:	98 87       	std	Y+8, r25	; 0x08
    3c7e:	a9 87       	std	Y+9, r26	; 0x09
    3c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c82:	6f 81       	ldd	r22, Y+7	; 0x07
    3c84:	78 85       	ldd	r23, Y+8	; 0x08
    3c86:	89 85       	ldd	r24, Y+9	; 0x09
    3c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	40 e8       	ldi	r20, 0x80	; 128
    3c90:	5f e3       	ldi	r21, 0x3F	; 63
    3c92:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    3c96:	88 23       	and	r24, r24
    3c98:	2c f4       	brge	.+10     	; 0x3ca4 <CLCD_voidInit+0x34a>
		__ticks = 1;
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	9e 83       	std	Y+6, r25	; 0x06
    3ca0:	8d 83       	std	Y+5, r24	; 0x05
    3ca2:	3f c0       	rjmp	.+126    	; 0x3d22 <CLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	78 85       	ldd	r23, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	3f ef       	ldi	r19, 0xFF	; 255
    3cb0:	4f e7       	ldi	r20, 0x7F	; 127
    3cb2:	57 e4       	ldi	r21, 0x47	; 71
    3cb4:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    3cb8:	18 16       	cp	r1, r24
    3cba:	4c f5       	brge	.+82     	; 0x3d0e <CLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e2       	ldi	r20, 0x20	; 32
    3cca:	51 e4       	ldi	r21, 0x41	; 65
    3ccc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	bc 01       	movw	r22, r24
    3cd6:	cd 01       	movw	r24, r26
    3cd8:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	9e 83       	std	Y+6, r25	; 0x06
    3ce2:	8d 83       	std	Y+5, r24	; 0x05
    3ce4:	0f c0       	rjmp	.+30     	; 0x3d04 <CLCD_voidInit+0x3aa>
    3ce6:	88 ec       	ldi	r24, 0xC8	; 200
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	9c 83       	std	Y+4, r25	; 0x04
    3cec:	8b 83       	std	Y+3, r24	; 0x03
    3cee:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <CLCD_voidInit+0x398>
    3cf6:	9c 83       	std	Y+4, r25	; 0x04
    3cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	9e 83       	std	Y+6, r25	; 0x06
    3d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	9e 81       	ldd	r25, Y+6	; 0x06
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	69 f7       	brne	.-38     	; 0x3ce6 <CLCD_voidInit+0x38c>
    3d0c:	14 c0       	rjmp	.+40     	; 0x3d36 <CLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d10:	78 85       	ldd	r23, Y+8	; 0x08
    3d12:	89 85       	ldd	r24, Y+9	; 0x09
    3d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d16:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	9e 83       	std	Y+6, r25	; 0x06
    3d20:	8d 83       	std	Y+5, r24	; 0x05
    3d22:	8d 81       	ldd	r24, Y+5	; 0x05
    3d24:	9e 81       	ldd	r25, Y+6	; 0x06
    3d26:	9a 83       	std	Y+2, r25	; 0x02
    3d28:	89 83       	std	Y+1, r24	; 0x01
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	f1 f7       	brne	.-4      	; 0x3d2e <CLCD_voidInit+0x3d4>
    3d32:	9a 83       	std	Y+2, r25	; 0x02
    3d34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand(CLCD_ENTRYMODE);//Entry Mode no shift
    3d36:	86 e0       	ldi	r24, 0x06	; 6
    3d38:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>





}
    3d3c:	e8 96       	adiw	r28, 0x38	; 56
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	cf 91       	pop	r28
    3d4a:	df 91       	pop	r29
    3d4c:	08 95       	ret

00003d4e <CLCD_voidSendChar>:
void CLCD_voidSendChar		(u8 Copy_u8Data)
{
    3d4e:	df 93       	push	r29
    3d50:	cf 93       	push	r28
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62
    3d56:	6d 97       	sbiw	r28, 0x1d	; 29
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_enumSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3d68:	0e 94 46 18 	call	0x308c	; 0x308c <DIO_enumSetPortValue>
	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_RS,DIO_HIGH);
    3d6c:	83 e0       	ldi	r24, 0x03	; 3
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	41 e0       	ldi	r20, 0x01	; 1
    3d72:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_RW,DIO_LOW);
    3d76:	83 e0       	ldi	r24, 0x03	; 3
    3d78:	61 e0       	ldi	r22, 0x01	; 1
    3d7a:	40 e0       	ldi	r20, 0x00	; 0
    3d7c:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>

	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_EN,DIO_HIGH);
    3d80:	83 e0       	ldi	r24, 0x03	; 3
    3d82:	62 e0       	ldi	r22, 0x02	; 2
    3d84:	41 e0       	ldi	r20, 0x01	; 1
    3d86:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    3d8a:	80 e0       	ldi	r24, 0x00	; 0
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	a0 e8       	ldi	r26, 0x80	; 128
    3d90:	bf e3       	ldi	r27, 0x3F	; 63
    3d92:	89 8f       	std	Y+25, r24	; 0x19
    3d94:	9a 8f       	std	Y+26, r25	; 0x1a
    3d96:	ab 8f       	std	Y+27, r26	; 0x1b
    3d98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    3d9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3da0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	4a ef       	ldi	r20, 0xFA	; 250
    3da8:	54 e4       	ldi	r21, 0x44	; 68
    3daa:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	8d 8b       	std	Y+21, r24	; 0x15
    3db4:	9e 8b       	std	Y+22, r25	; 0x16
    3db6:	af 8b       	std	Y+23, r26	; 0x17
    3db8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dba:	6d 89       	ldd	r22, Y+21	; 0x15
    3dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	40 e8       	ldi	r20, 0x80	; 128
    3dc8:	5f e3       	ldi	r21, 0x3F	; 63
    3dca:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    3dce:	88 23       	and	r24, r24
    3dd0:	2c f4       	brge	.+10     	; 0x3ddc <CLCD_voidSendChar+0x8e>
		__ticks = 1;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	9c 8b       	std	Y+20, r25	; 0x14
    3dd8:	8b 8b       	std	Y+19, r24	; 0x13
    3dda:	3f c0       	rjmp	.+126    	; 0x3e5a <CLCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    3ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    3dde:	7e 89       	ldd	r23, Y+22	; 0x16
    3de0:	8f 89       	ldd	r24, Y+23	; 0x17
    3de2:	98 8d       	ldd	r25, Y+24	; 0x18
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	3f ef       	ldi	r19, 0xFF	; 255
    3de8:	4f e7       	ldi	r20, 0x7F	; 127
    3dea:	57 e4       	ldi	r21, 0x47	; 71
    3dec:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    3df0:	18 16       	cp	r1, r24
    3df2:	4c f5       	brge	.+82     	; 0x3e46 <CLCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df4:	69 8d       	ldd	r22, Y+25	; 0x19
    3df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 e2       	ldi	r20, 0x20	; 32
    3e02:	51 e4       	ldi	r21, 0x41	; 65
    3e04:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3e08:	dc 01       	movw	r26, r24
    3e0a:	cb 01       	movw	r24, r22
    3e0c:	bc 01       	movw	r22, r24
    3e0e:	cd 01       	movw	r24, r26
    3e10:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	9c 8b       	std	Y+20, r25	; 0x14
    3e1a:	8b 8b       	std	Y+19, r24	; 0x13
    3e1c:	0f c0       	rjmp	.+30     	; 0x3e3c <CLCD_voidSendChar+0xee>
    3e1e:	88 ec       	ldi	r24, 0xC8	; 200
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	9a 8b       	std	Y+18, r25	; 0x12
    3e24:	89 8b       	std	Y+17, r24	; 0x11
    3e26:	89 89       	ldd	r24, Y+17	; 0x11
    3e28:	9a 89       	ldd	r25, Y+18	; 0x12
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
    3e2c:	f1 f7       	brne	.-4      	; 0x3e2a <CLCD_voidSendChar+0xdc>
    3e2e:	9a 8b       	std	Y+18, r25	; 0x12
    3e30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e32:	8b 89       	ldd	r24, Y+19	; 0x13
    3e34:	9c 89       	ldd	r25, Y+20	; 0x14
    3e36:	01 97       	sbiw	r24, 0x01	; 1
    3e38:	9c 8b       	std	Y+20, r25	; 0x14
    3e3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3e40:	00 97       	sbiw	r24, 0x00	; 0
    3e42:	69 f7       	brne	.-38     	; 0x3e1e <CLCD_voidSendChar+0xd0>
    3e44:	14 c0       	rjmp	.+40     	; 0x3e6e <CLCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e46:	6d 89       	ldd	r22, Y+21	; 0x15
    3e48:	7e 89       	ldd	r23, Y+22	; 0x16
    3e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3e4e:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	9c 8b       	std	Y+20, r25	; 0x14
    3e58:	8b 8b       	std	Y+19, r24	; 0x13
    3e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e5e:	98 8b       	std	Y+16, r25	; 0x10
    3e60:	8f 87       	std	Y+15, r24	; 0x0f
    3e62:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e64:	98 89       	ldd	r25, Y+16	; 0x10
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <CLCD_voidSendChar+0x118>
    3e6a:	98 8b       	std	Y+16, r25	; 0x10
    3e6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_EN,DIO_LOW);
    3e6e:	83 e0       	ldi	r24, 0x03	; 3
    3e70:	62 e0       	ldi	r22, 0x02	; 2
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    3e74:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	a0 e8       	ldi	r26, 0x80	; 128
    3e7e:	bf e3       	ldi	r27, 0x3F	; 63
    3e80:	8b 87       	std	Y+11, r24	; 0x0b
    3e82:	9c 87       	std	Y+12, r25	; 0x0c
    3e84:	ad 87       	std	Y+13, r26	; 0x0d
    3e86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e90:	20 e0       	ldi	r18, 0x00	; 0
    3e92:	30 e0       	ldi	r19, 0x00	; 0
    3e94:	4a ef       	ldi	r20, 0xFA	; 250
    3e96:	54 e4       	ldi	r21, 0x44	; 68
    3e98:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	8f 83       	std	Y+7, r24	; 0x07
    3ea2:	98 87       	std	Y+8, r25	; 0x08
    3ea4:	a9 87       	std	Y+9, r26	; 0x09
    3ea6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eaa:	78 85       	ldd	r23, Y+8	; 0x08
    3eac:	89 85       	ldd	r24, Y+9	; 0x09
    3eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb0:	20 e0       	ldi	r18, 0x00	; 0
    3eb2:	30 e0       	ldi	r19, 0x00	; 0
    3eb4:	40 e8       	ldi	r20, 0x80	; 128
    3eb6:	5f e3       	ldi	r21, 0x3F	; 63
    3eb8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    3ebc:	88 23       	and	r24, r24
    3ebe:	2c f4       	brge	.+10     	; 0x3eca <CLCD_voidSendChar+0x17c>
		__ticks = 1;
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	9e 83       	std	Y+6, r25	; 0x06
    3ec6:	8d 83       	std	Y+5, r24	; 0x05
    3ec8:	3f c0       	rjmp	.+126    	; 0x3f48 <CLCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    3eca:	6f 81       	ldd	r22, Y+7	; 0x07
    3ecc:	78 85       	ldd	r23, Y+8	; 0x08
    3ece:	89 85       	ldd	r24, Y+9	; 0x09
    3ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	3f ef       	ldi	r19, 0xFF	; 255
    3ed6:	4f e7       	ldi	r20, 0x7F	; 127
    3ed8:	57 e4       	ldi	r21, 0x47	; 71
    3eda:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    3ede:	18 16       	cp	r1, r24
    3ee0:	4c f5       	brge	.+82     	; 0x3f34 <CLCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	40 e2       	ldi	r20, 0x20	; 32
    3ef0:	51 e4       	ldi	r21, 0x41	; 65
    3ef2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	bc 01       	movw	r22, r24
    3efc:	cd 01       	movw	r24, r26
    3efe:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3f02:	dc 01       	movw	r26, r24
    3f04:	cb 01       	movw	r24, r22
    3f06:	9e 83       	std	Y+6, r25	; 0x06
    3f08:	8d 83       	std	Y+5, r24	; 0x05
    3f0a:	0f c0       	rjmp	.+30     	; 0x3f2a <CLCD_voidSendChar+0x1dc>
    3f0c:	88 ec       	ldi	r24, 0xC8	; 200
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	9c 83       	std	Y+4, r25	; 0x04
    3f12:	8b 83       	std	Y+3, r24	; 0x03
    3f14:	8b 81       	ldd	r24, Y+3	; 0x03
    3f16:	9c 81       	ldd	r25, Y+4	; 0x04
    3f18:	01 97       	sbiw	r24, 0x01	; 1
    3f1a:	f1 f7       	brne	.-4      	; 0x3f18 <CLCD_voidSendChar+0x1ca>
    3f1c:	9c 83       	std	Y+4, r25	; 0x04
    3f1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f20:	8d 81       	ldd	r24, Y+5	; 0x05
    3f22:	9e 81       	ldd	r25, Y+6	; 0x06
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	9e 83       	std	Y+6, r25	; 0x06
    3f28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	69 f7       	brne	.-38     	; 0x3f0c <CLCD_voidSendChar+0x1be>
    3f32:	14 c0       	rjmp	.+40     	; 0x3f5c <CLCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f34:	6f 81       	ldd	r22, Y+7	; 0x07
    3f36:	78 85       	ldd	r23, Y+8	; 0x08
    3f38:	89 85       	ldd	r24, Y+9	; 0x09
    3f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f3c:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    3f40:	dc 01       	movw	r26, r24
    3f42:	cb 01       	movw	r24, r22
    3f44:	9e 83       	std	Y+6, r25	; 0x06
    3f46:	8d 83       	std	Y+5, r24	; 0x05
    3f48:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f4c:	9a 83       	std	Y+2, r25	; 0x02
    3f4e:	89 83       	std	Y+1, r24	; 0x01
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
    3f52:	9a 81       	ldd	r25, Y+2	; 0x02
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <CLCD_voidSendChar+0x206>
    3f58:	9a 83       	std	Y+2, r25	; 0x02
    3f5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    3f5c:	6d 96       	adiw	r28, 0x1d	; 29
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	cf 91       	pop	r28
    3f6a:	df 91       	pop	r29
    3f6c:	08 95       	ret

00003f6e <CLCD_voidSendCommand>:
void CLCD_voidSendCommand	(u8 Copy_u8Command)
{
    3f6e:	df 93       	push	r29
    3f70:	cf 93       	push	r28
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	6d 97       	sbiw	r28, 0x1d	; 29
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enumSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3f88:	0e 94 46 18 	call	0x308c	; 0x308c <DIO_enumSetPortValue>
	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_RS,DIO_LOW);
    3f8c:	83 e0       	ldi	r24, 0x03	; 3
    3f8e:	60 e0       	ldi	r22, 0x00	; 0
    3f90:	40 e0       	ldi	r20, 0x00	; 0
    3f92:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_RW,DIO_LOW);
    3f96:	83 e0       	ldi	r24, 0x03	; 3
    3f98:	61 e0       	ldi	r22, 0x01	; 1
    3f9a:	40 e0       	ldi	r20, 0x00	; 0
    3f9c:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>

	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_EN,DIO_HIGH);
    3fa0:	83 e0       	ldi	r24, 0x03	; 3
    3fa2:	62 e0       	ldi	r22, 0x02	; 2
    3fa4:	41 e0       	ldi	r20, 0x01	; 1
    3fa6:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	a0 e8       	ldi	r26, 0x80	; 128
    3fb0:	bf e3       	ldi	r27, 0x3F	; 63
    3fb2:	89 8f       	std	Y+25, r24	; 0x19
    3fb4:	9a 8f       	std	Y+26, r25	; 0x1a
    3fb6:	ab 8f       	std	Y+27, r26	; 0x1b
    3fb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fba:	69 8d       	ldd	r22, Y+25	; 0x19
    3fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	4a ef       	ldi	r20, 0xFA	; 250
    3fc8:	54 e4       	ldi	r21, 0x44	; 68
    3fca:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    3fce:	dc 01       	movw	r26, r24
    3fd0:	cb 01       	movw	r24, r22
    3fd2:	8d 8b       	std	Y+21, r24	; 0x15
    3fd4:	9e 8b       	std	Y+22, r25	; 0x16
    3fd6:	af 8b       	std	Y+23, r26	; 0x17
    3fd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3fda:	6d 89       	ldd	r22, Y+21	; 0x15
    3fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3fde:	8f 89       	ldd	r24, Y+23	; 0x17
    3fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e8       	ldi	r20, 0x80	; 128
    3fe8:	5f e3       	ldi	r21, 0x3F	; 63
    3fea:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    3fee:	88 23       	and	r24, r24
    3ff0:	2c f4       	brge	.+10     	; 0x3ffc <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	9c 8b       	std	Y+20, r25	; 0x14
    3ff8:	8b 8b       	std	Y+19, r24	; 0x13
    3ffa:	3f c0       	rjmp	.+126    	; 0x407a <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    3ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    4000:	8f 89       	ldd	r24, Y+23	; 0x17
    4002:	98 8d       	ldd	r25, Y+24	; 0x18
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	3f ef       	ldi	r19, 0xFF	; 255
    4008:	4f e7       	ldi	r20, 0x7F	; 127
    400a:	57 e4       	ldi	r21, 0x47	; 71
    400c:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    4010:	18 16       	cp	r1, r24
    4012:	4c f5       	brge	.+82     	; 0x4066 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4014:	69 8d       	ldd	r22, Y+25	; 0x19
    4016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    401a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e2       	ldi	r20, 0x20	; 32
    4022:	51 e4       	ldi	r21, 0x41	; 65
    4024:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	bc 01       	movw	r22, r24
    402e:	cd 01       	movw	r24, r26
    4030:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	9c 8b       	std	Y+20, r25	; 0x14
    403a:	8b 8b       	std	Y+19, r24	; 0x13
    403c:	0f c0       	rjmp	.+30     	; 0x405c <CLCD_voidSendCommand+0xee>
    403e:	88 ec       	ldi	r24, 0xC8	; 200
    4040:	90 e0       	ldi	r25, 0x00	; 0
    4042:	9a 8b       	std	Y+18, r25	; 0x12
    4044:	89 8b       	std	Y+17, r24	; 0x11
    4046:	89 89       	ldd	r24, Y+17	; 0x11
    4048:	9a 89       	ldd	r25, Y+18	; 0x12
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	f1 f7       	brne	.-4      	; 0x404a <CLCD_voidSendCommand+0xdc>
    404e:	9a 8b       	std	Y+18, r25	; 0x12
    4050:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4052:	8b 89       	ldd	r24, Y+19	; 0x13
    4054:	9c 89       	ldd	r25, Y+20	; 0x14
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	9c 8b       	std	Y+20, r25	; 0x14
    405a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    405c:	8b 89       	ldd	r24, Y+19	; 0x13
    405e:	9c 89       	ldd	r25, Y+20	; 0x14
    4060:	00 97       	sbiw	r24, 0x00	; 0
    4062:	69 f7       	brne	.-38     	; 0x403e <CLCD_voidSendCommand+0xd0>
    4064:	14 c0       	rjmp	.+40     	; 0x408e <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4066:	6d 89       	ldd	r22, Y+21	; 0x15
    4068:	7e 89       	ldd	r23, Y+22	; 0x16
    406a:	8f 89       	ldd	r24, Y+23	; 0x17
    406c:	98 8d       	ldd	r25, Y+24	; 0x18
    406e:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	9c 8b       	std	Y+20, r25	; 0x14
    4078:	8b 8b       	std	Y+19, r24	; 0x13
    407a:	8b 89       	ldd	r24, Y+19	; 0x13
    407c:	9c 89       	ldd	r25, Y+20	; 0x14
    407e:	98 8b       	std	Y+16, r25	; 0x10
    4080:	8f 87       	std	Y+15, r24	; 0x0f
    4082:	8f 85       	ldd	r24, Y+15	; 0x0f
    4084:	98 89       	ldd	r25, Y+16	; 0x10
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	f1 f7       	brne	.-4      	; 0x4086 <CLCD_voidSendCommand+0x118>
    408a:	98 8b       	std	Y+16, r25	; 0x10
    408c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPINValue(CLCD_CONTROL_PORT,CLCD_EN,DIO_LOW);
    408e:	83 e0       	ldi	r24, 0x03	; 3
    4090:	62 e0       	ldi	r22, 0x02	; 2
    4092:	40 e0       	ldi	r20, 0x00	; 0
    4094:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	a0 e8       	ldi	r26, 0x80	; 128
    409e:	bf e3       	ldi	r27, 0x3F	; 63
    40a0:	8b 87       	std	Y+11, r24	; 0x0b
    40a2:	9c 87       	std	Y+12, r25	; 0x0c
    40a4:	ad 87       	std	Y+13, r26	; 0x0d
    40a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    40aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4a ef       	ldi	r20, 0xFA	; 250
    40b6:	54 e4       	ldi	r21, 0x44	; 68
    40b8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	8f 83       	std	Y+7, r24	; 0x07
    40c2:	98 87       	std	Y+8, r25	; 0x08
    40c4:	a9 87       	std	Y+9, r26	; 0x09
    40c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40c8:	6f 81       	ldd	r22, Y+7	; 0x07
    40ca:	78 85       	ldd	r23, Y+8	; 0x08
    40cc:	89 85       	ldd	r24, Y+9	; 0x09
    40ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	5f e3       	ldi	r21, 0x3F	; 63
    40d8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    40dc:	88 23       	and	r24, r24
    40de:	2c f4       	brge	.+10     	; 0x40ea <CLCD_voidSendCommand+0x17c>
		__ticks = 1;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	9e 83       	std	Y+6, r25	; 0x06
    40e6:	8d 83       	std	Y+5, r24	; 0x05
    40e8:	3f c0       	rjmp	.+126    	; 0x4168 <CLCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    40ea:	6f 81       	ldd	r22, Y+7	; 0x07
    40ec:	78 85       	ldd	r23, Y+8	; 0x08
    40ee:	89 85       	ldd	r24, Y+9	; 0x09
    40f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	3f ef       	ldi	r19, 0xFF	; 255
    40f6:	4f e7       	ldi	r20, 0x7F	; 127
    40f8:	57 e4       	ldi	r21, 0x47	; 71
    40fa:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    40fe:	18 16       	cp	r1, r24
    4100:	4c f5       	brge	.+82     	; 0x4154 <CLCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4102:	6b 85       	ldd	r22, Y+11	; 0x0b
    4104:	7c 85       	ldd	r23, Y+12	; 0x0c
    4106:	8d 85       	ldd	r24, Y+13	; 0x0d
    4108:	9e 85       	ldd	r25, Y+14	; 0x0e
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e2       	ldi	r20, 0x20	; 32
    4110:	51 e4       	ldi	r21, 0x41	; 65
    4112:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	bc 01       	movw	r22, r24
    411c:	cd 01       	movw	r24, r26
    411e:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	9e 83       	std	Y+6, r25	; 0x06
    4128:	8d 83       	std	Y+5, r24	; 0x05
    412a:	0f c0       	rjmp	.+30     	; 0x414a <CLCD_voidSendCommand+0x1dc>
    412c:	88 ec       	ldi	r24, 0xC8	; 200
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9c 83       	std	Y+4, r25	; 0x04
    4132:	8b 83       	std	Y+3, r24	; 0x03
    4134:	8b 81       	ldd	r24, Y+3	; 0x03
    4136:	9c 81       	ldd	r25, Y+4	; 0x04
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <CLCD_voidSendCommand+0x1ca>
    413c:	9c 83       	std	Y+4, r25	; 0x04
    413e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	8d 81       	ldd	r24, Y+5	; 0x05
    4142:	9e 81       	ldd	r25, Y+6	; 0x06
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	9e 83       	std	Y+6, r25	; 0x06
    4148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	8d 81       	ldd	r24, Y+5	; 0x05
    414c:	9e 81       	ldd	r25, Y+6	; 0x06
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	69 f7       	brne	.-38     	; 0x412c <CLCD_voidSendCommand+0x1be>
    4152:	14 c0       	rjmp	.+40     	; 0x417c <CLCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	6f 81       	ldd	r22, Y+7	; 0x07
    4156:	78 85       	ldd	r23, Y+8	; 0x08
    4158:	89 85       	ldd	r24, Y+9	; 0x09
    415a:	9a 85       	ldd	r25, Y+10	; 0x0a
    415c:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9e 83       	std	Y+6, r25	; 0x06
    4166:	8d 83       	std	Y+5, r24	; 0x05
    4168:	8d 81       	ldd	r24, Y+5	; 0x05
    416a:	9e 81       	ldd	r25, Y+6	; 0x06
    416c:	9a 83       	std	Y+2, r25	; 0x02
    416e:	89 83       	std	Y+1, r24	; 0x01
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	9a 81       	ldd	r25, Y+2	; 0x02
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <CLCD_voidSendCommand+0x206>
    4178:	9a 83       	std	Y+2, r25	; 0x02
    417a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    417c:	6d 96       	adiw	r28, 0x1d	; 29
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	08 95       	ret

0000418e <CLCD_voidSendString>:
void CLCD_voidSendString(u8* string)
{
    418e:	df 93       	push	r29
    4190:	cf 93       	push	r28
    4192:	00 d0       	rcall	.+0      	; 0x4194 <CLCD_voidSendString+0x6>
    4194:	0f 92       	push	r0
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	9b 83       	std	Y+3, r25	; 0x03
    419c:	8a 83       	std	Y+2, r24	; 0x02

	u8 i =0;
    419e:	19 82       	std	Y+1, r1	; 0x01
    41a0:	0e c0       	rjmp	.+28     	; 0x41be <CLCD_voidSendString+0x30>
	while(string[i] != '\0')
	{
		CLCD_voidSendChar(string[i]);
    41a2:	89 81       	ldd	r24, Y+1	; 0x01
    41a4:	28 2f       	mov	r18, r24
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	9b 81       	ldd	r25, Y+3	; 0x03
    41ac:	fc 01       	movw	r30, r24
    41ae:	e2 0f       	add	r30, r18
    41b0:	f3 1f       	adc	r31, r19
    41b2:	80 81       	ld	r24, Z
    41b4:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <CLCD_voidSendChar>
		i++;
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	8f 5f       	subi	r24, 0xFF	; 255
    41bc:	89 83       	std	Y+1, r24	; 0x01
}
void CLCD_voidSendString(u8* string)
{

	u8 i =0;
	while(string[i] != '\0')
    41be:	89 81       	ldd	r24, Y+1	; 0x01
    41c0:	28 2f       	mov	r18, r24
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	8a 81       	ldd	r24, Y+2	; 0x02
    41c6:	9b 81       	ldd	r25, Y+3	; 0x03
    41c8:	fc 01       	movw	r30, r24
    41ca:	e2 0f       	add	r30, r18
    41cc:	f3 1f       	adc	r31, r19
    41ce:	80 81       	ld	r24, Z
    41d0:	88 23       	and	r24, r24
    41d2:	39 f7       	brne	.-50     	; 0x41a2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendChar(string[i]);
		i++;

	}
}
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	cf 91       	pop	r28
    41dc:	df 91       	pop	r29
    41de:	08 95       	ret

000041e0 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u64 Copy_u64Number)
{
    41e0:	af 92       	push	r10
    41e2:	bf 92       	push	r11
    41e4:	cf 92       	push	r12
    41e6:	df 92       	push	r13
    41e8:	ef 92       	push	r14
    41ea:	ff 92       	push	r15
    41ec:	0f 93       	push	r16
    41ee:	1f 93       	push	r17
    41f0:	df 93       	push	r29
    41f2:	cf 93       	push	r28
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
    41f8:	c7 56       	subi	r28, 0x67	; 103
    41fa:	d0 40       	sbci	r29, 0x00	; 0
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	f8 94       	cli
    4200:	de bf       	out	0x3e, r29	; 62
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	cd bf       	out	0x3d, r28	; 61
    4206:	2a 87       	std	Y+10, r18	; 0x0a
    4208:	3b 87       	std	Y+11, r19	; 0x0b
    420a:	4c 87       	std	Y+12, r20	; 0x0c
    420c:	5d 87       	std	Y+13, r21	; 0x0d
    420e:	6e 87       	std	Y+14, r22	; 0x0e
    4210:	7f 87       	std	Y+15, r23	; 0x0f
    4212:	88 8b       	std	Y+16, r24	; 0x10
    4214:	99 8b       	std	Y+17, r25	; 0x11
	u64 LOC_u64R_Number=0;
    4216:	1a 82       	std	Y+2, r1	; 0x02
    4218:	1b 82       	std	Y+3, r1	; 0x03
    421a:	1c 82       	std	Y+4, r1	; 0x04
    421c:	1d 82       	std	Y+5, r1	; 0x05
    421e:	1e 82       	std	Y+6, r1	; 0x06
    4220:	1f 82       	std	Y+7, r1	; 0x07
    4222:	18 86       	std	Y+8, r1	; 0x08
    4224:	19 86       	std	Y+9, r1	; 0x09
    4226:	6e c3       	rjmp	.+1756   	; 0x4904 <CLCD_voidSendNumber+0x724>
		while(Copy_u64Number!=0)
		{
			LOC_u64R_Number=LOC_u64R_Number+(Copy_u64Number%10);
    4228:	aa 84       	ldd	r10, Y+10	; 0x0a
    422a:	bb 84       	ldd	r11, Y+11	; 0x0b
    422c:	cc 84       	ldd	r12, Y+12	; 0x0c
    422e:	dd 84       	ldd	r13, Y+13	; 0x0d
    4230:	ee 84       	ldd	r14, Y+14	; 0x0e
    4232:	ff 84       	ldd	r15, Y+15	; 0x0f
    4234:	08 89       	ldd	r16, Y+16	; 0x10
    4236:	19 89       	ldd	r17, Y+17	; 0x11
    4238:	2a 2d       	mov	r18, r10
    423a:	3b 2d       	mov	r19, r11
    423c:	4c 2d       	mov	r20, r12
    423e:	5d 2d       	mov	r21, r13
    4240:	6e 2d       	mov	r22, r14
    4242:	7f 2d       	mov	r23, r15
    4244:	80 2f       	mov	r24, r16
    4246:	91 2f       	mov	r25, r17
    4248:	0f 2e       	mov	r0, r31
    424a:	fa e0       	ldi	r31, 0x0A	; 10
    424c:	af 2e       	mov	r10, r31
    424e:	f0 2d       	mov	r31, r0
    4250:	bb 24       	eor	r11, r11
    4252:	cc 24       	eor	r12, r12
    4254:	dd 24       	eor	r13, r13
    4256:	ee 24       	eor	r14, r14
    4258:	ff 24       	eor	r15, r15
    425a:	00 e0       	ldi	r16, 0x00	; 0
    425c:	10 e0       	ldi	r17, 0x00	; 0
    425e:	0e 94 61 07 	call	0xec2	; 0xec2 <__umoddi3>
    4262:	a2 2e       	mov	r10, r18
    4264:	b3 2e       	mov	r11, r19
    4266:	c4 2e       	mov	r12, r20
    4268:	d5 2e       	mov	r13, r21
    426a:	e6 2e       	mov	r14, r22
    426c:	f7 2e       	mov	r15, r23
    426e:	08 2f       	mov	r16, r24
    4270:	19 2f       	mov	r17, r25
    4272:	aa 8a       	std	Y+18, r10	; 0x12
    4274:	bb 8a       	std	Y+19, r11	; 0x13
    4276:	cc 8a       	std	Y+20, r12	; 0x14
    4278:	dd 8a       	std	Y+21, r13	; 0x15
    427a:	ee 8a       	std	Y+22, r14	; 0x16
    427c:	ff 8a       	std	Y+23, r15	; 0x17
    427e:	08 8f       	std	Y+24, r16	; 0x18
    4280:	19 8f       	std	Y+25, r17	; 0x19
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
    4284:	8a 8f       	std	Y+26, r24	; 0x1a
    4286:	9b 81       	ldd	r25, Y+3	; 0x03
    4288:	9b 8f       	std	Y+27, r25	; 0x1b
    428a:	8c 81       	ldd	r24, Y+4	; 0x04
    428c:	8c 8f       	std	Y+28, r24	; 0x1c
    428e:	9d 81       	ldd	r25, Y+5	; 0x05
    4290:	9d 8f       	std	Y+29, r25	; 0x1d
    4292:	8e 81       	ldd	r24, Y+6	; 0x06
    4294:	8e 8f       	std	Y+30, r24	; 0x1e
    4296:	9f 81       	ldd	r25, Y+7	; 0x07
    4298:	9f 8f       	std	Y+31, r25	; 0x1f
    429a:	88 85       	ldd	r24, Y+8	; 0x08
    429c:	88 a3       	std	Y+32, r24	; 0x20
    429e:	99 85       	ldd	r25, Y+9	; 0x09
    42a0:	99 a3       	std	Y+33, r25	; 0x21
    42a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    42a4:	9a 89       	ldd	r25, Y+18	; 0x12
    42a6:	89 0f       	add	r24, r25
    42a8:	8a a3       	std	Y+34, r24	; 0x22
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	8a a7       	std	Y+42, r24	; 0x2a
    42ae:	9a a1       	ldd	r25, Y+34	; 0x22
    42b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    42b2:	98 17       	cp	r25, r24
    42b4:	08 f0       	brcs	.+2      	; 0x42b8 <CLCD_voidSendNumber+0xd8>
    42b6:	1a a6       	std	Y+42, r1	; 0x2a
    42b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    42ba:	8b 89       	ldd	r24, Y+19	; 0x13
    42bc:	98 0f       	add	r25, r24
    42be:	9b a3       	std	Y+35, r25	; 0x23
    42c0:	91 e0       	ldi	r25, 0x01	; 1
    42c2:	9b a7       	std	Y+43, r25	; 0x2b
    42c4:	8b a1       	ldd	r24, Y+35	; 0x23
    42c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    42c8:	89 17       	cp	r24, r25
    42ca:	08 f0       	brcs	.+2      	; 0x42ce <CLCD_voidSendNumber+0xee>
    42cc:	1b a6       	std	Y+43, r1	; 0x2b
    42ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    42d0:	9b a1       	ldd	r25, Y+35	; 0x23
    42d2:	89 0f       	add	r24, r25
    42d4:	8c a7       	std	Y+44, r24	; 0x2c
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	8d a7       	std	Y+45, r24	; 0x2d
    42da:	9c a5       	ldd	r25, Y+44	; 0x2c
    42dc:	8b a1       	ldd	r24, Y+35	; 0x23
    42de:	98 17       	cp	r25, r24
    42e0:	08 f0       	brcs	.+2      	; 0x42e4 <CLCD_voidSendNumber+0x104>
    42e2:	1d a6       	std	Y+45, r1	; 0x2d
    42e4:	9b a5       	ldd	r25, Y+43	; 0x2b
    42e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    42e8:	98 2b       	or	r25, r24
    42ea:	9b a7       	std	Y+43, r25	; 0x2b
    42ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    42ee:	9b a3       	std	Y+35, r25	; 0x23
    42f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    42f2:	9c 89       	ldd	r25, Y+20	; 0x14
    42f4:	89 0f       	add	r24, r25
    42f6:	8c a3       	std	Y+36, r24	; 0x24
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	8e a7       	std	Y+46, r24	; 0x2e
    42fc:	9c a1       	ldd	r25, Y+36	; 0x24
    42fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4300:	98 17       	cp	r25, r24
    4302:	08 f0       	brcs	.+2      	; 0x4306 <CLCD_voidSendNumber+0x126>
    4304:	1e a6       	std	Y+46, r1	; 0x2e
    4306:	9b a5       	ldd	r25, Y+43	; 0x2b
    4308:	8c a1       	ldd	r24, Y+36	; 0x24
    430a:	98 0f       	add	r25, r24
    430c:	9f a7       	std	Y+47, r25	; 0x2f
    430e:	91 e0       	ldi	r25, 0x01	; 1
    4310:	98 ab       	std	Y+48, r25	; 0x30
    4312:	8f a5       	ldd	r24, Y+47	; 0x2f
    4314:	9c a1       	ldd	r25, Y+36	; 0x24
    4316:	89 17       	cp	r24, r25
    4318:	08 f0       	brcs	.+2      	; 0x431c <CLCD_voidSendNumber+0x13c>
    431a:	18 aa       	std	Y+48, r1	; 0x30
    431c:	8e a5       	ldd	r24, Y+46	; 0x2e
    431e:	98 a9       	ldd	r25, Y+48	; 0x30
    4320:	89 2b       	or	r24, r25
    4322:	8e a7       	std	Y+46, r24	; 0x2e
    4324:	8f a5       	ldd	r24, Y+47	; 0x2f
    4326:	8c a3       	std	Y+36, r24	; 0x24
    4328:	9d 8d       	ldd	r25, Y+29	; 0x1d
    432a:	8d 89       	ldd	r24, Y+21	; 0x15
    432c:	98 0f       	add	r25, r24
    432e:	9d a3       	std	Y+37, r25	; 0x25
    4330:	91 e0       	ldi	r25, 0x01	; 1
    4332:	99 ab       	std	Y+49, r25	; 0x31
    4334:	8d a1       	ldd	r24, Y+37	; 0x25
    4336:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4338:	89 17       	cp	r24, r25
    433a:	08 f0       	brcs	.+2      	; 0x433e <CLCD_voidSendNumber+0x15e>
    433c:	19 aa       	std	Y+49, r1	; 0x31
    433e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4340:	9d a1       	ldd	r25, Y+37	; 0x25
    4342:	89 0f       	add	r24, r25
    4344:	8a ab       	std	Y+50, r24	; 0x32
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	8b ab       	std	Y+51, r24	; 0x33
    434a:	9a a9       	ldd	r25, Y+50	; 0x32
    434c:	8d a1       	ldd	r24, Y+37	; 0x25
    434e:	98 17       	cp	r25, r24
    4350:	08 f0       	brcs	.+2      	; 0x4354 <CLCD_voidSendNumber+0x174>
    4352:	1b aa       	std	Y+51, r1	; 0x33
    4354:	99 a9       	ldd	r25, Y+49	; 0x31
    4356:	8b a9       	ldd	r24, Y+51	; 0x33
    4358:	98 2b       	or	r25, r24
    435a:	99 ab       	std	Y+49, r25	; 0x31
    435c:	9a a9       	ldd	r25, Y+50	; 0x32
    435e:	9d a3       	std	Y+37, r25	; 0x25
    4360:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4362:	9e 89       	ldd	r25, Y+22	; 0x16
    4364:	89 0f       	add	r24, r25
    4366:	8e a3       	std	Y+38, r24	; 0x26
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	8c ab       	std	Y+52, r24	; 0x34
    436c:	9e a1       	ldd	r25, Y+38	; 0x26
    436e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4370:	98 17       	cp	r25, r24
    4372:	08 f0       	brcs	.+2      	; 0x4376 <CLCD_voidSendNumber+0x196>
    4374:	1c aa       	std	Y+52, r1	; 0x34
    4376:	99 a9       	ldd	r25, Y+49	; 0x31
    4378:	8e a1       	ldd	r24, Y+38	; 0x26
    437a:	98 0f       	add	r25, r24
    437c:	9d ab       	std	Y+53, r25	; 0x35
    437e:	91 e0       	ldi	r25, 0x01	; 1
    4380:	9e ab       	std	Y+54, r25	; 0x36
    4382:	8d a9       	ldd	r24, Y+53	; 0x35
    4384:	9e a1       	ldd	r25, Y+38	; 0x26
    4386:	89 17       	cp	r24, r25
    4388:	08 f0       	brcs	.+2      	; 0x438c <CLCD_voidSendNumber+0x1ac>
    438a:	1e aa       	std	Y+54, r1	; 0x36
    438c:	8c a9       	ldd	r24, Y+52	; 0x34
    438e:	9e a9       	ldd	r25, Y+54	; 0x36
    4390:	89 2b       	or	r24, r25
    4392:	8c ab       	std	Y+52, r24	; 0x34
    4394:	8d a9       	ldd	r24, Y+53	; 0x35
    4396:	8e a3       	std	Y+38, r24	; 0x26
    4398:	9f 8d       	ldd	r25, Y+31	; 0x1f
    439a:	8f 89       	ldd	r24, Y+23	; 0x17
    439c:	98 0f       	add	r25, r24
    439e:	9f a3       	std	Y+39, r25	; 0x27
    43a0:	91 e0       	ldi	r25, 0x01	; 1
    43a2:	9f ab       	std	Y+55, r25	; 0x37
    43a4:	8f a1       	ldd	r24, Y+39	; 0x27
    43a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43a8:	89 17       	cp	r24, r25
    43aa:	08 f0       	brcs	.+2      	; 0x43ae <CLCD_voidSendNumber+0x1ce>
    43ac:	1f aa       	std	Y+55, r1	; 0x37
    43ae:	8c a9       	ldd	r24, Y+52	; 0x34
    43b0:	9f a1       	ldd	r25, Y+39	; 0x27
    43b2:	89 0f       	add	r24, r25
    43b4:	88 af       	std	Y+56, r24	; 0x38
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	89 af       	std	Y+57, r24	; 0x39
    43ba:	98 ad       	ldd	r25, Y+56	; 0x38
    43bc:	8f a1       	ldd	r24, Y+39	; 0x27
    43be:	98 17       	cp	r25, r24
    43c0:	08 f0       	brcs	.+2      	; 0x43c4 <CLCD_voidSendNumber+0x1e4>
    43c2:	19 ae       	std	Y+57, r1	; 0x39
    43c4:	9f a9       	ldd	r25, Y+55	; 0x37
    43c6:	89 ad       	ldd	r24, Y+57	; 0x39
    43c8:	98 2b       	or	r25, r24
    43ca:	9f ab       	std	Y+55, r25	; 0x37
    43cc:	98 ad       	ldd	r25, Y+56	; 0x38
    43ce:	9f a3       	std	Y+39, r25	; 0x27
    43d0:	88 a1       	ldd	r24, Y+32	; 0x20
    43d2:	98 8d       	ldd	r25, Y+24	; 0x18
    43d4:	89 0f       	add	r24, r25
    43d6:	88 a7       	std	Y+40, r24	; 0x28
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	8a af       	std	Y+58, r24	; 0x3a
    43dc:	98 a5       	ldd	r25, Y+40	; 0x28
    43de:	88 a1       	ldd	r24, Y+32	; 0x20
    43e0:	98 17       	cp	r25, r24
    43e2:	08 f0       	brcs	.+2      	; 0x43e6 <CLCD_voidSendNumber+0x206>
    43e4:	1a ae       	std	Y+58, r1	; 0x3a
    43e6:	9f a9       	ldd	r25, Y+55	; 0x37
    43e8:	88 a5       	ldd	r24, Y+40	; 0x28
    43ea:	98 0f       	add	r25, r24
    43ec:	9b af       	std	Y+59, r25	; 0x3b
    43ee:	91 e0       	ldi	r25, 0x01	; 1
    43f0:	9c af       	std	Y+60, r25	; 0x3c
    43f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    43f4:	98 a5       	ldd	r25, Y+40	; 0x28
    43f6:	89 17       	cp	r24, r25
    43f8:	08 f0       	brcs	.+2      	; 0x43fc <CLCD_voidSendNumber+0x21c>
    43fa:	1c ae       	std	Y+60, r1	; 0x3c
    43fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    43fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    4400:	89 2b       	or	r24, r25
    4402:	8a af       	std	Y+58, r24	; 0x3a
    4404:	8b ad       	ldd	r24, Y+59	; 0x3b
    4406:	88 a7       	std	Y+40, r24	; 0x28
    4408:	99 a1       	ldd	r25, Y+33	; 0x21
    440a:	89 8d       	ldd	r24, Y+25	; 0x19
    440c:	98 0f       	add	r25, r24
    440e:	99 a7       	std	Y+41, r25	; 0x29
    4410:	8a ad       	ldd	r24, Y+58	; 0x3a
    4412:	99 a5       	ldd	r25, Y+41	; 0x29
    4414:	89 0f       	add	r24, r25
    4416:	89 a7       	std	Y+41, r24	; 0x29
    4418:	8a a1       	ldd	r24, Y+34	; 0x22
    441a:	8a 83       	std	Y+2, r24	; 0x02
    441c:	9b a1       	ldd	r25, Y+35	; 0x23
    441e:	9b 83       	std	Y+3, r25	; 0x03
    4420:	8c a1       	ldd	r24, Y+36	; 0x24
    4422:	8c 83       	std	Y+4, r24	; 0x04
    4424:	9d a1       	ldd	r25, Y+37	; 0x25
    4426:	9d 83       	std	Y+5, r25	; 0x05
    4428:	8e a1       	ldd	r24, Y+38	; 0x26
    442a:	8e 83       	std	Y+6, r24	; 0x06
    442c:	9f a1       	ldd	r25, Y+39	; 0x27
    442e:	9f 83       	std	Y+7, r25	; 0x07
    4430:	88 a5       	ldd	r24, Y+40	; 0x28
    4432:	88 87       	std	Y+8, r24	; 0x08
    4434:	99 a5       	ldd	r25, Y+41	; 0x29
    4436:	99 87       	std	Y+9, r25	; 0x09
			Copy_u64Number/=10;
    4438:	aa 84       	ldd	r10, Y+10	; 0x0a
    443a:	bb 84       	ldd	r11, Y+11	; 0x0b
    443c:	cc 84       	ldd	r12, Y+12	; 0x0c
    443e:	dd 84       	ldd	r13, Y+13	; 0x0d
    4440:	ee 84       	ldd	r14, Y+14	; 0x0e
    4442:	ff 84       	ldd	r15, Y+15	; 0x0f
    4444:	08 89       	ldd	r16, Y+16	; 0x10
    4446:	19 89       	ldd	r17, Y+17	; 0x11
    4448:	2a 2d       	mov	r18, r10
    444a:	3b 2d       	mov	r19, r11
    444c:	4c 2d       	mov	r20, r12
    444e:	5d 2d       	mov	r21, r13
    4450:	6e 2d       	mov	r22, r14
    4452:	7f 2d       	mov	r23, r15
    4454:	80 2f       	mov	r24, r16
    4456:	91 2f       	mov	r25, r17
    4458:	0f 2e       	mov	r0, r31
    445a:	fa e0       	ldi	r31, 0x0A	; 10
    445c:	af 2e       	mov	r10, r31
    445e:	f0 2d       	mov	r31, r0
    4460:	bb 24       	eor	r11, r11
    4462:	cc 24       	eor	r12, r12
    4464:	dd 24       	eor	r13, r13
    4466:	ee 24       	eor	r14, r14
    4468:	ff 24       	eor	r15, r15
    446a:	00 e0       	ldi	r16, 0x00	; 0
    446c:	10 e0       	ldi	r17, 0x00	; 0
    446e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__udivdi3>
    4472:	a2 2e       	mov	r10, r18
    4474:	b3 2e       	mov	r11, r19
    4476:	c4 2e       	mov	r12, r20
    4478:	d5 2e       	mov	r13, r21
    447a:	e6 2e       	mov	r14, r22
    447c:	f7 2e       	mov	r15, r23
    447e:	08 2f       	mov	r16, r24
    4480:	19 2f       	mov	r17, r25
    4482:	aa 86       	std	Y+10, r10	; 0x0a
    4484:	bb 86       	std	Y+11, r11	; 0x0b
    4486:	cc 86       	std	Y+12, r12	; 0x0c
    4488:	dd 86       	std	Y+13, r13	; 0x0d
    448a:	ee 86       	std	Y+14, r14	; 0x0e
    448c:	ff 86       	std	Y+15, r15	; 0x0f
    448e:	08 8b       	std	Y+16, r16	; 0x10
    4490:	19 8b       	std	Y+17, r17	; 0x11
			if(Copy_u64Number != 0)
    4492:	8a 85       	ldd	r24, Y+10	; 0x0a
    4494:	9b 85       	ldd	r25, Y+11	; 0x0b
    4496:	89 2b       	or	r24, r25
    4498:	9c 85       	ldd	r25, Y+12	; 0x0c
    449a:	89 2b       	or	r24, r25
    449c:	9d 85       	ldd	r25, Y+13	; 0x0d
    449e:	89 2b       	or	r24, r25
    44a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a2:	89 2b       	or	r24, r25
    44a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    44a6:	89 2b       	or	r24, r25
    44a8:	98 89       	ldd	r25, Y+16	; 0x10
    44aa:	89 2b       	or	r24, r25
    44ac:	99 89       	ldd	r25, Y+17	; 0x11
    44ae:	89 2b       	or	r24, r25
    44b0:	88 23       	and	r24, r24
    44b2:	09 f4       	brne	.+2      	; 0x44b6 <CLCD_voidSendNumber+0x2d6>
    44b4:	27 c2       	rjmp	.+1102   	; 0x4904 <CLCD_voidSendNumber+0x724>
				LOC_u64R_Number*=10;
    44b6:	2a 81       	ldd	r18, Y+2	; 0x02
    44b8:	3b 81       	ldd	r19, Y+3	; 0x03
    44ba:	4c 81       	ldd	r20, Y+4	; 0x04
    44bc:	5d 81       	ldd	r21, Y+5	; 0x05
    44be:	6e 81       	ldd	r22, Y+6	; 0x06
    44c0:	7f 81       	ldd	r23, Y+7	; 0x07
    44c2:	88 85       	ldd	r24, Y+8	; 0x08
    44c4:	99 85       	ldd	r25, Y+9	; 0x09
    44c6:	a2 2e       	mov	r10, r18
    44c8:	b3 2e       	mov	r11, r19
    44ca:	c4 2e       	mov	r12, r20
    44cc:	d5 2e       	mov	r13, r21
    44ce:	e6 2e       	mov	r14, r22
    44d0:	f7 2e       	mov	r15, r23
    44d2:	08 2f       	mov	r16, r24
    44d4:	19 2f       	mov	r17, r25
    44d6:	2a 2d       	mov	r18, r10
    44d8:	3b 2d       	mov	r19, r11
    44da:	4c 2d       	mov	r20, r12
    44dc:	5d 2d       	mov	r21, r13
    44de:	6e 2d       	mov	r22, r14
    44e0:	7f 2d       	mov	r23, r15
    44e2:	80 2f       	mov	r24, r16
    44e4:	91 2f       	mov	r25, r17
    44e6:	01 e0       	ldi	r16, 0x01	; 1
    44e8:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    44ec:	2d af       	std	Y+61, r18	; 0x3d
    44ee:	3e af       	std	Y+62, r19	; 0x3e
    44f0:	4f af       	std	Y+63, r20	; 0x3f
    44f2:	21 96       	adiw	r28, 0x01	; 1
    44f4:	5f af       	std	Y+63, r21	; 0x3f
    44f6:	21 97       	sbiw	r28, 0x01	; 1
    44f8:	22 96       	adiw	r28, 0x02	; 2
    44fa:	6f af       	std	Y+63, r22	; 0x3f
    44fc:	22 97       	sbiw	r28, 0x02	; 2
    44fe:	23 96       	adiw	r28, 0x03	; 3
    4500:	7f af       	std	Y+63, r23	; 0x3f
    4502:	23 97       	sbiw	r28, 0x03	; 3
    4504:	24 96       	adiw	r28, 0x04	; 4
    4506:	8f af       	std	Y+63, r24	; 0x3f
    4508:	24 97       	sbiw	r28, 0x04	; 4
    450a:	25 96       	adiw	r28, 0x05	; 5
    450c:	9f af       	std	Y+63, r25	; 0x3f
    450e:	25 97       	sbiw	r28, 0x05	; 5
    4510:	2d ad       	ldd	r18, Y+61	; 0x3d
    4512:	3e ad       	ldd	r19, Y+62	; 0x3e
    4514:	4f ad       	ldd	r20, Y+63	; 0x3f
    4516:	21 96       	adiw	r28, 0x01	; 1
    4518:	5f ad       	ldd	r21, Y+63	; 0x3f
    451a:	21 97       	sbiw	r28, 0x01	; 1
    451c:	22 96       	adiw	r28, 0x02	; 2
    451e:	6f ad       	ldd	r22, Y+63	; 0x3f
    4520:	22 97       	sbiw	r28, 0x02	; 2
    4522:	23 96       	adiw	r28, 0x03	; 3
    4524:	7f ad       	ldd	r23, Y+63	; 0x3f
    4526:	23 97       	sbiw	r28, 0x03	; 3
    4528:	24 96       	adiw	r28, 0x04	; 4
    452a:	8f ad       	ldd	r24, Y+63	; 0x3f
    452c:	24 97       	sbiw	r28, 0x04	; 4
    452e:	25 96       	adiw	r28, 0x05	; 5
    4530:	9f ad       	ldd	r25, Y+63	; 0x3f
    4532:	25 97       	sbiw	r28, 0x05	; 5
    4534:	02 e0       	ldi	r16, 0x02	; 2
    4536:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    453a:	26 96       	adiw	r28, 0x06	; 6
    453c:	2f af       	std	Y+63, r18	; 0x3f
    453e:	26 97       	sbiw	r28, 0x06	; 6
    4540:	27 96       	adiw	r28, 0x07	; 7
    4542:	3f af       	std	Y+63, r19	; 0x3f
    4544:	27 97       	sbiw	r28, 0x07	; 7
    4546:	28 96       	adiw	r28, 0x08	; 8
    4548:	4f af       	std	Y+63, r20	; 0x3f
    454a:	28 97       	sbiw	r28, 0x08	; 8
    454c:	29 96       	adiw	r28, 0x09	; 9
    454e:	5f af       	std	Y+63, r21	; 0x3f
    4550:	29 97       	sbiw	r28, 0x09	; 9
    4552:	2a 96       	adiw	r28, 0x0a	; 10
    4554:	6f af       	std	Y+63, r22	; 0x3f
    4556:	2a 97       	sbiw	r28, 0x0a	; 10
    4558:	2b 96       	adiw	r28, 0x0b	; 11
    455a:	7f af       	std	Y+63, r23	; 0x3f
    455c:	2b 97       	sbiw	r28, 0x0b	; 11
    455e:	2c 96       	adiw	r28, 0x0c	; 12
    4560:	8f af       	std	Y+63, r24	; 0x3f
    4562:	2c 97       	sbiw	r28, 0x0c	; 12
    4564:	2d 96       	adiw	r28, 0x0d	; 13
    4566:	9f af       	std	Y+63, r25	; 0x3f
    4568:	2d 97       	sbiw	r28, 0x0d	; 13
    456a:	8d ad       	ldd	r24, Y+61	; 0x3d
    456c:	26 96       	adiw	r28, 0x06	; 6
    456e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4570:	26 97       	sbiw	r28, 0x06	; 6
    4572:	89 0f       	add	r24, r25
    4574:	2e 96       	adiw	r28, 0x0e	; 14
    4576:	8f af       	std	Y+63, r24	; 0x3f
    4578:	2e 97       	sbiw	r28, 0x0e	; 14
    457a:	81 e0       	ldi	r24, 0x01	; 1
    457c:	66 96       	adiw	r28, 0x16	; 22
    457e:	8f af       	std	Y+63, r24	; 0x3f
    4580:	66 97       	sbiw	r28, 0x16	; 22
    4582:	2e 96       	adiw	r28, 0x0e	; 14
    4584:	9f ad       	ldd	r25, Y+63	; 0x3f
    4586:	2e 97       	sbiw	r28, 0x0e	; 14
    4588:	8d ad       	ldd	r24, Y+61	; 0x3d
    458a:	98 17       	cp	r25, r24
    458c:	18 f0       	brcs	.+6      	; 0x4594 <CLCD_voidSendNumber+0x3b4>
    458e:	66 96       	adiw	r28, 0x16	; 22
    4590:	1f ae       	std	Y+63, r1	; 0x3f
    4592:	66 97       	sbiw	r28, 0x16	; 22
    4594:	9e ad       	ldd	r25, Y+62	; 0x3e
    4596:	27 96       	adiw	r28, 0x07	; 7
    4598:	8f ad       	ldd	r24, Y+63	; 0x3f
    459a:	27 97       	sbiw	r28, 0x07	; 7
    459c:	98 0f       	add	r25, r24
    459e:	2f 96       	adiw	r28, 0x0f	; 15
    45a0:	9f af       	std	Y+63, r25	; 0x3f
    45a2:	2f 97       	sbiw	r28, 0x0f	; 15
    45a4:	91 e0       	ldi	r25, 0x01	; 1
    45a6:	67 96       	adiw	r28, 0x17	; 23
    45a8:	9f af       	std	Y+63, r25	; 0x3f
    45aa:	67 97       	sbiw	r28, 0x17	; 23
    45ac:	2f 96       	adiw	r28, 0x0f	; 15
    45ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    45b0:	2f 97       	sbiw	r28, 0x0f	; 15
    45b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    45b4:	89 17       	cp	r24, r25
    45b6:	18 f0       	brcs	.+6      	; 0x45be <CLCD_voidSendNumber+0x3de>
    45b8:	67 96       	adiw	r28, 0x17	; 23
    45ba:	1f ae       	std	Y+63, r1	; 0x3f
    45bc:	67 97       	sbiw	r28, 0x17	; 23
    45be:	66 96       	adiw	r28, 0x16	; 22
    45c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    45c2:	66 97       	sbiw	r28, 0x16	; 22
    45c4:	2f 96       	adiw	r28, 0x0f	; 15
    45c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    45c8:	2f 97       	sbiw	r28, 0x0f	; 15
    45ca:	89 0f       	add	r24, r25
    45cc:	68 96       	adiw	r28, 0x18	; 24
    45ce:	8f af       	std	Y+63, r24	; 0x3f
    45d0:	68 97       	sbiw	r28, 0x18	; 24
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	69 96       	adiw	r28, 0x19	; 25
    45d6:	8f af       	std	Y+63, r24	; 0x3f
    45d8:	69 97       	sbiw	r28, 0x19	; 25
    45da:	68 96       	adiw	r28, 0x18	; 24
    45dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    45de:	68 97       	sbiw	r28, 0x18	; 24
    45e0:	2f 96       	adiw	r28, 0x0f	; 15
    45e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    45e4:	2f 97       	sbiw	r28, 0x0f	; 15
    45e6:	98 17       	cp	r25, r24
    45e8:	18 f0       	brcs	.+6      	; 0x45f0 <CLCD_voidSendNumber+0x410>
    45ea:	69 96       	adiw	r28, 0x19	; 25
    45ec:	1f ae       	std	Y+63, r1	; 0x3f
    45ee:	69 97       	sbiw	r28, 0x19	; 25
    45f0:	67 96       	adiw	r28, 0x17	; 23
    45f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    45f4:	67 97       	sbiw	r28, 0x17	; 23
    45f6:	69 96       	adiw	r28, 0x19	; 25
    45f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    45fa:	69 97       	sbiw	r28, 0x19	; 25
    45fc:	98 2b       	or	r25, r24
    45fe:	67 96       	adiw	r28, 0x17	; 23
    4600:	9f af       	std	Y+63, r25	; 0x3f
    4602:	67 97       	sbiw	r28, 0x17	; 23
    4604:	68 96       	adiw	r28, 0x18	; 24
    4606:	9f ad       	ldd	r25, Y+63	; 0x3f
    4608:	68 97       	sbiw	r28, 0x18	; 24
    460a:	2f 96       	adiw	r28, 0x0f	; 15
    460c:	9f af       	std	Y+63, r25	; 0x3f
    460e:	2f 97       	sbiw	r28, 0x0f	; 15
    4610:	8f ad       	ldd	r24, Y+63	; 0x3f
    4612:	28 96       	adiw	r28, 0x08	; 8
    4614:	9f ad       	ldd	r25, Y+63	; 0x3f
    4616:	28 97       	sbiw	r28, 0x08	; 8
    4618:	89 0f       	add	r24, r25
    461a:	60 96       	adiw	r28, 0x10	; 16
    461c:	8f af       	std	Y+63, r24	; 0x3f
    461e:	60 97       	sbiw	r28, 0x10	; 16
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	6a 96       	adiw	r28, 0x1a	; 26
    4624:	8f af       	std	Y+63, r24	; 0x3f
    4626:	6a 97       	sbiw	r28, 0x1a	; 26
    4628:	60 96       	adiw	r28, 0x10	; 16
    462a:	9f ad       	ldd	r25, Y+63	; 0x3f
    462c:	60 97       	sbiw	r28, 0x10	; 16
    462e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4630:	98 17       	cp	r25, r24
    4632:	18 f0       	brcs	.+6      	; 0x463a <CLCD_voidSendNumber+0x45a>
    4634:	6a 96       	adiw	r28, 0x1a	; 26
    4636:	1f ae       	std	Y+63, r1	; 0x3f
    4638:	6a 97       	sbiw	r28, 0x1a	; 26
    463a:	67 96       	adiw	r28, 0x17	; 23
    463c:	9f ad       	ldd	r25, Y+63	; 0x3f
    463e:	67 97       	sbiw	r28, 0x17	; 23
    4640:	60 96       	adiw	r28, 0x10	; 16
    4642:	8f ad       	ldd	r24, Y+63	; 0x3f
    4644:	60 97       	sbiw	r28, 0x10	; 16
    4646:	98 0f       	add	r25, r24
    4648:	6b 96       	adiw	r28, 0x1b	; 27
    464a:	9f af       	std	Y+63, r25	; 0x3f
    464c:	6b 97       	sbiw	r28, 0x1b	; 27
    464e:	91 e0       	ldi	r25, 0x01	; 1
    4650:	6c 96       	adiw	r28, 0x1c	; 28
    4652:	9f af       	std	Y+63, r25	; 0x3f
    4654:	6c 97       	sbiw	r28, 0x1c	; 28
    4656:	6b 96       	adiw	r28, 0x1b	; 27
    4658:	8f ad       	ldd	r24, Y+63	; 0x3f
    465a:	6b 97       	sbiw	r28, 0x1b	; 27
    465c:	60 96       	adiw	r28, 0x10	; 16
    465e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4660:	60 97       	sbiw	r28, 0x10	; 16
    4662:	89 17       	cp	r24, r25
    4664:	18 f0       	brcs	.+6      	; 0x466c <CLCD_voidSendNumber+0x48c>
    4666:	6c 96       	adiw	r28, 0x1c	; 28
    4668:	1f ae       	std	Y+63, r1	; 0x3f
    466a:	6c 97       	sbiw	r28, 0x1c	; 28
    466c:	6a 96       	adiw	r28, 0x1a	; 26
    466e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4670:	6a 97       	sbiw	r28, 0x1a	; 26
    4672:	6c 96       	adiw	r28, 0x1c	; 28
    4674:	9f ad       	ldd	r25, Y+63	; 0x3f
    4676:	6c 97       	sbiw	r28, 0x1c	; 28
    4678:	89 2b       	or	r24, r25
    467a:	6a 96       	adiw	r28, 0x1a	; 26
    467c:	8f af       	std	Y+63, r24	; 0x3f
    467e:	6a 97       	sbiw	r28, 0x1a	; 26
    4680:	6b 96       	adiw	r28, 0x1b	; 27
    4682:	8f ad       	ldd	r24, Y+63	; 0x3f
    4684:	6b 97       	sbiw	r28, 0x1b	; 27
    4686:	60 96       	adiw	r28, 0x10	; 16
    4688:	8f af       	std	Y+63, r24	; 0x3f
    468a:	60 97       	sbiw	r28, 0x10	; 16
    468c:	21 96       	adiw	r28, 0x01	; 1
    468e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4690:	21 97       	sbiw	r28, 0x01	; 1
    4692:	29 96       	adiw	r28, 0x09	; 9
    4694:	8f ad       	ldd	r24, Y+63	; 0x3f
    4696:	29 97       	sbiw	r28, 0x09	; 9
    4698:	98 0f       	add	r25, r24
    469a:	61 96       	adiw	r28, 0x11	; 17
    469c:	9f af       	std	Y+63, r25	; 0x3f
    469e:	61 97       	sbiw	r28, 0x11	; 17
    46a0:	91 e0       	ldi	r25, 0x01	; 1
    46a2:	6d 96       	adiw	r28, 0x1d	; 29
    46a4:	9f af       	std	Y+63, r25	; 0x3f
    46a6:	6d 97       	sbiw	r28, 0x1d	; 29
    46a8:	61 96       	adiw	r28, 0x11	; 17
    46aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    46ac:	61 97       	sbiw	r28, 0x11	; 17
    46ae:	21 96       	adiw	r28, 0x01	; 1
    46b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    46b2:	21 97       	sbiw	r28, 0x01	; 1
    46b4:	89 17       	cp	r24, r25
    46b6:	18 f0       	brcs	.+6      	; 0x46be <CLCD_voidSendNumber+0x4de>
    46b8:	6d 96       	adiw	r28, 0x1d	; 29
    46ba:	1f ae       	std	Y+63, r1	; 0x3f
    46bc:	6d 97       	sbiw	r28, 0x1d	; 29
    46be:	6a 96       	adiw	r28, 0x1a	; 26
    46c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    46c2:	6a 97       	sbiw	r28, 0x1a	; 26
    46c4:	61 96       	adiw	r28, 0x11	; 17
    46c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    46c8:	61 97       	sbiw	r28, 0x11	; 17
    46ca:	89 0f       	add	r24, r25
    46cc:	6e 96       	adiw	r28, 0x1e	; 30
    46ce:	8f af       	std	Y+63, r24	; 0x3f
    46d0:	6e 97       	sbiw	r28, 0x1e	; 30
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	6f 96       	adiw	r28, 0x1f	; 31
    46d6:	8f af       	std	Y+63, r24	; 0x3f
    46d8:	6f 97       	sbiw	r28, 0x1f	; 31
    46da:	6e 96       	adiw	r28, 0x1e	; 30
    46dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    46de:	6e 97       	sbiw	r28, 0x1e	; 30
    46e0:	61 96       	adiw	r28, 0x11	; 17
    46e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    46e4:	61 97       	sbiw	r28, 0x11	; 17
    46e6:	98 17       	cp	r25, r24
    46e8:	18 f0       	brcs	.+6      	; 0x46f0 <CLCD_voidSendNumber+0x510>
    46ea:	6f 96       	adiw	r28, 0x1f	; 31
    46ec:	1f ae       	std	Y+63, r1	; 0x3f
    46ee:	6f 97       	sbiw	r28, 0x1f	; 31
    46f0:	6d 96       	adiw	r28, 0x1d	; 29
    46f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    46f4:	6d 97       	sbiw	r28, 0x1d	; 29
    46f6:	6f 96       	adiw	r28, 0x1f	; 31
    46f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    46fa:	6f 97       	sbiw	r28, 0x1f	; 31
    46fc:	98 2b       	or	r25, r24
    46fe:	6d 96       	adiw	r28, 0x1d	; 29
    4700:	9f af       	std	Y+63, r25	; 0x3f
    4702:	6d 97       	sbiw	r28, 0x1d	; 29
    4704:	6e 96       	adiw	r28, 0x1e	; 30
    4706:	9f ad       	ldd	r25, Y+63	; 0x3f
    4708:	6e 97       	sbiw	r28, 0x1e	; 30
    470a:	61 96       	adiw	r28, 0x11	; 17
    470c:	9f af       	std	Y+63, r25	; 0x3f
    470e:	61 97       	sbiw	r28, 0x11	; 17
    4710:	22 96       	adiw	r28, 0x02	; 2
    4712:	8f ad       	ldd	r24, Y+63	; 0x3f
    4714:	22 97       	sbiw	r28, 0x02	; 2
    4716:	2a 96       	adiw	r28, 0x0a	; 10
    4718:	9f ad       	ldd	r25, Y+63	; 0x3f
    471a:	2a 97       	sbiw	r28, 0x0a	; 10
    471c:	89 0f       	add	r24, r25
    471e:	62 96       	adiw	r28, 0x12	; 18
    4720:	8f af       	std	Y+63, r24	; 0x3f
    4722:	62 97       	sbiw	r28, 0x12	; 18
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	a0 96       	adiw	r28, 0x20	; 32
    4728:	8f af       	std	Y+63, r24	; 0x3f
    472a:	a0 97       	sbiw	r28, 0x20	; 32
    472c:	62 96       	adiw	r28, 0x12	; 18
    472e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4730:	62 97       	sbiw	r28, 0x12	; 18
    4732:	22 96       	adiw	r28, 0x02	; 2
    4734:	8f ad       	ldd	r24, Y+63	; 0x3f
    4736:	22 97       	sbiw	r28, 0x02	; 2
    4738:	98 17       	cp	r25, r24
    473a:	18 f0       	brcs	.+6      	; 0x4742 <CLCD_voidSendNumber+0x562>
    473c:	a0 96       	adiw	r28, 0x20	; 32
    473e:	1f ae       	std	Y+63, r1	; 0x3f
    4740:	a0 97       	sbiw	r28, 0x20	; 32
    4742:	6d 96       	adiw	r28, 0x1d	; 29
    4744:	9f ad       	ldd	r25, Y+63	; 0x3f
    4746:	6d 97       	sbiw	r28, 0x1d	; 29
    4748:	62 96       	adiw	r28, 0x12	; 18
    474a:	8f ad       	ldd	r24, Y+63	; 0x3f
    474c:	62 97       	sbiw	r28, 0x12	; 18
    474e:	98 0f       	add	r25, r24
    4750:	a1 96       	adiw	r28, 0x21	; 33
    4752:	9f af       	std	Y+63, r25	; 0x3f
    4754:	a1 97       	sbiw	r28, 0x21	; 33
    4756:	91 e0       	ldi	r25, 0x01	; 1
    4758:	a2 96       	adiw	r28, 0x22	; 34
    475a:	9f af       	std	Y+63, r25	; 0x3f
    475c:	a2 97       	sbiw	r28, 0x22	; 34
    475e:	a1 96       	adiw	r28, 0x21	; 33
    4760:	8f ad       	ldd	r24, Y+63	; 0x3f
    4762:	a1 97       	sbiw	r28, 0x21	; 33
    4764:	62 96       	adiw	r28, 0x12	; 18
    4766:	9f ad       	ldd	r25, Y+63	; 0x3f
    4768:	62 97       	sbiw	r28, 0x12	; 18
    476a:	89 17       	cp	r24, r25
    476c:	18 f0       	brcs	.+6      	; 0x4774 <CLCD_voidSendNumber+0x594>
    476e:	a2 96       	adiw	r28, 0x22	; 34
    4770:	1f ae       	std	Y+63, r1	; 0x3f
    4772:	a2 97       	sbiw	r28, 0x22	; 34
    4774:	a0 96       	adiw	r28, 0x20	; 32
    4776:	8f ad       	ldd	r24, Y+63	; 0x3f
    4778:	a0 97       	sbiw	r28, 0x20	; 32
    477a:	a2 96       	adiw	r28, 0x22	; 34
    477c:	9f ad       	ldd	r25, Y+63	; 0x3f
    477e:	a2 97       	sbiw	r28, 0x22	; 34
    4780:	89 2b       	or	r24, r25
    4782:	a0 96       	adiw	r28, 0x20	; 32
    4784:	8f af       	std	Y+63, r24	; 0x3f
    4786:	a0 97       	sbiw	r28, 0x20	; 32
    4788:	a1 96       	adiw	r28, 0x21	; 33
    478a:	8f ad       	ldd	r24, Y+63	; 0x3f
    478c:	a1 97       	sbiw	r28, 0x21	; 33
    478e:	62 96       	adiw	r28, 0x12	; 18
    4790:	8f af       	std	Y+63, r24	; 0x3f
    4792:	62 97       	sbiw	r28, 0x12	; 18
    4794:	23 96       	adiw	r28, 0x03	; 3
    4796:	9f ad       	ldd	r25, Y+63	; 0x3f
    4798:	23 97       	sbiw	r28, 0x03	; 3
    479a:	2b 96       	adiw	r28, 0x0b	; 11
    479c:	8f ad       	ldd	r24, Y+63	; 0x3f
    479e:	2b 97       	sbiw	r28, 0x0b	; 11
    47a0:	98 0f       	add	r25, r24
    47a2:	63 96       	adiw	r28, 0x13	; 19
    47a4:	9f af       	std	Y+63, r25	; 0x3f
    47a6:	63 97       	sbiw	r28, 0x13	; 19
    47a8:	91 e0       	ldi	r25, 0x01	; 1
    47aa:	a3 96       	adiw	r28, 0x23	; 35
    47ac:	9f af       	std	Y+63, r25	; 0x3f
    47ae:	a3 97       	sbiw	r28, 0x23	; 35
    47b0:	63 96       	adiw	r28, 0x13	; 19
    47b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    47b4:	63 97       	sbiw	r28, 0x13	; 19
    47b6:	23 96       	adiw	r28, 0x03	; 3
    47b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    47ba:	23 97       	sbiw	r28, 0x03	; 3
    47bc:	89 17       	cp	r24, r25
    47be:	18 f0       	brcs	.+6      	; 0x47c6 <CLCD_voidSendNumber+0x5e6>
    47c0:	a3 96       	adiw	r28, 0x23	; 35
    47c2:	1f ae       	std	Y+63, r1	; 0x3f
    47c4:	a3 97       	sbiw	r28, 0x23	; 35
    47c6:	a0 96       	adiw	r28, 0x20	; 32
    47c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    47ca:	a0 97       	sbiw	r28, 0x20	; 32
    47cc:	63 96       	adiw	r28, 0x13	; 19
    47ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    47d0:	63 97       	sbiw	r28, 0x13	; 19
    47d2:	89 0f       	add	r24, r25
    47d4:	a4 96       	adiw	r28, 0x24	; 36
    47d6:	8f af       	std	Y+63, r24	; 0x3f
    47d8:	a4 97       	sbiw	r28, 0x24	; 36
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	a5 96       	adiw	r28, 0x25	; 37
    47de:	8f af       	std	Y+63, r24	; 0x3f
    47e0:	a5 97       	sbiw	r28, 0x25	; 37
    47e2:	a4 96       	adiw	r28, 0x24	; 36
    47e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    47e6:	a4 97       	sbiw	r28, 0x24	; 36
    47e8:	63 96       	adiw	r28, 0x13	; 19
    47ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    47ec:	63 97       	sbiw	r28, 0x13	; 19
    47ee:	98 17       	cp	r25, r24
    47f0:	18 f0       	brcs	.+6      	; 0x47f8 <CLCD_voidSendNumber+0x618>
    47f2:	a5 96       	adiw	r28, 0x25	; 37
    47f4:	1f ae       	std	Y+63, r1	; 0x3f
    47f6:	a5 97       	sbiw	r28, 0x25	; 37
    47f8:	a3 96       	adiw	r28, 0x23	; 35
    47fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    47fc:	a3 97       	sbiw	r28, 0x23	; 35
    47fe:	a5 96       	adiw	r28, 0x25	; 37
    4800:	8f ad       	ldd	r24, Y+63	; 0x3f
    4802:	a5 97       	sbiw	r28, 0x25	; 37
    4804:	98 2b       	or	r25, r24
    4806:	a3 96       	adiw	r28, 0x23	; 35
    4808:	9f af       	std	Y+63, r25	; 0x3f
    480a:	a3 97       	sbiw	r28, 0x23	; 35
    480c:	a4 96       	adiw	r28, 0x24	; 36
    480e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4810:	a4 97       	sbiw	r28, 0x24	; 36
    4812:	63 96       	adiw	r28, 0x13	; 19
    4814:	9f af       	std	Y+63, r25	; 0x3f
    4816:	63 97       	sbiw	r28, 0x13	; 19
    4818:	24 96       	adiw	r28, 0x04	; 4
    481a:	8f ad       	ldd	r24, Y+63	; 0x3f
    481c:	24 97       	sbiw	r28, 0x04	; 4
    481e:	2c 96       	adiw	r28, 0x0c	; 12
    4820:	9f ad       	ldd	r25, Y+63	; 0x3f
    4822:	2c 97       	sbiw	r28, 0x0c	; 12
    4824:	89 0f       	add	r24, r25
    4826:	64 96       	adiw	r28, 0x14	; 20
    4828:	8f af       	std	Y+63, r24	; 0x3f
    482a:	64 97       	sbiw	r28, 0x14	; 20
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	a6 96       	adiw	r28, 0x26	; 38
    4830:	8f af       	std	Y+63, r24	; 0x3f
    4832:	a6 97       	sbiw	r28, 0x26	; 38
    4834:	64 96       	adiw	r28, 0x14	; 20
    4836:	9f ad       	ldd	r25, Y+63	; 0x3f
    4838:	64 97       	sbiw	r28, 0x14	; 20
    483a:	24 96       	adiw	r28, 0x04	; 4
    483c:	8f ad       	ldd	r24, Y+63	; 0x3f
    483e:	24 97       	sbiw	r28, 0x04	; 4
    4840:	98 17       	cp	r25, r24
    4842:	18 f0       	brcs	.+6      	; 0x484a <CLCD_voidSendNumber+0x66a>
    4844:	a6 96       	adiw	r28, 0x26	; 38
    4846:	1f ae       	std	Y+63, r1	; 0x3f
    4848:	a6 97       	sbiw	r28, 0x26	; 38
    484a:	a3 96       	adiw	r28, 0x23	; 35
    484c:	9f ad       	ldd	r25, Y+63	; 0x3f
    484e:	a3 97       	sbiw	r28, 0x23	; 35
    4850:	64 96       	adiw	r28, 0x14	; 20
    4852:	8f ad       	ldd	r24, Y+63	; 0x3f
    4854:	64 97       	sbiw	r28, 0x14	; 20
    4856:	98 0f       	add	r25, r24
    4858:	a7 96       	adiw	r28, 0x27	; 39
    485a:	9f af       	std	Y+63, r25	; 0x3f
    485c:	a7 97       	sbiw	r28, 0x27	; 39
    485e:	91 e0       	ldi	r25, 0x01	; 1
    4860:	a8 96       	adiw	r28, 0x28	; 40
    4862:	9f af       	std	Y+63, r25	; 0x3f
    4864:	a8 97       	sbiw	r28, 0x28	; 40
    4866:	a7 96       	adiw	r28, 0x27	; 39
    4868:	8f ad       	ldd	r24, Y+63	; 0x3f
    486a:	a7 97       	sbiw	r28, 0x27	; 39
    486c:	64 96       	adiw	r28, 0x14	; 20
    486e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4870:	64 97       	sbiw	r28, 0x14	; 20
    4872:	89 17       	cp	r24, r25
    4874:	18 f0       	brcs	.+6      	; 0x487c <CLCD_voidSendNumber+0x69c>
    4876:	a8 96       	adiw	r28, 0x28	; 40
    4878:	1f ae       	std	Y+63, r1	; 0x3f
    487a:	a8 97       	sbiw	r28, 0x28	; 40
    487c:	a6 96       	adiw	r28, 0x26	; 38
    487e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4880:	a6 97       	sbiw	r28, 0x26	; 38
    4882:	a8 96       	adiw	r28, 0x28	; 40
    4884:	9f ad       	ldd	r25, Y+63	; 0x3f
    4886:	a8 97       	sbiw	r28, 0x28	; 40
    4888:	89 2b       	or	r24, r25
    488a:	a6 96       	adiw	r28, 0x26	; 38
    488c:	8f af       	std	Y+63, r24	; 0x3f
    488e:	a6 97       	sbiw	r28, 0x26	; 38
    4890:	a7 96       	adiw	r28, 0x27	; 39
    4892:	8f ad       	ldd	r24, Y+63	; 0x3f
    4894:	a7 97       	sbiw	r28, 0x27	; 39
    4896:	64 96       	adiw	r28, 0x14	; 20
    4898:	8f af       	std	Y+63, r24	; 0x3f
    489a:	64 97       	sbiw	r28, 0x14	; 20
    489c:	25 96       	adiw	r28, 0x05	; 5
    489e:	9f ad       	ldd	r25, Y+63	; 0x3f
    48a0:	25 97       	sbiw	r28, 0x05	; 5
    48a2:	2d 96       	adiw	r28, 0x0d	; 13
    48a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    48a6:	2d 97       	sbiw	r28, 0x0d	; 13
    48a8:	98 0f       	add	r25, r24
    48aa:	65 96       	adiw	r28, 0x15	; 21
    48ac:	9f af       	std	Y+63, r25	; 0x3f
    48ae:	65 97       	sbiw	r28, 0x15	; 21
    48b0:	a6 96       	adiw	r28, 0x26	; 38
    48b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    48b4:	a6 97       	sbiw	r28, 0x26	; 38
    48b6:	65 96       	adiw	r28, 0x15	; 21
    48b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    48ba:	65 97       	sbiw	r28, 0x15	; 21
    48bc:	89 0f       	add	r24, r25
    48be:	65 96       	adiw	r28, 0x15	; 21
    48c0:	8f af       	std	Y+63, r24	; 0x3f
    48c2:	65 97       	sbiw	r28, 0x15	; 21
    48c4:	2e 96       	adiw	r28, 0x0e	; 14
    48c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    48c8:	2e 97       	sbiw	r28, 0x0e	; 14
    48ca:	8a 83       	std	Y+2, r24	; 0x02
    48cc:	2f 96       	adiw	r28, 0x0f	; 15
    48ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    48d0:	2f 97       	sbiw	r28, 0x0f	; 15
    48d2:	9b 83       	std	Y+3, r25	; 0x03
    48d4:	60 96       	adiw	r28, 0x10	; 16
    48d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    48d8:	60 97       	sbiw	r28, 0x10	; 16
    48da:	8c 83       	std	Y+4, r24	; 0x04
    48dc:	61 96       	adiw	r28, 0x11	; 17
    48de:	9f ad       	ldd	r25, Y+63	; 0x3f
    48e0:	61 97       	sbiw	r28, 0x11	; 17
    48e2:	9d 83       	std	Y+5, r25	; 0x05
    48e4:	62 96       	adiw	r28, 0x12	; 18
    48e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    48e8:	62 97       	sbiw	r28, 0x12	; 18
    48ea:	8e 83       	std	Y+6, r24	; 0x06
    48ec:	63 96       	adiw	r28, 0x13	; 19
    48ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    48f0:	63 97       	sbiw	r28, 0x13	; 19
    48f2:	9f 83       	std	Y+7, r25	; 0x07
    48f4:	64 96       	adiw	r28, 0x14	; 20
    48f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    48f8:	64 97       	sbiw	r28, 0x14	; 20
    48fa:	88 87       	std	Y+8, r24	; 0x08
    48fc:	65 96       	adiw	r28, 0x15	; 21
    48fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    4900:	65 97       	sbiw	r28, 0x15	; 21
    4902:	99 87       	std	Y+9, r25	; 0x09
}

void CLCD_voidSendNumber(u64 Copy_u64Number)
{
	u64 LOC_u64R_Number=0;
		while(Copy_u64Number!=0)
    4904:	8a 85       	ldd	r24, Y+10	; 0x0a
    4906:	9b 85       	ldd	r25, Y+11	; 0x0b
    4908:	89 2b       	or	r24, r25
    490a:	9c 85       	ldd	r25, Y+12	; 0x0c
    490c:	89 2b       	or	r24, r25
    490e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4910:	89 2b       	or	r24, r25
    4912:	9e 85       	ldd	r25, Y+14	; 0x0e
    4914:	89 2b       	or	r24, r25
    4916:	9f 85       	ldd	r25, Y+15	; 0x0f
    4918:	89 2b       	or	r24, r25
    491a:	98 89       	ldd	r25, Y+16	; 0x10
    491c:	89 2b       	or	r24, r25
    491e:	99 89       	ldd	r25, Y+17	; 0x11
    4920:	89 2b       	or	r24, r25
    4922:	88 23       	and	r24, r24
    4924:	09 f0       	breq	.+2      	; 0x4928 <CLCD_voidSendNumber+0x748>
    4926:	80 cc       	rjmp	.-1792   	; 0x4228 <CLCD_voidSendNumber+0x48>
			if(Copy_u64Number != 0)
				LOC_u64R_Number*=10;

		}

	u8 Loc_u8NumberToSend =0;
    4928:	19 82       	std	Y+1, r1	; 0x01
    492a:	61 c0       	rjmp	.+194    	; 0x49ee <CLCD_voidSendNumber+0x80e>
	while(LOC_u64R_Number != 0)
	{
		Loc_u8NumberToSend=LOC_u64R_Number%10;
    492c:	aa 80       	ldd	r10, Y+2	; 0x02
    492e:	bb 80       	ldd	r11, Y+3	; 0x03
    4930:	cc 80       	ldd	r12, Y+4	; 0x04
    4932:	dd 80       	ldd	r13, Y+5	; 0x05
    4934:	ee 80       	ldd	r14, Y+6	; 0x06
    4936:	ff 80       	ldd	r15, Y+7	; 0x07
    4938:	08 85       	ldd	r16, Y+8	; 0x08
    493a:	19 85       	ldd	r17, Y+9	; 0x09
    493c:	2a 2d       	mov	r18, r10
    493e:	3b 2d       	mov	r19, r11
    4940:	4c 2d       	mov	r20, r12
    4942:	5d 2d       	mov	r21, r13
    4944:	6e 2d       	mov	r22, r14
    4946:	7f 2d       	mov	r23, r15
    4948:	80 2f       	mov	r24, r16
    494a:	91 2f       	mov	r25, r17
    494c:	0f 2e       	mov	r0, r31
    494e:	fa e0       	ldi	r31, 0x0A	; 10
    4950:	af 2e       	mov	r10, r31
    4952:	f0 2d       	mov	r31, r0
    4954:	bb 24       	eor	r11, r11
    4956:	cc 24       	eor	r12, r12
    4958:	dd 24       	eor	r13, r13
    495a:	ee 24       	eor	r14, r14
    495c:	ff 24       	eor	r15, r15
    495e:	00 e0       	ldi	r16, 0x00	; 0
    4960:	10 e0       	ldi	r17, 0x00	; 0
    4962:	0e 94 61 07 	call	0xec2	; 0xec2 <__umoddi3>
    4966:	a2 2e       	mov	r10, r18
    4968:	b3 2e       	mov	r11, r19
    496a:	c4 2e       	mov	r12, r20
    496c:	d5 2e       	mov	r13, r21
    496e:	e6 2e       	mov	r14, r22
    4970:	f7 2e       	mov	r15, r23
    4972:	08 2f       	mov	r16, r24
    4974:	19 2f       	mov	r17, r25
    4976:	2a 2d       	mov	r18, r10
    4978:	3b 2d       	mov	r19, r11
    497a:	4c 2d       	mov	r20, r12
    497c:	5d 2d       	mov	r21, r13
    497e:	6e 2d       	mov	r22, r14
    4980:	7f 2d       	mov	r23, r15
    4982:	80 2f       	mov	r24, r16
    4984:	91 2f       	mov	r25, r17
    4986:	29 83       	std	Y+1, r18	; 0x01
		LOC_u64R_Number/=10;
    4988:	aa 80       	ldd	r10, Y+2	; 0x02
    498a:	bb 80       	ldd	r11, Y+3	; 0x03
    498c:	cc 80       	ldd	r12, Y+4	; 0x04
    498e:	dd 80       	ldd	r13, Y+5	; 0x05
    4990:	ee 80       	ldd	r14, Y+6	; 0x06
    4992:	ff 80       	ldd	r15, Y+7	; 0x07
    4994:	08 85       	ldd	r16, Y+8	; 0x08
    4996:	19 85       	ldd	r17, Y+9	; 0x09
    4998:	2a 2d       	mov	r18, r10
    499a:	3b 2d       	mov	r19, r11
    499c:	4c 2d       	mov	r20, r12
    499e:	5d 2d       	mov	r21, r13
    49a0:	6e 2d       	mov	r22, r14
    49a2:	7f 2d       	mov	r23, r15
    49a4:	80 2f       	mov	r24, r16
    49a6:	91 2f       	mov	r25, r17
    49a8:	0f 2e       	mov	r0, r31
    49aa:	fa e0       	ldi	r31, 0x0A	; 10
    49ac:	af 2e       	mov	r10, r31
    49ae:	f0 2d       	mov	r31, r0
    49b0:	bb 24       	eor	r11, r11
    49b2:	cc 24       	eor	r12, r12
    49b4:	dd 24       	eor	r13, r13
    49b6:	ee 24       	eor	r14, r14
    49b8:	ff 24       	eor	r15, r15
    49ba:	00 e0       	ldi	r16, 0x00	; 0
    49bc:	10 e0       	ldi	r17, 0x00	; 0
    49be:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__udivdi3>
    49c2:	a2 2e       	mov	r10, r18
    49c4:	b3 2e       	mov	r11, r19
    49c6:	c4 2e       	mov	r12, r20
    49c8:	d5 2e       	mov	r13, r21
    49ca:	e6 2e       	mov	r14, r22
    49cc:	f7 2e       	mov	r15, r23
    49ce:	08 2f       	mov	r16, r24
    49d0:	19 2f       	mov	r17, r25
    49d2:	aa 82       	std	Y+2, r10	; 0x02
    49d4:	bb 82       	std	Y+3, r11	; 0x03
    49d6:	cc 82       	std	Y+4, r12	; 0x04
    49d8:	dd 82       	std	Y+5, r13	; 0x05
    49da:	ee 82       	std	Y+6, r14	; 0x06
    49dc:	ff 82       	std	Y+7, r15	; 0x07
    49de:	08 87       	std	Y+8, r16	; 0x08
    49e0:	19 87       	std	Y+9, r17	; 0x09
		Loc_u8NumberToSend+=48;
    49e2:	89 81       	ldd	r24, Y+1	; 0x01
    49e4:	80 5d       	subi	r24, 0xD0	; 208
    49e6:	89 83       	std	Y+1, r24	; 0x01
		CLCD_voidSendChar(Loc_u8NumberToSend);
    49e8:	89 81       	ldd	r24, Y+1	; 0x01
    49ea:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <CLCD_voidSendChar>
				LOC_u64R_Number*=10;

		}

	u8 Loc_u8NumberToSend =0;
	while(LOC_u64R_Number != 0)
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	9b 81       	ldd	r25, Y+3	; 0x03
    49f2:	89 2b       	or	r24, r25
    49f4:	9c 81       	ldd	r25, Y+4	; 0x04
    49f6:	89 2b       	or	r24, r25
    49f8:	9d 81       	ldd	r25, Y+5	; 0x05
    49fa:	89 2b       	or	r24, r25
    49fc:	9e 81       	ldd	r25, Y+6	; 0x06
    49fe:	89 2b       	or	r24, r25
    4a00:	9f 81       	ldd	r25, Y+7	; 0x07
    4a02:	89 2b       	or	r24, r25
    4a04:	98 85       	ldd	r25, Y+8	; 0x08
    4a06:	89 2b       	or	r24, r25
    4a08:	99 85       	ldd	r25, Y+9	; 0x09
    4a0a:	89 2b       	or	r24, r25
    4a0c:	88 23       	and	r24, r24
    4a0e:	09 f0       	breq	.+2      	; 0x4a12 <CLCD_voidSendNumber+0x832>
    4a10:	8d cf       	rjmp	.-230    	; 0x492c <CLCD_voidSendNumber+0x74c>
		LOC_u64R_Number/=10;
		Loc_u8NumberToSend+=48;
		CLCD_voidSendChar(Loc_u8NumberToSend);
	}

}
    4a12:	c9 59       	subi	r28, 0x99	; 153
    4a14:	df 4f       	sbci	r29, 0xFF	; 255
    4a16:	0f b6       	in	r0, 0x3f	; 63
    4a18:	f8 94       	cli
    4a1a:	de bf       	out	0x3e, r29	; 62
    4a1c:	0f be       	out	0x3f, r0	; 63
    4a1e:	cd bf       	out	0x3d, r28	; 61
    4a20:	cf 91       	pop	r28
    4a22:	df 91       	pop	r29
    4a24:	1f 91       	pop	r17
    4a26:	0f 91       	pop	r16
    4a28:	ff 90       	pop	r15
    4a2a:	ef 90       	pop	r14
    4a2c:	df 90       	pop	r13
    4a2e:	cf 90       	pop	r12
    4a30:	bf 90       	pop	r11
    4a32:	af 90       	pop	r10
    4a34:	08 95       	ret

00004a36 <CLCD_voidSetPosition>:

void CLCD_voidSetPosition(u8 Copy_u8Row ,u8 Copy_u8Col)
{
    4a36:	df 93       	push	r29
    4a38:	cf 93       	push	r28
    4a3a:	00 d0       	rcall	.+0      	; 0x4a3c <CLCD_voidSetPosition+0x6>
    4a3c:	cd b7       	in	r28, 0x3d	; 61
    4a3e:	de b7       	in	r29, 0x3e	; 62
    4a40:	89 83       	std	Y+1, r24	; 0x01
    4a42:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row == CLCD_ROW_1)
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	81 30       	cpi	r24, 0x01	; 1
    4a48:	29 f4       	brne	.+10     	; 0x4a54 <CLCD_voidSetPosition+0x1e>
	{
			CLCD_voidSendCommand(CLCD_ROW_1_ADD +(Copy_u8Col-1));
    4a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4c:	81 58       	subi	r24, 0x81	; 129
    4a4e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
    4a52:	07 c0       	rjmp	.+14     	; 0x4a62 <CLCD_voidSetPosition+0x2c>

	}
	else if(Copy_u8Row == CLCD_ROW_2)
    4a54:	89 81       	ldd	r24, Y+1	; 0x01
    4a56:	82 30       	cpi	r24, 0x02	; 2
    4a58:	21 f4       	brne	.+8      	; 0x4a62 <CLCD_voidSetPosition+0x2c>
	{
		CLCD_voidSendCommand(CLCD_ROW_2_ADD+(Copy_u8Col-1));
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	81 54       	subi	r24, 0x41	; 65
    4a5e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
	}
}
    4a62:	0f 90       	pop	r0
    4a64:	0f 90       	pop	r0
    4a66:	cf 91       	pop	r28
    4a68:	df 91       	pop	r29
    4a6a:	08 95       	ret

00004a6c <CLCD_voidCustomChar>:
void CLCD_voidCustomChar(void)
{
    4a6c:	df 93       	push	r29
    4a6e:	cf 93       	push	r28
    4a70:	0f 92       	push	r0
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
CLCD_voidSendCommand(CLCD_CGRAM_ADD);
    4a76:	80 e4       	ldi	r24, 0x40	; 64
    4a78:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <CLCD_voidSendCommand>
for(u8 i =0;i<sizeof(CustomeChar)/sizeof(CustomeChar[0]);i++)
    4a7c:	19 82       	std	Y+1, r1	; 0x01
    4a7e:	0c c0       	rjmp	.+24     	; 0x4a98 <CLCD_voidCustomChar+0x2c>
{
	CLCD_voidSendChar(CustomeChar[i]);
    4a80:	89 81       	ldd	r24, Y+1	; 0x01
    4a82:	88 2f       	mov	r24, r24
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	fc 01       	movw	r30, r24
    4a88:	e4 54       	subi	r30, 0x44	; 68
    4a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8c:	80 81       	ld	r24, Z
    4a8e:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <CLCD_voidSendChar>
	}
}
void CLCD_voidCustomChar(void)
{
CLCD_voidSendCommand(CLCD_CGRAM_ADD);
for(u8 i =0;i<sizeof(CustomeChar)/sizeof(CustomeChar[0]);i++)
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	8f 5f       	subi	r24, 0xFF	; 255
    4a96:	89 83       	std	Y+1, r24	; 0x01
    4a98:	89 81       	ldd	r24, Y+1	; 0x01
    4a9a:	88 31       	cpi	r24, 0x18	; 24
    4a9c:	88 f3       	brcs	.-30     	; 0x4a80 <CLCD_voidCustomChar+0x14>
{
	CLCD_voidSendChar(CustomeChar[i]);


}
CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	61 e0       	ldi	r22, 0x01	; 1
    4aa2:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <CLCD_voidSetPosition>
}
    4aa6:	0f 90       	pop	r0
    4aa8:	cf 91       	pop	r28
    4aaa:	df 91       	pop	r29
    4aac:	08 95       	ret

00004aae <KPD_voidInit>:
#include "KPD_private.h"
#include "KPD_config.h"


void KPD_voidInit(void)
{
    4aae:	df 93       	push	r29
    4ab0:	cf 93       	push	r28
    4ab2:	cd b7       	in	r28, 0x3d	; 61
    4ab4:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPINDirection(KPD_PORT,KPD_R0,DIO_INPUT);
    4ab6:	84 e0       	ldi	r24, 0x04	; 4
    4ab8:	60 e0       	ldi	r22, 0x00	; 0
    4aba:	40 e0       	ldi	r20, 0x00	; 0
    4abc:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection(KPD_PORT,KPD_R1,DIO_INPUT);
    4ac0:	84 e0       	ldi	r24, 0x04	; 4
    4ac2:	61 e0       	ldi	r22, 0x01	; 1
    4ac4:	40 e0       	ldi	r20, 0x00	; 0
    4ac6:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection(KPD_PORT,KPD_R2,DIO_INPUT);
    4aca:	84 e0       	ldi	r24, 0x04	; 4
    4acc:	62 e0       	ldi	r22, 0x02	; 2
    4ace:	40 e0       	ldi	r20, 0x00	; 0
    4ad0:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection(KPD_PORT,KPD_R3,DIO_INPUT);
    4ad4:	84 e0       	ldi	r24, 0x04	; 4
    4ad6:	63 e0       	ldi	r22, 0x03	; 3
    4ad8:	40 e0       	ldi	r20, 0x00	; 0
    4ada:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>

	DIO_enumSetPINValue(KPD_PORT,KPD_R0,DIO_HIGH);
    4ade:	84 e0       	ldi	r24, 0x04	; 4
    4ae0:	60 e0       	ldi	r22, 0x00	; 0
    4ae2:	41 e0       	ldi	r20, 0x01	; 1
    4ae4:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(KPD_PORT,KPD_R1,DIO_HIGH);
    4ae8:	84 e0       	ldi	r24, 0x04	; 4
    4aea:	61 e0       	ldi	r22, 0x01	; 1
    4aec:	41 e0       	ldi	r20, 0x01	; 1
    4aee:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(KPD_PORT,KPD_R2,DIO_HIGH);
    4af2:	84 e0       	ldi	r24, 0x04	; 4
    4af4:	62 e0       	ldi	r22, 0x02	; 2
    4af6:	41 e0       	ldi	r20, 0x01	; 1
    4af8:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(KPD_PORT,KPD_R3,DIO_HIGH);
    4afc:	84 e0       	ldi	r24, 0x04	; 4
    4afe:	63 e0       	ldi	r22, 0x03	; 3
    4b00:	41 e0       	ldi	r20, 0x01	; 1
    4b02:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>

	DIO_enumSetPINDirection(KPD_PORT,KPD_C0,DIO_OUTPUT);
    4b06:	84 e0       	ldi	r24, 0x04	; 4
    4b08:	64 e0       	ldi	r22, 0x04	; 4
    4b0a:	41 e0       	ldi	r20, 0x01	; 1
    4b0c:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection(KPD_PORT,KPD_C1,DIO_OUTPUT);
    4b10:	84 e0       	ldi	r24, 0x04	; 4
    4b12:	65 e0       	ldi	r22, 0x05	; 5
    4b14:	41 e0       	ldi	r20, 0x01	; 1
    4b16:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection(KPD_PORT,KPD_C2,DIO_OUTPUT);
    4b1a:	84 e0       	ldi	r24, 0x04	; 4
    4b1c:	66 e0       	ldi	r22, 0x06	; 6
    4b1e:	41 e0       	ldi	r20, 0x01	; 1
    4b20:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>
	DIO_enumSetPINDirection(KPD_PORT,KPD_C3,DIO_OUTPUT);
    4b24:	84 e0       	ldi	r24, 0x04	; 4
    4b26:	67 e0       	ldi	r22, 0x07	; 7
    4b28:	41 e0       	ldi	r20, 0x01	; 1
    4b2a:	0e 94 8f 18 	call	0x311e	; 0x311e <DIO_enumSetPINDirection>

	DIO_enumSetPINValue(KPD_PORT,KPD_C0,DIO_HIGH);
    4b2e:	84 e0       	ldi	r24, 0x04	; 4
    4b30:	64 e0       	ldi	r22, 0x04	; 4
    4b32:	41 e0       	ldi	r20, 0x01	; 1
    4b34:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(KPD_PORT,KPD_C1,DIO_HIGH);
    4b38:	84 e0       	ldi	r24, 0x04	; 4
    4b3a:	65 e0       	ldi	r22, 0x05	; 5
    4b3c:	41 e0       	ldi	r20, 0x01	; 1
    4b3e:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(KPD_PORT,KPD_C2,DIO_HIGH);
    4b42:	84 e0       	ldi	r24, 0x04	; 4
    4b44:	66 e0       	ldi	r22, 0x06	; 6
    4b46:	41 e0       	ldi	r20, 0x01	; 1
    4b48:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	DIO_enumSetPINValue(KPD_PORT,KPD_C3,DIO_HIGH);
    4b4c:	84 e0       	ldi	r24, 0x04	; 4
    4b4e:	67 e0       	ldi	r22, 0x07	; 7
    4b50:	41 e0       	ldi	r20, 0x01	; 1
    4b52:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
}
    4b56:	cf 91       	pop	r28
    4b58:	df 91       	pop	r29
    4b5a:	08 95       	ret

00004b5c <KPD_u8GetPressed>:

u8 KPD_u8GetPressed(void)
{
    4b5c:	df 93       	push	r29
    4b5e:	cf 93       	push	r28
    4b60:	cd b7       	in	r28, 0x3d	; 61
    4b62:	de b7       	in	r29, 0x3e	; 62
    4b64:	62 97       	sbiw	r28, 0x12	; 18
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	f8 94       	cli
    4b6a:	de bf       	out	0x3e, r29	; 62
    4b6c:	0f be       	out	0x3f, r0	; 63
    4b6e:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8ReturnData = 0 ;
    4b70:	19 8a       	std	Y+17, r1	; 0x11
	u8 LOC_u8PinValue       ;
	u8 LOC_u8ROW            ;
	u8 LOC_u8COL            ;

	for(LOC_u8COL=0 + KPD_COL_INIT; LOC_u8COL < KPD_COL_END + 1 ; LOC_u8COL++) // loop on col pins
    4b72:	84 e0       	ldi	r24, 0x04	; 4
    4b74:	8f 87       	std	Y+15, r24	; 0x0f
    4b76:	c9 c0       	rjmp	.+402    	; 0x4d0a <KPD_u8GetPressed+0x1ae>
	{
		DIO_enumSetPINValue(KPD_PORT,LOC_u8COL,DIO_LOW); // make col pin low
    4b78:	84 e0       	ldi	r24, 0x04	; 4
    4b7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
		for(LOC_u8ROW = 0 + KPD_ROW_INIT ;LOC_u8ROW < KPD_ROW_END + 1 ;LOC_u8ROW++ ) // loop on rows pins
    4b82:	18 8a       	std	Y+16, r1	; 0x10
    4b84:	b6 c0       	rjmp	.+364    	; 0x4cf2 <KPD_u8GetPressed+0x196>
		{
			DIO_enumGetPINValue(KPD_PORT,LOC_u8ROW,&LOC_u8PinValue); // read row value
    4b86:	9e 01       	movw	r18, r28
    4b88:	2e 5e       	subi	r18, 0xEE	; 238
    4b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b8c:	84 e0       	ldi	r24, 0x04	; 4
    4b8e:	68 89       	ldd	r22, Y+16	; 0x10
    4b90:	a9 01       	movw	r20, r18
    4b92:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <DIO_enumGetPINValue>
			if(LOC_u8PinValue == DIO_LOW)
    4b96:	8a 89       	ldd	r24, Y+18	; 0x12
    4b98:	88 23       	and	r24, r24
    4b9a:	09 f0       	breq	.+2      	; 0x4b9e <KPD_u8GetPressed+0x42>
    4b9c:	a7 c0       	rjmp	.+334    	; 0x4cec <KPD_u8GetPressed+0x190>
    4b9e:	80 e0       	ldi	r24, 0x00	; 0
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	a8 e4       	ldi	r26, 0x48	; 72
    4ba4:	b2 e4       	ldi	r27, 0x42	; 66
    4ba6:	8b 87       	std	Y+11, r24	; 0x0b
    4ba8:	9c 87       	std	Y+12, r25	; 0x0c
    4baa:	ad 87       	std	Y+13, r26	; 0x0d
    4bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	4a ef       	ldi	r20, 0xFA	; 250
    4bbc:	54 e4       	ldi	r21, 0x44	; 68
    4bbe:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	cb 01       	movw	r24, r22
    4bc6:	8f 83       	std	Y+7, r24	; 0x07
    4bc8:	98 87       	std	Y+8, r25	; 0x08
    4bca:	a9 87       	std	Y+9, r26	; 0x09
    4bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bce:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd0:	78 85       	ldd	r23, Y+8	; 0x08
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	40 e8       	ldi	r20, 0x80	; 128
    4bdc:	5f e3       	ldi	r21, 0x3F	; 63
    4bde:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__ltsf2>
    4be2:	88 23       	and	r24, r24
    4be4:	2c f4       	brge	.+10     	; 0x4bf0 <KPD_u8GetPressed+0x94>
		__ticks = 1;
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	9e 83       	std	Y+6, r25	; 0x06
    4bec:	8d 83       	std	Y+5, r24	; 0x05
    4bee:	3f c0       	rjmp	.+126    	; 0x4c6e <KPD_u8GetPressed+0x112>
	else if (__tmp > 65535)
    4bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf2:	78 85       	ldd	r23, Y+8	; 0x08
    4bf4:	89 85       	ldd	r24, Y+9	; 0x09
    4bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	3f ef       	ldi	r19, 0xFF	; 255
    4bfc:	4f e7       	ldi	r20, 0x7F	; 127
    4bfe:	57 e4       	ldi	r21, 0x47	; 71
    4c00:	0e 94 75 10 	call	0x20ea	; 0x20ea <__gtsf2>
    4c04:	18 16       	cp	r1, r24
    4c06:	4c f5       	brge	.+82     	; 0x4c5a <KPD_u8GetPressed+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	40 e2       	ldi	r20, 0x20	; 32
    4c16:	51 e4       	ldi	r21, 0x41	; 65
    4c18:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__mulsf3>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	bc 01       	movw	r22, r24
    4c22:	cd 01       	movw	r24, r26
    4c24:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	9e 83       	std	Y+6, r25	; 0x06
    4c2e:	8d 83       	std	Y+5, r24	; 0x05
    4c30:	0f c0       	rjmp	.+30     	; 0x4c50 <KPD_u8GetPressed+0xf4>
    4c32:	88 ec       	ldi	r24, 0xC8	; 200
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	9c 83       	std	Y+4, r25	; 0x04
    4c38:	8b 83       	std	Y+3, r24	; 0x03
    4c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3e:	01 97       	sbiw	r24, 0x01	; 1
    4c40:	f1 f7       	brne	.-4      	; 0x4c3e <KPD_u8GetPressed+0xe2>
    4c42:	9c 83       	std	Y+4, r25	; 0x04
    4c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c46:	8d 81       	ldd	r24, Y+5	; 0x05
    4c48:	9e 81       	ldd	r25, Y+6	; 0x06
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	9e 83       	std	Y+6, r25	; 0x06
    4c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c50:	8d 81       	ldd	r24, Y+5	; 0x05
    4c52:	9e 81       	ldd	r25, Y+6	; 0x06
    4c54:	00 97       	sbiw	r24, 0x00	; 0
    4c56:	69 f7       	brne	.-38     	; 0x4c32 <KPD_u8GetPressed+0xd6>
    4c58:	14 c0       	rjmp	.+40     	; 0x4c82 <KPD_u8GetPressed+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c5c:	78 85       	ldd	r23, Y+8	; 0x08
    4c5e:	89 85       	ldd	r24, Y+9	; 0x09
    4c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c62:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    4c66:	dc 01       	movw	r26, r24
    4c68:	cb 01       	movw	r24, r22
    4c6a:	9e 83       	std	Y+6, r25	; 0x06
    4c6c:	8d 83       	std	Y+5, r24	; 0x05
    4c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c70:	9e 81       	ldd	r25, Y+6	; 0x06
    4c72:	9a 83       	std	Y+2, r25	; 0x02
    4c74:	89 83       	std	Y+1, r24	; 0x01
    4c76:	89 81       	ldd	r24, Y+1	; 0x01
    4c78:	9a 81       	ldd	r25, Y+2	; 0x02
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	f1 f7       	brne	.-4      	; 0x4c7a <KPD_u8GetPressed+0x11e>
    4c7e:	9a 83       	std	Y+2, r25	; 0x02
    4c80:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50); // delay for bouncing
				DIO_enumGetPINValue(KPD_PORT,LOC_u8ROW,&LOC_u8PinValue);
    4c82:	9e 01       	movw	r18, r28
    4c84:	2e 5e       	subi	r18, 0xEE	; 238
    4c86:	3f 4f       	sbci	r19, 0xFF	; 255
    4c88:	84 e0       	ldi	r24, 0x04	; 4
    4c8a:	68 89       	ldd	r22, Y+16	; 0x10
    4c8c:	a9 01       	movw	r20, r18
    4c8e:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <DIO_enumGetPINValue>
				if(LOC_u8PinValue == DIO_LOW)
    4c92:	8a 89       	ldd	r24, Y+18	; 0x12
    4c94:	88 23       	and	r24, r24
    4c96:	a9 f4       	brne	.+42     	; 0x4cc2 <KPD_u8GetPressed+0x166>
							{
								LOC_u8ReturnData = KPD_u8Buttons[LOC_u8ROW-KPD_ROW_INIT][LOC_u8COL-KPD_COL_INIT];// store the data according to 2d array
    4c98:	88 89       	ldd	r24, Y+16	; 0x10
    4c9a:	48 2f       	mov	r20, r24
    4c9c:	50 e0       	ldi	r21, 0x00	; 0
    4c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ca0:	88 2f       	mov	r24, r24
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	9c 01       	movw	r18, r24
    4ca6:	24 50       	subi	r18, 0x04	; 4
    4ca8:	30 40       	sbci	r19, 0x00	; 0
    4caa:	ca 01       	movw	r24, r20
    4cac:	88 0f       	add	r24, r24
    4cae:	99 1f       	adc	r25, r25
    4cb0:	88 0f       	add	r24, r24
    4cb2:	99 1f       	adc	r25, r25
    4cb4:	82 0f       	add	r24, r18
    4cb6:	93 1f       	adc	r25, r19
    4cb8:	fc 01       	movw	r30, r24
    4cba:	ec 52       	subi	r30, 0x2C	; 44
    4cbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4cbe:	80 81       	ld	r24, Z
    4cc0:	89 8b       	std	Y+17, r24	; 0x11
							}
				DIO_enumGetPINValue(KPD_PORT,LOC_u8ROW,&LOC_u8PinValue);
    4cc2:	9e 01       	movw	r18, r28
    4cc4:	2e 5e       	subi	r18, 0xEE	; 238
    4cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc8:	84 e0       	ldi	r24, 0x04	; 4
    4cca:	68 89       	ldd	r22, Y+16	; 0x10
    4ccc:	a9 01       	movw	r20, r18
    4cce:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <DIO_enumGetPINValue>
    4cd2:	08 c0       	rjmp	.+16     	; 0x4ce4 <KPD_u8GetPressed+0x188>
				while(LOC_u8PinValue == DIO_LOW) // make code stuck until you free the btn
				{
					DIO_enumGetPINValue(KPD_PORT,LOC_u8ROW,&LOC_u8PinValue);
    4cd4:	9e 01       	movw	r18, r28
    4cd6:	2e 5e       	subi	r18, 0xEE	; 238
    4cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cda:	84 e0       	ldi	r24, 0x04	; 4
    4cdc:	68 89       	ldd	r22, Y+16	; 0x10
    4cde:	a9 01       	movw	r20, r18
    4ce0:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <DIO_enumGetPINValue>
				if(LOC_u8PinValue == DIO_LOW)
							{
								LOC_u8ReturnData = KPD_u8Buttons[LOC_u8ROW-KPD_ROW_INIT][LOC_u8COL-KPD_COL_INIT];// store the data according to 2d array
							}
				DIO_enumGetPINValue(KPD_PORT,LOC_u8ROW,&LOC_u8PinValue);
				while(LOC_u8PinValue == DIO_LOW) // make code stuck until you free the btn
    4ce4:	8a 89       	ldd	r24, Y+18	; 0x12
    4ce6:	88 23       	and	r24, r24
    4ce8:	a9 f3       	breq	.-22     	; 0x4cd4 <KPD_u8GetPressed+0x178>
    4cea:	07 c0       	rjmp	.+14     	; 0x4cfa <KPD_u8GetPressed+0x19e>
	u8 LOC_u8COL            ;

	for(LOC_u8COL=0 + KPD_COL_INIT; LOC_u8COL < KPD_COL_END + 1 ; LOC_u8COL++) // loop on col pins
	{
		DIO_enumSetPINValue(KPD_PORT,LOC_u8COL,DIO_LOW); // make col pin low
		for(LOC_u8ROW = 0 + KPD_ROW_INIT ;LOC_u8ROW < KPD_ROW_END + 1 ;LOC_u8ROW++ ) // loop on rows pins
    4cec:	88 89       	ldd	r24, Y+16	; 0x10
    4cee:	8f 5f       	subi	r24, 0xFF	; 255
    4cf0:	88 8b       	std	Y+16, r24	; 0x10
    4cf2:	88 89       	ldd	r24, Y+16	; 0x10
    4cf4:	84 30       	cpi	r24, 0x04	; 4
    4cf6:	08 f4       	brcc	.+2      	; 0x4cfa <KPD_u8GetPressed+0x19e>
    4cf8:	46 cf       	rjmp	.-372    	; 0x4b86 <KPD_u8GetPressed+0x2a>
					DIO_enumGetPINValue(KPD_PORT,LOC_u8ROW,&LOC_u8PinValue);
				}
				break; // we get the btn no need to loop
			}
		}
		DIO_enumSetPINValue(KPD_PORT,LOC_u8COL,DIO_HIGH); // make col pin high to loop
    4cfa:	84 e0       	ldi	r24, 0x04	; 4
    4cfc:	6f 85       	ldd	r22, Y+15	; 0x0f
    4cfe:	41 e0       	ldi	r20, 0x01	; 1
    4d00:	0e 94 93 19 	call	0x3326	; 0x3326 <DIO_enumSetPINValue>
	u8 LOC_u8ReturnData = 0 ;
	u8 LOC_u8PinValue       ;
	u8 LOC_u8ROW            ;
	u8 LOC_u8COL            ;

	for(LOC_u8COL=0 + KPD_COL_INIT; LOC_u8COL < KPD_COL_END + 1 ; LOC_u8COL++) // loop on col pins
    4d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d06:	8f 5f       	subi	r24, 0xFF	; 255
    4d08:	8f 87       	std	Y+15, r24	; 0x0f
    4d0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d0c:	88 30       	cpi	r24, 0x08	; 8
    4d0e:	08 f4       	brcc	.+2      	; 0x4d12 <KPD_u8GetPressed+0x1b6>
    4d10:	33 cf       	rjmp	.-410    	; 0x4b78 <KPD_u8GetPressed+0x1c>
			}
		}
		DIO_enumSetPINValue(KPD_PORT,LOC_u8COL,DIO_HIGH); // make col pin high to loop

	}
return LOC_u8ReturnData;
    4d12:	89 89       	ldd	r24, Y+17	; 0x11
}
    4d14:	62 96       	adiw	r28, 0x12	; 18
    4d16:	0f b6       	in	r0, 0x3f	; 63
    4d18:	f8 94       	cli
    4d1a:	de bf       	out	0x3e, r29	; 62
    4d1c:	0f be       	out	0x3f, r0	; 63
    4d1e:	cd bf       	out	0x3d, r28	; 61
    4d20:	cf 91       	pop	r28
    4d22:	df 91       	pop	r29
    4d24:	08 95       	ret

00004d26 <__divmodhi4>:
    4d26:	97 fb       	bst	r25, 7
    4d28:	09 2e       	mov	r0, r25
    4d2a:	07 26       	eor	r0, r23
    4d2c:	0a d0       	rcall	.+20     	; 0x4d42 <__divmodhi4_neg1>
    4d2e:	77 fd       	sbrc	r23, 7
    4d30:	04 d0       	rcall	.+8      	; 0x4d3a <__divmodhi4_neg2>
    4d32:	2b d0       	rcall	.+86     	; 0x4d8a <__udivmodhi4>
    4d34:	06 d0       	rcall	.+12     	; 0x4d42 <__divmodhi4_neg1>
    4d36:	00 20       	and	r0, r0
    4d38:	1a f4       	brpl	.+6      	; 0x4d40 <__divmodhi4_exit>

00004d3a <__divmodhi4_neg2>:
    4d3a:	70 95       	com	r23
    4d3c:	61 95       	neg	r22
    4d3e:	7f 4f       	sbci	r23, 0xFF	; 255

00004d40 <__divmodhi4_exit>:
    4d40:	08 95       	ret

00004d42 <__divmodhi4_neg1>:
    4d42:	f6 f7       	brtc	.-4      	; 0x4d40 <__divmodhi4_exit>
    4d44:	90 95       	com	r25
    4d46:	81 95       	neg	r24
    4d48:	9f 4f       	sbci	r25, 0xFF	; 255
    4d4a:	08 95       	ret

00004d4c <__mulsi3>:
    4d4c:	62 9f       	mul	r22, r18
    4d4e:	d0 01       	movw	r26, r0
    4d50:	73 9f       	mul	r23, r19
    4d52:	f0 01       	movw	r30, r0
    4d54:	82 9f       	mul	r24, r18
    4d56:	e0 0d       	add	r30, r0
    4d58:	f1 1d       	adc	r31, r1
    4d5a:	64 9f       	mul	r22, r20
    4d5c:	e0 0d       	add	r30, r0
    4d5e:	f1 1d       	adc	r31, r1
    4d60:	92 9f       	mul	r25, r18
    4d62:	f0 0d       	add	r31, r0
    4d64:	83 9f       	mul	r24, r19
    4d66:	f0 0d       	add	r31, r0
    4d68:	74 9f       	mul	r23, r20
    4d6a:	f0 0d       	add	r31, r0
    4d6c:	65 9f       	mul	r22, r21
    4d6e:	f0 0d       	add	r31, r0
    4d70:	99 27       	eor	r25, r25
    4d72:	72 9f       	mul	r23, r18
    4d74:	b0 0d       	add	r27, r0
    4d76:	e1 1d       	adc	r30, r1
    4d78:	f9 1f       	adc	r31, r25
    4d7a:	63 9f       	mul	r22, r19
    4d7c:	b0 0d       	add	r27, r0
    4d7e:	e1 1d       	adc	r30, r1
    4d80:	f9 1f       	adc	r31, r25
    4d82:	bd 01       	movw	r22, r26
    4d84:	cf 01       	movw	r24, r30
    4d86:	11 24       	eor	r1, r1
    4d88:	08 95       	ret

00004d8a <__udivmodhi4>:
    4d8a:	aa 1b       	sub	r26, r26
    4d8c:	bb 1b       	sub	r27, r27
    4d8e:	51 e1       	ldi	r21, 0x11	; 17
    4d90:	07 c0       	rjmp	.+14     	; 0x4da0 <__udivmodhi4_ep>

00004d92 <__udivmodhi4_loop>:
    4d92:	aa 1f       	adc	r26, r26
    4d94:	bb 1f       	adc	r27, r27
    4d96:	a6 17       	cp	r26, r22
    4d98:	b7 07       	cpc	r27, r23
    4d9a:	10 f0       	brcs	.+4      	; 0x4da0 <__udivmodhi4_ep>
    4d9c:	a6 1b       	sub	r26, r22
    4d9e:	b7 0b       	sbc	r27, r23

00004da0 <__udivmodhi4_ep>:
    4da0:	88 1f       	adc	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	5a 95       	dec	r21
    4da6:	a9 f7       	brne	.-22     	; 0x4d92 <__udivmodhi4_loop>
    4da8:	80 95       	com	r24
    4daa:	90 95       	com	r25
    4dac:	bc 01       	movw	r22, r24
    4dae:	cd 01       	movw	r24, r26
    4db0:	08 95       	ret

00004db2 <__udivmodsi4>:
    4db2:	a1 e2       	ldi	r26, 0x21	; 33
    4db4:	1a 2e       	mov	r1, r26
    4db6:	aa 1b       	sub	r26, r26
    4db8:	bb 1b       	sub	r27, r27
    4dba:	fd 01       	movw	r30, r26
    4dbc:	0d c0       	rjmp	.+26     	; 0x4dd8 <__udivmodsi4_ep>

00004dbe <__udivmodsi4_loop>:
    4dbe:	aa 1f       	adc	r26, r26
    4dc0:	bb 1f       	adc	r27, r27
    4dc2:	ee 1f       	adc	r30, r30
    4dc4:	ff 1f       	adc	r31, r31
    4dc6:	a2 17       	cp	r26, r18
    4dc8:	b3 07       	cpc	r27, r19
    4dca:	e4 07       	cpc	r30, r20
    4dcc:	f5 07       	cpc	r31, r21
    4dce:	20 f0       	brcs	.+8      	; 0x4dd8 <__udivmodsi4_ep>
    4dd0:	a2 1b       	sub	r26, r18
    4dd2:	b3 0b       	sbc	r27, r19
    4dd4:	e4 0b       	sbc	r30, r20
    4dd6:	f5 0b       	sbc	r31, r21

00004dd8 <__udivmodsi4_ep>:
    4dd8:	66 1f       	adc	r22, r22
    4dda:	77 1f       	adc	r23, r23
    4ddc:	88 1f       	adc	r24, r24
    4dde:	99 1f       	adc	r25, r25
    4de0:	1a 94       	dec	r1
    4de2:	69 f7       	brne	.-38     	; 0x4dbe <__udivmodsi4_loop>
    4de4:	60 95       	com	r22
    4de6:	70 95       	com	r23
    4de8:	80 95       	com	r24
    4dea:	90 95       	com	r25
    4dec:	9b 01       	movw	r18, r22
    4dee:	ac 01       	movw	r20, r24
    4df0:	bd 01       	movw	r22, r26
    4df2:	cf 01       	movw	r24, r30
    4df4:	08 95       	ret

00004df6 <__prologue_saves__>:
    4df6:	2f 92       	push	r2
    4df8:	3f 92       	push	r3
    4dfa:	4f 92       	push	r4
    4dfc:	5f 92       	push	r5
    4dfe:	6f 92       	push	r6
    4e00:	7f 92       	push	r7
    4e02:	8f 92       	push	r8
    4e04:	9f 92       	push	r9
    4e06:	af 92       	push	r10
    4e08:	bf 92       	push	r11
    4e0a:	cf 92       	push	r12
    4e0c:	df 92       	push	r13
    4e0e:	ef 92       	push	r14
    4e10:	ff 92       	push	r15
    4e12:	0f 93       	push	r16
    4e14:	1f 93       	push	r17
    4e16:	cf 93       	push	r28
    4e18:	df 93       	push	r29
    4e1a:	cd b7       	in	r28, 0x3d	; 61
    4e1c:	de b7       	in	r29, 0x3e	; 62
    4e1e:	ca 1b       	sub	r28, r26
    4e20:	db 0b       	sbc	r29, r27
    4e22:	0f b6       	in	r0, 0x3f	; 63
    4e24:	f8 94       	cli
    4e26:	de bf       	out	0x3e, r29	; 62
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	cd bf       	out	0x3d, r28	; 61
    4e2c:	09 94       	ijmp

00004e2e <__epilogue_restores__>:
    4e2e:	2a 88       	ldd	r2, Y+18	; 0x12
    4e30:	39 88       	ldd	r3, Y+17	; 0x11
    4e32:	48 88       	ldd	r4, Y+16	; 0x10
    4e34:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e36:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e38:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e40:	b9 84       	ldd	r11, Y+9	; 0x09
    4e42:	c8 84       	ldd	r12, Y+8	; 0x08
    4e44:	df 80       	ldd	r13, Y+7	; 0x07
    4e46:	ee 80       	ldd	r14, Y+6	; 0x06
    4e48:	fd 80       	ldd	r15, Y+5	; 0x05
    4e4a:	0c 81       	ldd	r16, Y+4	; 0x04
    4e4c:	1b 81       	ldd	r17, Y+3	; 0x03
    4e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    4e50:	b9 81       	ldd	r27, Y+1	; 0x01
    4e52:	ce 0f       	add	r28, r30
    4e54:	d1 1d       	adc	r29, r1
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	f8 94       	cli
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	ed 01       	movw	r28, r26
    4e62:	08 95       	ret

00004e64 <_exit>:
    4e64:	f8 94       	cli

00004e66 <__stop_program>:
    4e66:	ff cf       	rjmp	.-2      	; 0x4e66 <__stop_program>
