
Traffic_light_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001e8e  00001f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ab8  00000000  00000000  00001f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000edf  00000000  00000000  000039d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000048b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000049f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000769b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000085a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008835  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 45 0f 	jmp	0x1e8a	; 0x1e8a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "../HAL/SSD/SSD_interface.h"
#define red    0
#define yellow 1
#define green  2
int main (void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	cb 56       	subi	r28, 0x6B	; 107
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
	// set the configuration of hardware
	LED_Type traffic_leds[3]={{DIO_PORTD,DIO_PIN5,ACTIVE_HIGH},
							  {DIO_PORTD,DIO_PIN4,ACTIVE_HIGH},
							  {DIO_PORTD,DIO_PIN3,ACTIVE_HIGH}};
     b50:	ce 01       	movw	r24, r28
     b52:	8a 5a       	subi	r24, 0xAA	; 170
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	a9 96       	adiw	r28, 0x29	; 41
     b58:	9f af       	std	Y+63, r25	; 0x3f
     b5a:	8e af       	std	Y+62, r24	; 0x3e
     b5c:	a9 97       	sbiw	r28, 0x29	; 41
     b5e:	88 e6       	ldi	r24, 0x68	; 104
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	ab 96       	adiw	r28, 0x2b	; 43
     b64:	9f af       	std	Y+63, r25	; 0x3f
     b66:	8e af       	std	Y+62, r24	; 0x3e
     b68:	ab 97       	sbiw	r28, 0x2b	; 43
     b6a:	99 e0       	ldi	r25, 0x09	; 9
     b6c:	ac 96       	adiw	r28, 0x2c	; 44
     b6e:	9f af       	std	Y+63, r25	; 0x3f
     b70:	ac 97       	sbiw	r28, 0x2c	; 44
     b72:	ab 96       	adiw	r28, 0x2b	; 43
     b74:	ee ad       	ldd	r30, Y+62	; 0x3e
     b76:	ff ad       	ldd	r31, Y+63	; 0x3f
     b78:	ab 97       	sbiw	r28, 0x2b	; 43
     b7a:	00 80       	ld	r0, Z
     b7c:	ab 96       	adiw	r28, 0x2b	; 43
     b7e:	8e ad       	ldd	r24, Y+62	; 0x3e
     b80:	9f ad       	ldd	r25, Y+63	; 0x3f
     b82:	ab 97       	sbiw	r28, 0x2b	; 43
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	ab 96       	adiw	r28, 0x2b	; 43
     b88:	9f af       	std	Y+63, r25	; 0x3f
     b8a:	8e af       	std	Y+62, r24	; 0x3e
     b8c:	ab 97       	sbiw	r28, 0x2b	; 43
     b8e:	a9 96       	adiw	r28, 0x29	; 41
     b90:	ee ad       	ldd	r30, Y+62	; 0x3e
     b92:	ff ad       	ldd	r31, Y+63	; 0x3f
     b94:	a9 97       	sbiw	r28, 0x29	; 41
     b96:	00 82       	st	Z, r0
     b98:	a9 96       	adiw	r28, 0x29	; 41
     b9a:	8e ad       	ldd	r24, Y+62	; 0x3e
     b9c:	9f ad       	ldd	r25, Y+63	; 0x3f
     b9e:	a9 97       	sbiw	r28, 0x29	; 41
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	a9 96       	adiw	r28, 0x29	; 41
     ba4:	9f af       	std	Y+63, r25	; 0x3f
     ba6:	8e af       	std	Y+62, r24	; 0x3e
     ba8:	a9 97       	sbiw	r28, 0x29	; 41
     baa:	ac 96       	adiw	r28, 0x2c	; 44
     bac:	9f ad       	ldd	r25, Y+63	; 0x3f
     bae:	ac 97       	sbiw	r28, 0x2c	; 44
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	ac 96       	adiw	r28, 0x2c	; 44
     bb4:	9f af       	std	Y+63, r25	; 0x3f
     bb6:	ac 97       	sbiw	r28, 0x2c	; 44
     bb8:	ac 96       	adiw	r28, 0x2c	; 44
     bba:	ef ad       	ldd	r30, Y+63	; 0x3f
     bbc:	ac 97       	sbiw	r28, 0x2c	; 44
     bbe:	ee 23       	and	r30, r30
     bc0:	c1 f6       	brne	.-80     	; 0xb72 <main+0x3c>


	SSD_Type SSD1		={SSD_COMMON_CATHODE,DIO_PORTA,DIO_PORTD,DIO_PIN7};
     bc2:	fe 01       	movw	r30, r28
     bc4:	e1 5a       	subi	r30, 0xA1	; 161
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	10 82       	st	Z, r1
     bca:	fe 01       	movw	r30, r28
     bcc:	e1 5a       	subi	r30, 0xA1	; 161
     bce:	ff 4f       	sbci	r31, 0xFF	; 255
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	81 83       	std	Z+1, r24	; 0x01
     bd4:	fe 01       	movw	r30, r28
     bd6:	e1 5a       	subi	r30, 0xA1	; 161
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	82 83       	std	Z+2, r24	; 0x02
     bde:	fe 01       	movw	r30, r28
     be0:	e1 5a       	subi	r30, 0xA1	; 161
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	83 83       	std	Z+3, r24	; 0x03
	SSD_Type SSD2		={SSD_COMMON_CATHODE,DIO_PORTC,DIO_PORTD,DIO_PIN6};
     be8:	fe 01       	movw	r30, r28
     bea:	ed 59       	subi	r30, 0x9D	; 157
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	10 82       	st	Z, r1
     bf0:	fe 01       	movw	r30, r28
     bf2:	ed 59       	subi	r30, 0x9D	; 157
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	81 83       	std	Z+1, r24	; 0x01
     bfa:	fe 01       	movw	r30, r28
     bfc:	ed 59       	subi	r30, 0x9D	; 157
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	82 83       	std	Z+2, r24	; 0x02
     c04:	fe 01       	movw	r30, r28
     c06:	ed 59       	subi	r30, 0x9D	; 157
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	83 83       	std	Z+3, r24	; 0x03
	//----------------------------------------------------------------------

	// Init hardware
	// Init leds
	LED_voidInit(traffic_leds[red]);
     c0e:	fe 01       	movw	r30, r28
     c10:	ea 5a       	subi	r30, 0xAA	; 170
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LED_voidInit>
	LED_voidInit(traffic_leds[green]);
     c1e:	fe 01       	movw	r30, r28
     c20:	ea 5a       	subi	r30, 0xAA	; 170
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	66 81       	ldd	r22, Z+6	; 0x06
     c26:	77 81       	ldd	r23, Z+7	; 0x07
     c28:	80 85       	ldd	r24, Z+8	; 0x08
     c2a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LED_voidInit>
	LED_voidInit(traffic_leds[yellow]);
     c2e:	fe 01       	movw	r30, r28
     c30:	ea 5a       	subi	r30, 0xAA	; 170
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	63 81       	ldd	r22, Z+3	; 0x03
     c36:	74 81       	ldd	r23, Z+4	; 0x04
     c38:	85 81       	ldd	r24, Z+5	; 0x05
     c3a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LED_voidInit>
	//Init seven segments
	SSD_voidInit(SSD1);
     c3e:	fe 01       	movw	r30, r28
     c40:	e1 5a       	subi	r30, 0xA1	; 161
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	a2 81       	ldd	r26, Z+2	; 0x02
     c4a:	b3 81       	ldd	r27, Z+3	; 0x03
     c4c:	bc 01       	movw	r22, r24
     c4e:	cd 01       	movw	r24, r26
     c50:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <SSD_voidInit>
	SSD_voidInit(SSD2);
     c54:	fe 01       	movw	r30, r28
     c56:	ed 59       	subi	r30, 0x9D	; 157
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	a2 81       	ldd	r26, Z+2	; 0x02
     c60:	b3 81       	ldd	r27, Z+3	; 0x03
     c62:	bc 01       	movw	r22, r24
     c64:	cd 01       	movw	r24, r26
     c66:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <SSD_voidInit>
	//-----------------------------------------------------------------------
	s8 i =0;// loop variable
     c6a:	fe 01       	movw	r30, r28
     c6c:	eb 5a       	subi	r30, 0xAB	; 171
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	10 82       	st	Z, r1

	while(1)
		{
			LED_voidOn(traffic_leds[red]);
     c72:	fe 01       	movw	r30, r28
     c74:	ea 5a       	subi	r30, 0xAA	; 170
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	60 81       	ld	r22, Z
     c7a:	71 81       	ldd	r23, Z+1	; 0x01
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LED_voidOn>
			SSD_voidSendNumber(SSD1,0);
     c82:	fe 01       	movw	r30, r28
     c84:	e1 5a       	subi	r30, 0xA1	; 161
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	a2 81       	ldd	r26, Z+2	; 0x02
     c8e:	b3 81       	ldd	r27, Z+3	; 0x03
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
			SSD_voidEnable(SSD1);
     c9a:	fe 01       	movw	r30, r28
     c9c:	e1 5a       	subi	r30, 0xA1	; 161
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	a2 81       	ldd	r26, Z+2	; 0x02
     ca6:	b3 81       	ldd	r27, Z+3	; 0x03
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <SSD_voidEnable>
			SSD_voidSendNumber(SSD2,1);
     cb0:	fe 01       	movw	r30, r28
     cb2:	ed 59       	subi	r30, 0x9D	; 157
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	a2 81       	ldd	r26, Z+2	; 0x02
     cbc:	b3 81       	ldd	r27, Z+3	; 0x03
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
			SSD_voidEnable(SSD2);
     cc8:	fe 01       	movw	r30, r28
     cca:	ed 59       	subi	r30, 0x9D	; 157
     ccc:	ff 4f       	sbci	r31, 0xFF	; 255
     cce:	80 81       	ld	r24, Z
     cd0:	91 81       	ldd	r25, Z+1	; 0x01
     cd2:	a2 81       	ldd	r26, Z+2	; 0x02
     cd4:	b3 81       	ldd	r27, Z+3	; 0x03
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <SSD_voidEnable>
     cde:	fe 01       	movw	r30, r28
     ce0:	ef 5a       	subi	r30, 0xAF	; 175
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	aa e7       	ldi	r26, 0x7A	; 122
     cea:	b4 e4       	ldi	r27, 0x44	; 68
     cec:	80 83       	st	Z, r24
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	a2 83       	std	Z+2, r26	; 0x02
     cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	8e 01       	movw	r16, r28
     cf6:	03 5b       	subi	r16, 0xB3	; 179
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	fe 01       	movw	r30, r28
     cfc:	ef 5a       	subi	r30, 0xAF	; 175
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	4a ef       	ldi	r20, 0xFA	; 250
     d0e:	54 e4       	ldi	r21, 0x44	; 68
     d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	f8 01       	movw	r30, r16
     d1a:	80 83       	st	Z, r24
     d1c:	91 83       	std	Z+1, r25	; 0x01
     d1e:	a2 83       	std	Z+2, r26	; 0x02
     d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d22:	fe 01       	movw	r30, r28
     d24:	e3 5b       	subi	r30, 0xB3	; 179
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	60 81       	ld	r22, Z
     d2a:	71 81       	ldd	r23, Z+1	; 0x01
     d2c:	82 81       	ldd	r24, Z+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	44 f4       	brge	.+16     	; 0xd50 <main+0x21a>
		__ticks = 1;
     d40:	fe 01       	movw	r30, r28
     d42:	e5 5b       	subi	r30, 0xB5	; 181
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
     d4e:	64 c0       	rjmp	.+200    	; 0xe18 <main+0x2e2>
	else if (__tmp > 65535)
     d50:	fe 01       	movw	r30, r28
     d52:	e3 5b       	subi	r30, 0xB3	; 179
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	60 81       	ld	r22, Z
     d58:	71 81       	ldd	r23, Z+1	; 0x01
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	93 81       	ldd	r25, Z+3	; 0x03
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	3f ef       	ldi	r19, 0xFF	; 255
     d62:	4f e7       	ldi	r20, 0x7F	; 127
     d64:	57 e4       	ldi	r21, 0x47	; 71
     d66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d6a:	18 16       	cp	r1, r24
     d6c:	0c f0       	brlt	.+2      	; 0xd70 <main+0x23a>
     d6e:	43 c0       	rjmp	.+134    	; 0xdf6 <main+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d70:	fe 01       	movw	r30, r28
     d72:	ef 5a       	subi	r30, 0xAF	; 175
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	8e 01       	movw	r16, r28
     d90:	05 5b       	subi	r16, 0xB5	; 181
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	f8 01       	movw	r30, r16
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	1f c0       	rjmp	.+62     	; 0xde6 <main+0x2b0>
     da8:	fe 01       	movw	r30, r28
     daa:	e7 5b       	subi	r30, 0xB7	; 183
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	88 ec       	ldi	r24, 0xC8	; 200
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db6:	fe 01       	movw	r30, r28
     db8:	e7 5b       	subi	r30, 0xB7	; 183
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <main+0x28a>
     dc4:	fe 01       	movw	r30, r28
     dc6:	e7 5b       	subi	r30, 0xB7	; 183
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dce:	de 01       	movw	r26, r28
     dd0:	a5 5b       	subi	r26, 0xB5	; 181
     dd2:	bf 4f       	sbci	r27, 0xFF	; 255
     dd4:	fe 01       	movw	r30, r28
     dd6:	e5 5b       	subi	r30, 0xB5	; 181
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	9c 93       	st	X, r25
     de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	fe 01       	movw	r30, r28
     de8:	e5 5b       	subi	r30, 0xB5	; 181
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	d1 f6       	brne	.-76     	; 0xda8 <main+0x272>
     df4:	27 c0       	rjmp	.+78     	; 0xe44 <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	8e 01       	movw	r16, r28
     df8:	05 5b       	subi	r16, 0xB5	; 181
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
     dfc:	fe 01       	movw	r30, r28
     dfe:	e3 5b       	subi	r30, 0xB3	; 179
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	f8 01       	movw	r30, r16
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
     e18:	de 01       	movw	r26, r28
     e1a:	a9 5b       	subi	r26, 0xB9	; 185
     e1c:	bf 4f       	sbci	r27, 0xFF	; 255
     e1e:	fe 01       	movw	r30, r28
     e20:	e5 5b       	subi	r30, 0xB5	; 181
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	8d 93       	st	X+, r24
     e2a:	9c 93       	st	X, r25
     e2c:	fe 01       	movw	r30, r28
     e2e:	e9 5b       	subi	r30, 0xB9	; 185
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <main+0x300>
     e3a:	fe 01       	movw	r30, r28
     e3c:	e9 5b       	subi	r30, 0xB9	; 185
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
			_delay_ms(1000);
			SSD_voidSendNumber(SSD2,0);
     e44:	fe 01       	movw	r30, r28
     e46:	ed 59       	subi	r30, 0x9D	; 157
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	a2 81       	ldd	r26, Z+2	; 0x02
     e50:	b3 81       	ldd	r27, Z+3	; 0x03
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
			for(i=9;i>=0;i--)
     e5c:	fe 01       	movw	r30, r28
     e5e:	eb 5a       	subi	r30, 0xAB	; 171
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	89 e0       	ldi	r24, 0x09	; 9
     e64:	80 83       	st	Z, r24
     e66:	9e c0       	rjmp	.+316    	; 0xfa4 <main+0x46e>
			{
				SSD_voidSendNumber(SSD1,i);
     e68:	fe 01       	movw	r30, r28
     e6a:	eb 5a       	subi	r30, 0xAB	; 171
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	20 81       	ld	r18, Z
     e70:	fe 01       	movw	r30, r28
     e72:	e1 5a       	subi	r30, 0xA1	; 161
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	a2 81       	ldd	r26, Z+2	; 0x02
     e7c:	b3 81       	ldd	r27, Z+3	; 0x03
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	42 2f       	mov	r20, r18
     e84:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
     e88:	fe 01       	movw	r30, r28
     e8a:	ed 5b       	subi	r30, 0xBD	; 189
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	aa e7       	ldi	r26, 0x7A	; 122
     e94:	b4 e4       	ldi	r27, 0x44	; 68
     e96:	80 83       	st	Z, r24
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	a2 83       	std	Z+2, r26	; 0x02
     e9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9e:	8e 01       	movw	r16, r28
     ea0:	01 5c       	subi	r16, 0xC1	; 193
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	fe 01       	movw	r30, r28
     ea6:	ed 5b       	subi	r30, 0xBD	; 189
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	4a ef       	ldi	r20, 0xFA	; 250
     eb8:	54 e4       	ldi	r21, 0x44	; 68
     eba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 83       	st	Z, r24
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	a2 83       	std	Z+2, r26	; 0x02
     eca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ecc:	fe 01       	movw	r30, r28
     ece:	ff 96       	adiw	r30, 0x3f	; 63
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ee4:	88 23       	and	r24, r24
     ee6:	2c f4       	brge	.+10     	; 0xef2 <main+0x3bc>
		__ticks = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9e af       	std	Y+62, r25	; 0x3e
     eee:	8d af       	std	Y+61, r24	; 0x3d
     ef0:	46 c0       	rjmp	.+140    	; 0xf7e <main+0x448>
	else if (__tmp > 65535)
     ef2:	fe 01       	movw	r30, r28
     ef4:	ff 96       	adiw	r30, 0x3f	; 63
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	64 f5       	brge	.+88     	; 0xf66 <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0e:	fe 01       	movw	r30, r28
     f10:	ed 5b       	subi	r30, 0xBD	; 189
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	60 81       	ld	r22, Z
     f16:	71 81       	ldd	r23, Z+1	; 0x01
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	93 81       	ldd	r25, Z+3	; 0x03
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e2       	ldi	r20, 0x20	; 32
     f22:	51 e4       	ldi	r21, 0x41	; 65
     f24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	9e af       	std	Y+62, r25	; 0x3e
     f3a:	8d af       	std	Y+61, r24	; 0x3d
     f3c:	0f c0       	rjmp	.+30     	; 0xf5c <main+0x426>
     f3e:	88 ec       	ldi	r24, 0xC8	; 200
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9c af       	std	Y+60, r25	; 0x3c
     f44:	8b af       	std	Y+59, r24	; 0x3b
     f46:	8b ad       	ldd	r24, Y+59	; 0x3b
     f48:	9c ad       	ldd	r25, Y+60	; 0x3c
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <main+0x414>
     f4e:	9c af       	std	Y+60, r25	; 0x3c
     f50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f52:	8d ad       	ldd	r24, Y+61	; 0x3d
     f54:	9e ad       	ldd	r25, Y+62	; 0x3e
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	9e af       	std	Y+62, r25	; 0x3e
     f5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f5e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	69 f7       	brne	.-38     	; 0xf3e <main+0x408>
     f64:	16 c0       	rjmp	.+44     	; 0xf92 <main+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f66:	fe 01       	movw	r30, r28
     f68:	ff 96       	adiw	r30, 0x3f	; 63
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	9e af       	std	Y+62, r25	; 0x3e
     f7c:	8d af       	std	Y+61, r24	; 0x3d
     f7e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f80:	9e ad       	ldd	r25, Y+62	; 0x3e
     f82:	9a af       	std	Y+58, r25	; 0x3a
     f84:	89 af       	std	Y+57, r24	; 0x39
     f86:	89 ad       	ldd	r24, Y+57	; 0x39
     f88:	9a ad       	ldd	r25, Y+58	; 0x3a
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <main+0x454>
     f8e:	9a af       	std	Y+58, r25	; 0x3a
     f90:	89 af       	std	Y+57, r24	; 0x39
			SSD_voidEnable(SSD1);
			SSD_voidSendNumber(SSD2,1);
			SSD_voidEnable(SSD2);
			_delay_ms(1000);
			SSD_voidSendNumber(SSD2,0);
			for(i=9;i>=0;i--)
     f92:	de 01       	movw	r26, r28
     f94:	ab 5a       	subi	r26, 0xAB	; 171
     f96:	bf 4f       	sbci	r27, 0xFF	; 255
     f98:	fe 01       	movw	r30, r28
     f9a:	eb 5a       	subi	r30, 0xAB	; 171
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	8c 93       	st	X, r24
     fa4:	fe 01       	movw	r30, r28
     fa6:	eb 5a       	subi	r30, 0xAB	; 171
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	88 23       	and	r24, r24
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <main+0x47c>
     fb0:	5b cf       	rjmp	.-330    	; 0xe68 <main+0x332>
			{
				SSD_voidSendNumber(SSD1,i);
				_delay_ms(1000);
			}

			LED_voidOff(traffic_leds[red]);
     fb2:	fe 01       	movw	r30, r28
     fb4:	ea 5a       	subi	r30, 0xAA	; 170
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LED_voidOff>
			LED_voidOn(traffic_leds[yellow]);
     fc2:	fe 01       	movw	r30, r28
     fc4:	ea 5a       	subi	r30, 0xAA	; 170
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	63 81       	ldd	r22, Z+3	; 0x03
     fca:	74 81       	ldd	r23, Z+4	; 0x04
     fcc:	85 81       	ldd	r24, Z+5	; 0x05
     fce:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LED_voidOn>
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	aa e7       	ldi	r26, 0x7A	; 122
     fd8:	b4 e4       	ldi	r27, 0x44	; 68
     fda:	8d ab       	std	Y+53, r24	; 0x35
     fdc:	9e ab       	std	Y+54, r25	; 0x36
     fde:	af ab       	std	Y+55, r26	; 0x37
     fe0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe2:	6d a9       	ldd	r22, Y+53	; 0x35
     fe4:	7e a9       	ldd	r23, Y+54	; 0x36
     fe6:	8f a9       	ldd	r24, Y+55	; 0x37
     fe8:	98 ad       	ldd	r25, Y+56	; 0x38
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4a ef       	ldi	r20, 0xFA	; 250
     ff0:	54 e4       	ldi	r21, 0x44	; 68
     ff2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	89 ab       	std	Y+49, r24	; 0x31
     ffc:	9a ab       	std	Y+50, r25	; 0x32
     ffe:	ab ab       	std	Y+51, r26	; 0x33
    1000:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1002:	69 a9       	ldd	r22, Y+49	; 0x31
    1004:	7a a9       	ldd	r23, Y+50	; 0x32
    1006:	8b a9       	ldd	r24, Y+51	; 0x33
    1008:	9c a9       	ldd	r25, Y+52	; 0x34
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1016:	88 23       	and	r24, r24
    1018:	2c f4       	brge	.+10     	; 0x1024 <main+0x4ee>
		__ticks = 1;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	98 ab       	std	Y+48, r25	; 0x30
    1020:	8f a7       	std	Y+47, r24	; 0x2f
    1022:	3f c0       	rjmp	.+126    	; 0x10a2 <main+0x56c>
	else if (__tmp > 65535)
    1024:	69 a9       	ldd	r22, Y+49	; 0x31
    1026:	7a a9       	ldd	r23, Y+50	; 0x32
    1028:	8b a9       	ldd	r24, Y+51	; 0x33
    102a:	9c a9       	ldd	r25, Y+52	; 0x34
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	4f e7       	ldi	r20, 0x7F	; 127
    1032:	57 e4       	ldi	r21, 0x47	; 71
    1034:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1038:	18 16       	cp	r1, r24
    103a:	4c f5       	brge	.+82     	; 0x108e <main+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103c:	6d a9       	ldd	r22, Y+53	; 0x35
    103e:	7e a9       	ldd	r23, Y+54	; 0x36
    1040:	8f a9       	ldd	r24, Y+55	; 0x37
    1042:	98 ad       	ldd	r25, Y+56	; 0x38
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	98 ab       	std	Y+48, r25	; 0x30
    1062:	8f a7       	std	Y+47, r24	; 0x2f
    1064:	0f c0       	rjmp	.+30     	; 0x1084 <main+0x54e>
    1066:	88 ec       	ldi	r24, 0xC8	; 200
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9e a7       	std	Y+46, r25	; 0x2e
    106c:	8d a7       	std	Y+45, r24	; 0x2d
    106e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1070:	9e a5       	ldd	r25, Y+46	; 0x2e
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <main+0x53c>
    1076:	9e a7       	std	Y+46, r25	; 0x2e
    1078:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107a:	8f a5       	ldd	r24, Y+47	; 0x2f
    107c:	98 a9       	ldd	r25, Y+48	; 0x30
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	98 ab       	std	Y+48, r25	; 0x30
    1082:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1084:	8f a5       	ldd	r24, Y+47	; 0x2f
    1086:	98 a9       	ldd	r25, Y+48	; 0x30
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	69 f7       	brne	.-38     	; 0x1066 <main+0x530>
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <main+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108e:	69 a9       	ldd	r22, Y+49	; 0x31
    1090:	7a a9       	ldd	r23, Y+50	; 0x32
    1092:	8b a9       	ldd	r24, Y+51	; 0x33
    1094:	9c a9       	ldd	r25, Y+52	; 0x34
    1096:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	98 ab       	std	Y+48, r25	; 0x30
    10a0:	8f a7       	std	Y+47, r24	; 0x2f
    10a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a4:	98 a9       	ldd	r25, Y+48	; 0x30
    10a6:	9c a7       	std	Y+44, r25	; 0x2c
    10a8:	8b a7       	std	Y+43, r24	; 0x2b
    10aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	f1 f7       	brne	.-4      	; 0x10ae <main+0x578>
    10b2:	9c a7       	std	Y+44, r25	; 0x2c
    10b4:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			for(i=3;i>=0;i--)
    10b6:	fe 01       	movw	r30, r28
    10b8:	eb 5a       	subi	r30, 0xAB	; 171
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	80 83       	st	Z, r24
    10c0:	8b c0       	rjmp	.+278    	; 0x11d8 <main+0x6a2>
						{
							SSD_voidSendNumber(SSD1,i);
    10c2:	fe 01       	movw	r30, r28
    10c4:	eb 5a       	subi	r30, 0xAB	; 171
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	20 81       	ld	r18, Z
    10ca:	fe 01       	movw	r30, r28
    10cc:	e1 5a       	subi	r30, 0xA1	; 161
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 81       	ld	r24, Z
    10d2:	91 81       	ldd	r25, Z+1	; 0x01
    10d4:	a2 81       	ldd	r26, Z+2	; 0x02
    10d6:	b3 81       	ldd	r27, Z+3	; 0x03
    10d8:	bc 01       	movw	r22, r24
    10da:	cd 01       	movw	r24, r26
    10dc:	42 2f       	mov	r20, r18
    10de:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	aa e7       	ldi	r26, 0x7A	; 122
    10e8:	b4 e4       	ldi	r27, 0x44	; 68
    10ea:	8f a3       	std	Y+39, r24	; 0x27
    10ec:	98 a7       	std	Y+40, r25	; 0x28
    10ee:	a9 a7       	std	Y+41, r26	; 0x29
    10f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	6f a1       	ldd	r22, Y+39	; 0x27
    10f4:	78 a5       	ldd	r23, Y+40	; 0x28
    10f6:	89 a5       	ldd	r24, Y+41	; 0x29
    10f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a ef       	ldi	r20, 0xFA	; 250
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	8b a3       	std	Y+35, r24	; 0x23
    110c:	9c a3       	std	Y+36, r25	; 0x24
    110e:	ad a3       	std	Y+37, r26	; 0x25
    1110:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1112:	6b a1       	ldd	r22, Y+35	; 0x23
    1114:	7c a1       	ldd	r23, Y+36	; 0x24
    1116:	8d a1       	ldd	r24, Y+37	; 0x25
    1118:	9e a1       	ldd	r25, Y+38	; 0x26
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <main+0x5fe>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9a a3       	std	Y+34, r25	; 0x22
    1130:	89 a3       	std	Y+33, r24	; 0x21
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <main+0x67c>
	else if (__tmp > 65535)
    1134:	6b a1       	ldd	r22, Y+35	; 0x23
    1136:	7c a1       	ldd	r23, Y+36	; 0x24
    1138:	8d a1       	ldd	r24, Y+37	; 0x25
    113a:	9e a1       	ldd	r25, Y+38	; 0x26
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <main+0x668>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	6f a1       	ldd	r22, Y+39	; 0x27
    114e:	78 a5       	ldd	r23, Y+40	; 0x28
    1150:	89 a5       	ldd	r24, Y+41	; 0x29
    1152:	9a a5       	ldd	r25, Y+42	; 0x2a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	9a a3       	std	Y+34, r25	; 0x22
    1172:	89 a3       	std	Y+33, r24	; 0x21
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <main+0x65e>
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	98 a3       	std	Y+32, r25	; 0x20
    117c:	8f 8f       	std	Y+31, r24	; 0x1f
    117e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1180:	98 a1       	ldd	r25, Y+32	; 0x20
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <main+0x64c>
    1186:	98 a3       	std	Y+32, r25	; 0x20
    1188:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	89 a1       	ldd	r24, Y+33	; 0x21
    118c:	9a a1       	ldd	r25, Y+34	; 0x22
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	9a a3       	std	Y+34, r25	; 0x22
    1192:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	89 a1       	ldd	r24, Y+33	; 0x21
    1196:	9a a1       	ldd	r25, Y+34	; 0x22
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <main+0x640>
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <main+0x690>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	6b a1       	ldd	r22, Y+35	; 0x23
    11a0:	7c a1       	ldd	r23, Y+36	; 0x24
    11a2:	8d a1       	ldd	r24, Y+37	; 0x25
    11a4:	9e a1       	ldd	r25, Y+38	; 0x26
    11a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	9a a3       	std	Y+34, r25	; 0x22
    11b0:	89 a3       	std	Y+33, r24	; 0x21
    11b2:	89 a1       	ldd	r24, Y+33	; 0x21
    11b4:	9a a1       	ldd	r25, Y+34	; 0x22
    11b6:	9e 8f       	std	Y+30, r25	; 0x1e
    11b8:	8d 8f       	std	Y+29, r24	; 0x1d
    11ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <main+0x688>
    11c2:	9e 8f       	std	Y+30, r25	; 0x1e
    11c4:	8d 8f       	std	Y+29, r24	; 0x1d
			}

			LED_voidOff(traffic_leds[red]);
			LED_voidOn(traffic_leds[yellow]);
			_delay_ms(1000);
			for(i=3;i>=0;i--)
    11c6:	de 01       	movw	r26, r28
    11c8:	ab 5a       	subi	r26, 0xAB	; 171
    11ca:	bf 4f       	sbci	r27, 0xFF	; 255
    11cc:	fe 01       	movw	r30, r28
    11ce:	eb 5a       	subi	r30, 0xAB	; 171
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	81 50       	subi	r24, 0x01	; 1
    11d6:	8c 93       	st	X, r24
    11d8:	fe 01       	movw	r30, r28
    11da:	eb 5a       	subi	r30, 0xAB	; 171
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	80 81       	ld	r24, Z
    11e0:	88 23       	and	r24, r24
    11e2:	0c f0       	brlt	.+2      	; 0x11e6 <main+0x6b0>
    11e4:	6e cf       	rjmp	.-292    	; 0x10c2 <main+0x58c>
						{
							SSD_voidSendNumber(SSD1,i);
							_delay_ms(1000);
						}
			LED_voidOff(traffic_leds[yellow]);
    11e6:	fe 01       	movw	r30, r28
    11e8:	ea 5a       	subi	r30, 0xAA	; 170
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	63 81       	ldd	r22, Z+3	; 0x03
    11ee:	74 81       	ldd	r23, Z+4	; 0x04
    11f0:	85 81       	ldd	r24, Z+5	; 0x05
    11f2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LED_voidOff>
			LED_voidOn(traffic_leds[green]);
    11f6:	fe 01       	movw	r30, r28
    11f8:	ea 5a       	subi	r30, 0xAA	; 170
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	66 81       	ldd	r22, Z+6	; 0x06
    11fe:	77 81       	ldd	r23, Z+7	; 0x07
    1200:	80 85       	ldd	r24, Z+8	; 0x08
    1202:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <LED_voidOn>
			SSD_voidSendNumber(SSD2,1);
    1206:	fe 01       	movw	r30, r28
    1208:	ed 59       	subi	r30, 0x9D	; 157
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	a2 81       	ldd	r26, Z+2	; 0x02
    1212:	b3 81       	ldd	r27, Z+3	; 0x03
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	41 e0       	ldi	r20, 0x01	; 1
    121a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	aa e7       	ldi	r26, 0x7A	; 122
    1224:	b4 e4       	ldi	r27, 0x44	; 68
    1226:	89 8f       	std	Y+25, r24	; 0x19
    1228:	9a 8f       	std	Y+26, r25	; 0x1a
    122a:	ab 8f       	std	Y+27, r26	; 0x1b
    122c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	69 8d       	ldd	r22, Y+25	; 0x19
    1230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8d 8b       	std	Y+21, r24	; 0x15
    1248:	9e 8b       	std	Y+22, r25	; 0x16
    124a:	af 8b       	std	Y+23, r26	; 0x17
    124c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    124e:	6d 89       	ldd	r22, Y+21	; 0x15
    1250:	7e 89       	ldd	r23, Y+22	; 0x16
    1252:	8f 89       	ldd	r24, Y+23	; 0x17
    1254:	98 8d       	ldd	r25, Y+24	; 0x18
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <main+0x73a>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 8b       	std	Y+20, r25	; 0x14
    126c:	8b 8b       	std	Y+19, r24	; 0x13
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <main+0x7b8>
	else if (__tmp > 65535)
    1270:	6d 89       	ldd	r22, Y+21	; 0x15
    1272:	7e 89       	ldd	r23, Y+22	; 0x16
    1274:	8f 89       	ldd	r24, Y+23	; 0x17
    1276:	98 8d       	ldd	r25, Y+24	; 0x18
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <main+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	69 8d       	ldd	r22, Y+25	; 0x19
    128a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    128e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9c 8b       	std	Y+20, r25	; 0x14
    12ae:	8b 8b       	std	Y+19, r24	; 0x13
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <main+0x79a>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9a 8b       	std	Y+18, r25	; 0x12
    12b8:	89 8b       	std	Y+17, r24	; 0x11
    12ba:	89 89       	ldd	r24, Y+17	; 0x11
    12bc:	9a 89       	ldd	r25, Y+18	; 0x12
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <main+0x788>
    12c2:	9a 8b       	std	Y+18, r25	; 0x12
    12c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8b 89       	ldd	r24, Y+19	; 0x13
    12c8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 8b       	std	Y+20, r25	; 0x14
    12ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	9c 89       	ldd	r25, Y+20	; 0x14
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <main+0x77c>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <main+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6d 89       	ldd	r22, Y+21	; 0x15
    12dc:	7e 89       	ldd	r23, Y+22	; 0x16
    12de:	8f 89       	ldd	r24, Y+23	; 0x17
    12e0:	98 8d       	ldd	r25, Y+24	; 0x18
    12e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9c 8b       	std	Y+20, r25	; 0x14
    12ec:	8b 8b       	std	Y+19, r24	; 0x13
    12ee:	8b 89       	ldd	r24, Y+19	; 0x13
    12f0:	9c 89       	ldd	r25, Y+20	; 0x14
    12f2:	98 8b       	std	Y+16, r25	; 0x10
    12f4:	8f 87       	std	Y+15, r24	; 0x0f
    12f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f8:	98 89       	ldd	r25, Y+16	; 0x10
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <main+0x7c4>
    12fe:	98 8b       	std	Y+16, r25	; 0x10
    1300:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			SSD_voidSendNumber(SSD2,0);
    1302:	fe 01       	movw	r30, r28
    1304:	ed 59       	subi	r30, 0x9D	; 157
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	a2 81       	ldd	r26, Z+2	; 0x02
    130e:	b3 81       	ldd	r27, Z+3	; 0x03
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>

			for(i=9;i>=0;i--)
    131a:	fe 01       	movw	r30, r28
    131c:	eb 5a       	subi	r30, 0xAB	; 171
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	89 e0       	ldi	r24, 0x09	; 9
    1322:	80 83       	st	Z, r24
    1324:	8b c0       	rjmp	.+278    	; 0x143c <main+0x906>
					{
						SSD_voidSendNumber(SSD1,i);
    1326:	fe 01       	movw	r30, r28
    1328:	eb 5a       	subi	r30, 0xAB	; 171
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	20 81       	ld	r18, Z
    132e:	fe 01       	movw	r30, r28
    1330:	e1 5a       	subi	r30, 0xA1	; 161
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	a2 81       	ldd	r26, Z+2	; 0x02
    133a:	b3 81       	ldd	r27, Z+3	; 0x03
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	42 2f       	mov	r20, r18
    1342:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <SSD_voidSendNumber>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	aa e7       	ldi	r26, 0x7A	; 122
    134c:	b4 e4       	ldi	r27, 0x44	; 68
    134e:	8b 87       	std	Y+11, r24	; 0x0b
    1350:	9c 87       	std	Y+12, r25	; 0x0c
    1352:	ad 87       	std	Y+13, r26	; 0x0d
    1354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a ef       	ldi	r20, 0xFA	; 250
    1364:	54 e4       	ldi	r21, 0x44	; 68
    1366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8f 83       	std	Y+7, r24	; 0x07
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	a9 87       	std	Y+9, r26	; 0x09
    1374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	2c f4       	brge	.+10     	; 0x1398 <main+0x862>
		__ticks = 1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <main+0x8e0>
	else if (__tmp > 65535)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	4c f5       	brge	.+82     	; 0x1402 <main+0x8cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <main+0x8c2>
    13da:	88 ec       	ldi	r24, 0xC8	; 200
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <main+0x8b0>
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <main+0x8a4>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <main+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <main+0x8ec>
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
			LED_voidOn(traffic_leds[green]);
			SSD_voidSendNumber(SSD2,1);
			_delay_ms(1000);
			SSD_voidSendNumber(SSD2,0);

			for(i=9;i>=0;i--)
    142a:	de 01       	movw	r26, r28
    142c:	ab 5a       	subi	r26, 0xAB	; 171
    142e:	bf 4f       	sbci	r27, 0xFF	; 255
    1430:	fe 01       	movw	r30, r28
    1432:	eb 5a       	subi	r30, 0xAB	; 171
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	80 81       	ld	r24, Z
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	8c 93       	st	X, r24
    143c:	fe 01       	movw	r30, r28
    143e:	eb 5a       	subi	r30, 0xAB	; 171
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	80 81       	ld	r24, Z
    1444:	88 23       	and	r24, r24
    1446:	0c f0       	brlt	.+2      	; 0x144a <main+0x914>
    1448:	6e cf       	rjmp	.-292    	; 0x1326 <main+0x7f0>
					{
						SSD_voidSendNumber(SSD1,i);
						_delay_ms(1000);
					}
					LED_voidOff(traffic_leds[green]);
    144a:	fe 01       	movw	r30, r28
    144c:	ea 5a       	subi	r30, 0xAA	; 170
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	66 81       	ldd	r22, Z+6	; 0x06
    1452:	77 81       	ldd	r23, Z+7	; 0x07
    1454:	80 85       	ldd	r24, Z+8	; 0x08
    1456:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <LED_voidOff>
    145a:	0b cc       	rjmp	.-2026   	; 0xc72 <main+0x13c>

0000145c <DIO_enumSetPortDirection>:
#include "DIO_private.h"
#include "DIO_interface.h"


 DIO_ErroStatus DIO_enumSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
 {
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_enumSetPortDirection+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_enumSetPortDirection+0x8>
    1464:	0f 92       	push	r0
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Port)
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3d 83       	std	Y+5, r19	; 0x05
    147a:	2c 83       	std	Y+4, r18	; 0x04
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	91 05       	cpc	r25, r1
    1484:	39 f1       	breq	.+78     	; 0x14d4 <DIO_enumSetPortDirection+0x78>
    1486:	2c 81       	ldd	r18, Y+4	; 0x04
    1488:	3d 81       	ldd	r19, Y+5	; 0x05
    148a:	23 30       	cpi	r18, 0x03	; 3
    148c:	31 05       	cpc	r19, r1
    148e:	34 f4       	brge	.+12     	; 0x149c <DIO_enumSetPortDirection+0x40>
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	91 05       	cpc	r25, r1
    1498:	61 f0       	breq	.+24     	; 0x14b2 <DIO_enumSetPortDirection+0x56>
    149a:	4f c0       	rjmp	.+158    	; 0x153a <DIO_enumSetPortDirection+0xde>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	23 30       	cpi	r18, 0x03	; 3
    14a2:	31 05       	cpc	r19, r1
    14a4:	41 f1       	breq	.+80     	; 0x14f6 <DIO_enumSetPortDirection+0x9a>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	91 05       	cpc	r25, r1
    14ae:	a1 f1       	breq	.+104    	; 0x1518 <DIO_enumSetPortDirection+0xbc>
    14b0:	44 c0       	rjmp	.+136    	; 0x153a <DIO_enumSetPortDirection+0xde>
    {

        case DIO_PORTA : 
                        if(Copy_u8Direction == DIO_OUTPUT)
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <DIO_enumSetPortDirection+0x66>
                           {
                                DDRA_REG =0xff; 
    14b8:	ea e3       	ldi	r30, 0x3A	; 58
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8f ef       	ldi	r24, 0xFF	; 255
    14be:	80 83       	st	Z, r24
    14c0:	3d c0       	rjmp	.+122    	; 0x153c <DIO_enumSetPortDirection+0xe0>
                           } 
                        else if(Copy_u8Direction == DIO_INPUT)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	88 23       	and	r24, r24
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <DIO_enumSetPortDirection+0x74>
                          {  
                                DDRA_REG=0x00;
    14c8:	ea e3       	ldi	r30, 0x3A	; 58
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	10 82       	st	Z, r1
    14ce:	36 c0       	rjmp	.+108    	; 0x153c <DIO_enumSetPortDirection+0xe0>
                          }
                          else
                          {
                            /**/
                        	  LOC_enumState=DIO_NOK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	34 c0       	rjmp	.+104    	; 0x153c <DIO_enumSetPortDirection+0xe0>
                          }
                    break;
        case DIO_PORTB :
                        if(Copy_u8Direction == DIO_OUTPUT)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <DIO_enumSetPortDirection+0x88>
                            {
                                DDRB_REG =0xff; 
    14da:	e7 e3       	ldi	r30, 0x37	; 55
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	80 83       	st	Z, r24
    14e2:	2c c0       	rjmp	.+88     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                        else if(Copy_u8Direction == DIO_INPUT)
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 23       	and	r24, r24
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <DIO_enumSetPortDirection+0x96>
                            {
                                DDRB_REG=0x00;
    14ea:	e7 e3       	ldi	r30, 0x37	; 55
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	10 82       	st	Z, r1
    14f0:	25 c0       	rjmp	.+74     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
    14f2:	19 82       	std	Y+1, r1	; 0x01
    14f4:	23 c0       	rjmp	.+70     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                    break;
        case DIO_PORTC : 
                        if(Copy_u8Direction == DIO_OUTPUT)
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	29 f4       	brne	.+10     	; 0x1506 <DIO_enumSetPortDirection+0xaa>
                            {
                                DDRC_REG =0xff; 
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 83       	st	Z, r24
    1504:	1b c0       	rjmp	.+54     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                        else if (Copy_u8Direction == DIO_INPUT)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	88 23       	and	r24, r24
    150a:	21 f4       	brne	.+8      	; 0x1514 <DIO_enumSetPortDirection+0xb8>
                            {
                                DDRC_REG=0x00;
    150c:	e4 e3       	ldi	r30, 0x34	; 52
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	10 82       	st	Z, r1
    1512:	14 c0       	rjmp	.+40     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
    1514:	19 82       	std	Y+1, r1	; 0x01
    1516:	12 c0       	rjmp	.+36     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                    break;
        case DIO_PORTD : 
                        if(Copy_u8Direction == DIO_OUTPUT)
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	29 f4       	brne	.+10     	; 0x1528 <DIO_enumSetPortDirection+0xcc>
                            {
                                DDRD_REG =0xff; 
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	80 83       	st	Z, r24
    1526:	0a c0       	rjmp	.+20     	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                        else if (Copy_u8Direction==DIO_INPUT)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	88 23       	and	r24, r24
    152c:	21 f4       	brne	.+8      	; 0x1536 <DIO_enumSetPortDirection+0xda>
                            {
                                DDRD_REG=0x00;
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	10 82       	st	Z, r1
    1534:	03 c0       	rjmp	.+6      	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
    1536:	19 82       	std	Y+1, r1	; 0x01
    1538:	01 c0       	rjmp	.+2      	; 0x153c <DIO_enumSetPortDirection+0xe0>
                            }
                    break;

        default:
      	  LOC_enumState=DIO_NOK;
    153a:	19 82       	std	Y+1, r1	; 0x01

    }
return    LOC_enumState;
    153c:	89 81       	ldd	r24, Y+1	; 0x01
 }
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <DIO_enumSetPortValue>:
 DIO_ErroStatus DIO_enumSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value    )
 {
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_enumSetPortValue+0x6>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_enumSetPortValue+0x8>
    1556:	0f 92       	push	r0
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	8a 83       	std	Y+2, r24	; 0x02
    155e:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01

     switch(Copy_u8Port)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3d 83       	std	Y+5, r19	; 0x05
    156c:	2c 83       	std	Y+4, r18	; 0x04
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	91 05       	cpc	r25, r1
    1576:	d9 f0       	breq	.+54     	; 0x15ae <DIO_enumSetPortValue+0x60>
    1578:	2c 81       	ldd	r18, Y+4	; 0x04
    157a:	3d 81       	ldd	r19, Y+5	; 0x05
    157c:	23 30       	cpi	r18, 0x03	; 3
    157e:	31 05       	cpc	r19, r1
    1580:	34 f4       	brge	.+12     	; 0x158e <DIO_enumSetPortValue+0x40>
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	9d 81       	ldd	r25, Y+5	; 0x05
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	91 05       	cpc	r25, r1
    158a:	61 f0       	breq	.+24     	; 0x15a4 <DIO_enumSetPortValue+0x56>
    158c:	1f c0       	rjmp	.+62     	; 0x15cc <DIO_enumSetPortValue+0x7e>
    158e:	2c 81       	ldd	r18, Y+4	; 0x04
    1590:	3d 81       	ldd	r19, Y+5	; 0x05
    1592:	23 30       	cpi	r18, 0x03	; 3
    1594:	31 05       	cpc	r19, r1
    1596:	81 f0       	breq	.+32     	; 0x15b8 <DIO_enumSetPortValue+0x6a>
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	91 05       	cpc	r25, r1
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <DIO_enumSetPortValue+0x74>
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <DIO_enumSetPortValue+0x7e>
    {
        case DIO_PORTA : 
                        if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
                           {
                                PORTA_REG =Copy_u8Value;
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	80 83       	st	Z, r24
    15ac:	10 c0       	rjmp	.+32     	; 0x15ce <DIO_enumSetPortValue+0x80>
                          }
                    break;
        case DIO_PORTB :
        	  if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
        	                           {
        	                                PORTB_REG =Copy_u8Value;
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	80 83       	st	Z, r24
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <DIO_enumSetPortValue+0x80>
        	                          }
        	                    break;
        case DIO_PORTC : 
        	  if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
        	                           {
        	                                PORTC_REG =Copy_u8Value;
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	80 83       	st	Z, r24
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <DIO_enumSetPortValue+0x80>
        	                          }
        	                    break;
        case DIO_PORTD : 
        	  if( Copy_u8Value >=0 && Copy_u8Value <= 0xff)
        	                           {
        	                                PORTD_REG =Copy_u8Value;
    15c2:	e2 e3       	ldi	r30, 0x32	; 50
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	80 83       	st	Z, r24
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <DIO_enumSetPortValue+0x80>
        	                            /**/
        	                         	  LOC_enumState=DIO_NOK;
        	                          }
        	                    break;
        default:
       	  LOC_enumState=DIO_NOK;
    15cc:	19 82       	std	Y+1, r1	; 0x01

     }
 return    LOC_enumState;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
 }
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_enumSetPINDirection>:

 DIO_ErroStatus DIO_enumSetPINDirection(u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 Copy_u8Direction)
 {
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_enumSetPINDirection+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_enumSetPINDirection+0x8>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <DIO_enumSetPINDirection+0xa>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	6b 83       	std	Y+3, r22	; 0x03
    15f2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErroStatus LOC_enumState = DIO_OK;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 30       	cpi	r24, 0x08	; 8
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <DIO_enumSetPINDirection+0x20>
    15fe:	e9 c0       	rjmp	.+466    	; 0x17d2 <DIO_enumSetPINDirection+0x1f2>
	{
		 switch(Copy_u8Port)
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	3e 83       	std	Y+6, r19	; 0x06
    1608:	2d 83       	std	Y+5, r18	; 0x05
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	82 30       	cpi	r24, 0x02	; 2
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <DIO_enumSetPINDirection+0x36>
    1614:	49 c0       	rjmp	.+146    	; 0x16a8 <DIO_enumSetPINDirection+0xc8>
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	3e 81       	ldd	r19, Y+6	; 0x06
    161a:	23 30       	cpi	r18, 0x03	; 3
    161c:	31 05       	cpc	r19, r1
    161e:	34 f4       	brge	.+12     	; 0x162c <DIO_enumSetPINDirection+0x4c>
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	71 f0       	breq	.+28     	; 0x1646 <DIO_enumSetPINDirection+0x66>
    162a:	d1 c0       	rjmp	.+418    	; 0x17ce <DIO_enumSetPINDirection+0x1ee>
    162c:	2d 81       	ldd	r18, Y+5	; 0x05
    162e:	3e 81       	ldd	r19, Y+6	; 0x06
    1630:	23 30       	cpi	r18, 0x03	; 3
    1632:	31 05       	cpc	r19, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <DIO_enumSetPINDirection+0x58>
    1636:	69 c0       	rjmp	.+210    	; 0x170a <DIO_enumSetPINDirection+0x12a>
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	91 05       	cpc	r25, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <DIO_enumSetPINDirection+0x64>
    1642:	94 c0       	rjmp	.+296    	; 0x176c <DIO_enumSetPINDirection+0x18c>
    1644:	c4 c0       	rjmp	.+392    	; 0x17ce <DIO_enumSetPINDirection+0x1ee>
		    {

		        case DIO_PORTA :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <DIO_enumSetPINDirection+0x94>
		                           {
		                                SET_BIT(DDRA_REG,Copy_u8PINNumber);
    164c:	aa e3       	ldi	r26, 0x3A	; 58
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_enumSetPINDirection+0x8a>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_enumSetPINDirection+0x86>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	b0 c0       	rjmp	.+352    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                           }
		                        else if(Copy_u8Direction == DIO_INPUT)
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	88 23       	and	r24, r24
    1678:	a9 f4       	brne	.+42     	; 0x16a4 <DIO_enumSetPINDirection+0xc4>
		                          {
		                                CLR_BIT(DDRA_REG,Copy_u8PINNumber);
    167a:	aa e3       	ldi	r26, 0x3A	; 58
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ea e3       	ldi	r30, 0x3A	; 58
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_enumSetPINDirection+0xb8>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_enumSetPINDirection+0xb4>
    169c:	80 95       	com	r24
    169e:	84 23       	and	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	98 c0       	rjmp	.+304    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                          }
		                          else
		                          {
		                            /**/
		                        	  LOC_enumState=DIO_NOK;
    16a4:	19 82       	std	Y+1, r1	; 0x01
    16a6:	96 c0       	rjmp	.+300    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                          }
		                    break;
		        case DIO_PORTB :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	a1 f4       	brne	.+40     	; 0x16d6 <DIO_enumSetPINDirection+0xf6>
		                            {
		                                SET_BIT(DDRB_REG,Copy_u8PINNumber);
    16ae:	a7 e3       	ldi	r26, 0x37	; 55
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e7 e3       	ldi	r30, 0x37	; 55
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_enumSetPINDirection+0xec>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_enumSetPINDirection+0xe8>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	7f c0       	rjmp	.+254    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if(Copy_u8Direction == DIO_INPUT)
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	88 23       	and	r24, r24
    16da:	a9 f4       	brne	.+42     	; 0x1706 <DIO_enumSetPINDirection+0x126>
		                            {
	                                    CLR_BIT(DDRB_REG,Copy_u8PINNumber);
    16dc:	a7 e3       	ldi	r26, 0x37	; 55
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e7 e3       	ldi	r30, 0x37	; 55
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_enumSetPINDirection+0x11a>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_enumSetPINDirection+0x116>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	67 c0       	rjmp	.+206    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	65 c0       	rjmp	.+202    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;
		        case DIO_PORTC :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	a1 f4       	brne	.+40     	; 0x1738 <DIO_enumSetPINDirection+0x158>
		                            {
	                                SET_BIT(DDRC_REG,Copy_u8PINNumber);
    1710:	a4 e3       	ldi	r26, 0x34	; 52
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e4 e3       	ldi	r30, 0x34	; 52
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_enumSetPINDirection+0x14e>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <DIO_enumSetPINDirection+0x14a>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	4e c0       	rjmp	.+156    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if (Copy_u8Direction == DIO_INPUT)
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	88 23       	and	r24, r24
    173c:	a9 f4       	brne	.+42     	; 0x1768 <DIO_enumSetPINDirection+0x188>
		                            {
	                                CLR_BIT(DDRC_REG,Copy_u8PINNumber);
    173e:	a4 e3       	ldi	r26, 0x34	; 52
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e4 e3       	ldi	r30, 0x34	; 52
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_enumSetPINDirection+0x17c>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_enumSetPINDirection+0x178>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	36 c0       	rjmp	.+108    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	34 c0       	rjmp	.+104    	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;
		        case DIO_PORTD :
		                        if(Copy_u8Direction == DIO_OUTPUT)
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	a1 f4       	brne	.+40     	; 0x179a <DIO_enumSetPINDirection+0x1ba>
		                            {
	                                SET_BIT(DDRD_REG,Copy_u8PINNumber);
    1772:	a1 e3       	ldi	r26, 0x31	; 49
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e1 e3       	ldi	r30, 0x31	; 49
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_enumSetPINDirection+0x1b0>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_enumSetPINDirection+0x1ac>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	1d c0       	rjmp	.+58     	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if (Copy_u8Direction==DIO_INPUT)
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	88 23       	and	r24, r24
    179e:	a9 f4       	brne	.+42     	; 0x17ca <DIO_enumSetPINDirection+0x1ea>
		                            {
	                                CLR_BIT(DDRD_REG,Copy_u8PINNumber);
    17a0:	a1 e3       	ldi	r26, 0x31	; 49
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e1 e3       	ldi	r30, 0x31	; 49
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	48 2f       	mov	r20, r24
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 2e       	mov	r0, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_enumSetPINDirection+0x1de>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	0a 94       	dec	r0
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_enumSetPINDirection+0x1da>
    17c2:	80 95       	com	r24
    17c4:	84 23       	and	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
    17ca:	19 82       	std	Y+1, r1	; 0x01
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;

		        default:
		      	  LOC_enumState=DIO_NOK;
    17ce:	19 82       	std	Y+1, r1	; 0x01
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <DIO_enumSetPINDirection+0x1f4>

	}
	}
	else
	{
		LOC_enumState=DIO_NOK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
	}



	return LOC_enumState;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
 }
    17d6:	26 96       	adiw	r28, 0x06	; 6
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <DIO_enumSetPINValue>:
 DIO_ErroStatus DIO_enumSetPINValue    (u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 Copy_u8Value    )
 {
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <DIO_enumSetPINValue+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <DIO_enumSetPINValue+0x8>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <DIO_enumSetPINValue+0xa>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    17f8:	6b 83       	std	Y+3, r22	; 0x03
    17fa:	4c 83       	std	Y+4, r20	; 0x04
	 DIO_ErroStatus LOC_enumState = DIO_OK;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
	 	if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	88 30       	cpi	r24, 0x08	; 8
    1804:	08 f0       	brcs	.+2      	; 0x1808 <DIO_enumSetPINValue+0x20>
    1806:	e9 c0       	rjmp	.+466    	; 0x19da <DIO_enumSetPINValue+0x1f2>
	 	{
	 		 switch(Copy_u8Port)
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	3e 83       	std	Y+6, r19	; 0x06
    1810:	2d 83       	std	Y+5, r18	; 0x05
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	91 05       	cpc	r25, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <DIO_enumSetPINValue+0x36>
    181c:	49 c0       	rjmp	.+146    	; 0x18b0 <DIO_enumSetPINValue+0xc8>
    181e:	2d 81       	ldd	r18, Y+5	; 0x05
    1820:	3e 81       	ldd	r19, Y+6	; 0x06
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <DIO_enumSetPINValue+0x4c>
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	71 f0       	breq	.+28     	; 0x184e <DIO_enumSetPINValue+0x66>
    1832:	d1 c0       	rjmp	.+418    	; 0x19d6 <DIO_enumSetPINValue+0x1ee>
    1834:	2d 81       	ldd	r18, Y+5	; 0x05
    1836:	3e 81       	ldd	r19, Y+6	; 0x06
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	31 05       	cpc	r19, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <DIO_enumSetPINValue+0x58>
    183e:	69 c0       	rjmp	.+210    	; 0x1912 <DIO_enumSetPINValue+0x12a>
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <DIO_enumSetPINValue+0x64>
    184a:	94 c0       	rjmp	.+296    	; 0x1974 <DIO_enumSetPINValue+0x18c>
    184c:	c4 c0       	rjmp	.+392    	; 0x19d6 <DIO_enumSetPINValue+0x1ee>
	 		    {

	 		        case DIO_PORTA :
	 		                        if(Copy_u8Value == DIO_HIGH)
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	a1 f4       	brne	.+40     	; 0x187c <DIO_enumSetPINValue+0x94>
	 		                           {
	 		                                SET_BIT(PORTA_REG,Copy_u8PINNumber);
    1854:	ab e3       	ldi	r26, 0x3B	; 59
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	eb e3       	ldi	r30, 0x3B	; 59
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_enumSetPINValue+0x8a>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_enumSetPINValue+0x86>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	b0 c0       	rjmp	.+352    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                           }
	 		                        else if(Copy_u8Value == DIO_LOW)
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	88 23       	and	r24, r24
    1880:	a9 f4       	brne	.+42     	; 0x18ac <DIO_enumSetPINValue+0xc4>
	 		                          {
	 		                                CLR_BIT(PORTA_REG,Copy_u8PINNumber);
    1882:	ab e3       	ldi	r26, 0x3B	; 59
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	eb e3       	ldi	r30, 0x3B	; 59
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <DIO_enumSetPINValue+0xb8>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <DIO_enumSetPINValue+0xb4>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	98 c0       	rjmp	.+304    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                          }
	 		                          else
	 		                          {
	 		                            /**/
	 		                        	  LOC_enumState=DIO_NOK;
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	96 c0       	rjmp	.+300    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                          }
	 		                    break;
	 		        case DIO_PORTB :
	 		                        if(Copy_u8Value == DIO_HIGH)
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	a1 f4       	brne	.+40     	; 0x18de <DIO_enumSetPINValue+0xf6>
	 		                            {
	 		                                SET_BIT(PORTB_REG,Copy_u8PINNumber);
    18b6:	a8 e3       	ldi	r26, 0x38	; 56
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e8 e3       	ldi	r30, 0x38	; 56
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	48 2f       	mov	r20, r24
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 2e       	mov	r0, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_enumSetPINValue+0xec>
    18d0:	88 0f       	add	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	0a 94       	dec	r0
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_enumSetPINValue+0xe8>
    18d8:	84 2b       	or	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	7f c0       	rjmp	.+254    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                        else if(Copy_u8Value == DIO_LOW)
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	88 23       	and	r24, r24
    18e2:	a9 f4       	brne	.+42     	; 0x190e <DIO_enumSetPINValue+0x126>
	 		                            {
	 	                                    CLR_BIT(PORTB_REG,Copy_u8PINNumber);
    18e4:	a8 e3       	ldi	r26, 0x38	; 56
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e8 e3       	ldi	r30, 0x38	; 56
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	48 2f       	mov	r20, r24
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 2e       	mov	r0, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <DIO_enumSetPINValue+0x11a>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	0a 94       	dec	r0
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <DIO_enumSetPINValue+0x116>
    1906:	80 95       	com	r24
    1908:	84 23       	and	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	67 c0       	rjmp	.+206    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	65 c0       	rjmp	.+202    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                    break;
	 		        case DIO_PORTC :
	 		                        if(Copy_u8Value == DIO_HIGH)
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	a1 f4       	brne	.+40     	; 0x1940 <DIO_enumSetPINValue+0x158>
	 		                            {
	 	                                SET_BIT(PORTC_REG,Copy_u8PINNumber);
    1918:	a5 e3       	ldi	r26, 0x35	; 53
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e3       	ldi	r30, 0x35	; 53
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_enumSetPINValue+0x14e>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_enumSetPINValue+0x14a>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	4e c0       	rjmp	.+156    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                        else if (Copy_u8Value==DIO_LOW)
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	88 23       	and	r24, r24
    1944:	a9 f4       	brne	.+42     	; 0x1970 <DIO_enumSetPINValue+0x188>
	 		                            {
	 	                                CLR_BIT(PORTC_REG,Copy_u8PINNumber);
    1946:	a5 e3       	ldi	r26, 0x35	; 53
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e5 e3       	ldi	r30, 0x35	; 53
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_enumSetPINValue+0x17c>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <DIO_enumSetPINValue+0x178>
    1968:	80 95       	com	r24
    196a:	84 23       	and	r24, r20
    196c:	8c 93       	st	X, r24
    196e:	36 c0       	rjmp	.+108    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
    1970:	19 82       	std	Y+1, r1	; 0x01
    1972:	34 c0       	rjmp	.+104    	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                    break;
	 		        case DIO_PORTD :
	 		                        if(Copy_u8Value == DIO_HIGH)
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	a1 f4       	brne	.+40     	; 0x19a2 <DIO_enumSetPINValue+0x1ba>
	 		                            {
	 	                                SET_BIT(PORTD_REG,Copy_u8PINNumber);
    197a:	a2 e3       	ldi	r26, 0x32	; 50
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e2 e3       	ldi	r30, 0x32	; 50
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_enumSetPINValue+0x1b0>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_enumSetPINValue+0x1ac>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	1d c0       	rjmp	.+58     	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                        else if (Copy_u8Value==DIO_LOW)
    19a2:	8c 81       	ldd	r24, Y+4	; 0x04
    19a4:	88 23       	and	r24, r24
    19a6:	a9 f4       	brne	.+42     	; 0x19d2 <DIO_enumSetPINValue+0x1ea>
	 		                            {
	 	                                CLR_BIT(PORTD_REG,Copy_u8PINNumber);
    19a8:	a2 e3       	ldi	r26, 0x32	; 50
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e2 e3       	ldi	r30, 0x32	; 50
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <DIO_enumSetPINValue+0x1de>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <DIO_enumSetPINValue+0x1da>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	05 c0       	rjmp	.+10     	; 0x19dc <DIO_enumSetPINValue+0x1f4>

	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
    19d2:	19 82       	std	Y+1, r1	; 0x01
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <DIO_enumSetPINValue+0x1f4>
	 		                            }
	 		                    break;

	 		        default:
	 		      	  LOC_enumState=DIO_NOK;
    19d6:	19 82       	std	Y+1, r1	; 0x01
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <DIO_enumSetPINValue+0x1f4>

	 	}
	 	}
	 	else
	 	{
	 		LOC_enumState=DIO_NOK;
    19da:	19 82       	std	Y+1, r1	; 0x01
	 	}



	 	return LOC_enumState;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
	  }
    19de:	26 96       	adiw	r28, 0x06	; 6
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <DIO_enumGetPortValue>:

 DIO_ErroStatus DIO_enumGetPortValue    (u8 Copy_u8Port, u8 *Copy_ptrData   )
 {
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <DIO_enumGetPortValue+0x6>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_enumGetPortValue+0x8>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_enumGetPortValue+0xa>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	7c 83       	std	Y+4, r23	; 0x04
    1a02:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
	 switch (Copy_u8Port) {
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	3e 83       	std	Y+6, r19	; 0x06
    1a10:	2d 83       	std	Y+5, r18	; 0x05
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	91 05       	cpc	r25, r1
    1a1a:	e9 f0       	breq	.+58     	; 0x1a56 <DIO_enumGetPortValue+0x66>
    1a1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a20:	23 30       	cpi	r18, 0x03	; 3
    1a22:	31 05       	cpc	r19, r1
    1a24:	34 f4       	brge	.+12     	; 0x1a32 <DIO_enumGetPortValue+0x42>
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <DIO_enumGetPortValue+0x58>
    1a30:	27 c0       	rjmp	.+78     	; 0x1a80 <DIO_enumGetPortValue+0x90>
    1a32:	2d 81       	ldd	r18, Y+5	; 0x05
    1a34:	3e 81       	ldd	r19, Y+6	; 0x06
    1a36:	23 30       	cpi	r18, 0x03	; 3
    1a38:	31 05       	cpc	r19, r1
    1a3a:	a1 f0       	breq	.+40     	; 0x1a64 <DIO_enumGetPortValue+0x74>
    1a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	91 05       	cpc	r25, r1
    1a44:	b1 f0       	breq	.+44     	; 0x1a72 <DIO_enumGetPortValue+0x82>
    1a46:	1c c0       	rjmp	.+56     	; 0x1a80 <DIO_enumGetPortValue+0x90>
		case DIO_PORTA: *Copy_ptrData = PINA_REG;
    1a48:	e9 e3       	ldi	r30, 0x39	; 57
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	80 83       	st	Z, r24
    1a54:	16 c0       	rjmp	.+44     	; 0x1a82 <DIO_enumGetPortValue+0x92>
			break;
		case DIO_PORTB: *Copy_ptrData = PINB_REG;
    1a56:	e6 e3       	ldi	r30, 0x36	; 54
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a60:	80 83       	st	Z, r24
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <DIO_enumGetPortValue+0x92>
					break;
		case DIO_PORTC: *Copy_ptrData = PINC_REG;
    1a64:	e3 e3       	ldi	r30, 0x33	; 51
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a6e:	80 83       	st	Z, r24
    1a70:	08 c0       	rjmp	.+16     	; 0x1a82 <DIO_enumGetPortValue+0x92>
					break;
		case DIO_PORTD: *Copy_ptrData = PIND_REG;
    1a72:	e0 e3       	ldi	r30, 0x30	; 48
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7c:	80 83       	st	Z, r24
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <DIO_enumGetPortValue+0x92>
					break;
		default:
			LOC_enumState =DIO_NOK;
    1a80:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
	 return LOC_enumState;
    1a82:	89 81       	ldd	r24, Y+1	; 0x01


 }
    1a84:	26 96       	adiw	r28, 0x06	; 6
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <DIO_enumGetPINValue>:

 DIO_ErroStatus DIO_enumGetPINValue     (u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 *Copy_ptrData   )
 {
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	27 97       	sbiw	r28, 0x07	; 7
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	6b 83       	std	Y+3, r22	; 0x03
    1aae:	5d 83       	std	Y+5, r21	; 0x05
    1ab0:	4c 83       	std	Y+4, r20	; 0x04
	 DIO_ErroStatus LOC_enumState = DIO_OK;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 30       	cpi	r24, 0x08	; 8
    1aba:	08 f0       	brcs	.+2      	; 0x1abe <DIO_enumGetPINValue+0x28>
    1abc:	73 c0       	rjmp	.+230    	; 0x1ba4 <DIO_enumGetPINValue+0x10e>
		 	{
		 		 switch(Copy_u8Port)
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	3f 83       	std	Y+7, r19	; 0x07
    1ac6:	2e 83       	std	Y+6, r18	; 0x06
    1ac8:	4e 81       	ldd	r20, Y+6	; 0x06
    1aca:	5f 81       	ldd	r21, Y+7	; 0x07
    1acc:	42 30       	cpi	r20, 0x02	; 2
    1ace:	51 05       	cpc	r21, r1
    1ad0:	59 f1       	breq	.+86     	; 0x1b28 <DIO_enumGetPINValue+0x92>
    1ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad6:	83 30       	cpi	r24, 0x03	; 3
    1ad8:	91 05       	cpc	r25, r1
    1ada:	34 f4       	brge	.+12     	; 0x1ae8 <DIO_enumGetPINValue+0x52>
    1adc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ade:	3f 81       	ldd	r19, Y+7	; 0x07
    1ae0:	21 30       	cpi	r18, 0x01	; 1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	69 f0       	breq	.+26     	; 0x1b00 <DIO_enumGetPINValue+0x6a>
    1ae6:	5c c0       	rjmp	.+184    	; 0x1ba0 <DIO_enumGetPINValue+0x10a>
    1ae8:	4e 81       	ldd	r20, Y+6	; 0x06
    1aea:	5f 81       	ldd	r21, Y+7	; 0x07
    1aec:	43 30       	cpi	r20, 0x03	; 3
    1aee:	51 05       	cpc	r21, r1
    1af0:	79 f1       	breq	.+94     	; 0x1b50 <DIO_enumGetPINValue+0xba>
    1af2:	8e 81       	ldd	r24, Y+6	; 0x06
    1af4:	9f 81       	ldd	r25, Y+7	; 0x07
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <DIO_enumGetPINValue+0x68>
    1afc:	3d c0       	rjmp	.+122    	; 0x1b78 <DIO_enumGetPINValue+0xe2>
    1afe:	50 c0       	rjmp	.+160    	; 0x1ba0 <DIO_enumGetPINValue+0x10a>
		 		    {
		 		case DIO_PORTA: *Copy_ptrData = GET_BIT(PINA_REG,Copy_u8PINNumber);
    1b00:	e9 e3       	ldi	r30, 0x39	; 57
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a9 01       	movw	r20, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_enumGetPINValue+0x82>
    1b14:	55 95       	asr	r21
    1b16:	47 95       	ror	r20
    1b18:	8a 95       	dec	r24
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_enumGetPINValue+0x7e>
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	81 70       	andi	r24, 0x01	; 1
    1b20:	ec 81       	ldd	r30, Y+4	; 0x04
    1b22:	fd 81       	ldd	r31, Y+5	; 0x05
    1b24:	80 83       	st	Z, r24
    1b26:	3f c0       	rjmp	.+126    	; 0x1ba6 <DIO_enumGetPINValue+0x110>
		 			break;
		 		case DIO_PORTB: *Copy_ptrData = GET_BIT(PINB_REG,Copy_u8PINNumber);
    1b28:	e6 e3       	ldi	r30, 0x36	; 54
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a9 01       	movw	r20, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_enumGetPINValue+0xaa>
    1b3c:	55 95       	asr	r21
    1b3e:	47 95       	ror	r20
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <DIO_enumGetPINValue+0xa6>
    1b44:	ca 01       	movw	r24, r20
    1b46:	81 70       	andi	r24, 0x01	; 1
    1b48:	ec 81       	ldd	r30, Y+4	; 0x04
    1b4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b4c:	80 83       	st	Z, r24
    1b4e:	2b c0       	rjmp	.+86     	; 0x1ba6 <DIO_enumGetPINValue+0x110>
		 					break;
		 		case DIO_PORTC: *Copy_ptrData = GET_BIT(PINC_REG,Copy_u8PINNumber);
    1b50:	e3 e3       	ldi	r30, 0x33	; 51
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a9 01       	movw	r20, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_enumGetPINValue+0xd2>
    1b64:	55 95       	asr	r21
    1b66:	47 95       	ror	r20
    1b68:	8a 95       	dec	r24
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_enumGetPINValue+0xce>
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	81 70       	andi	r24, 0x01	; 1
    1b70:	ec 81       	ldd	r30, Y+4	; 0x04
    1b72:	fd 81       	ldd	r31, Y+5	; 0x05
    1b74:	80 83       	st	Z, r24
    1b76:	17 c0       	rjmp	.+46     	; 0x1ba6 <DIO_enumGetPINValue+0x110>
		 					break;
		 		case DIO_PORTD: *Copy_ptrData = GET_BIT(PIND_REG,Copy_u8PINNumber);
    1b78:	e0 e3       	ldi	r30, 0x30	; 48
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a9 01       	movw	r20, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_enumGetPINValue+0xfa>
    1b8c:	55 95       	asr	r21
    1b8e:	47 95       	ror	r20
    1b90:	8a 95       	dec	r24
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_enumGetPINValue+0xf6>
    1b94:	ca 01       	movw	r24, r20
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	ec 81       	ldd	r30, Y+4	; 0x04
    1b9a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b9c:	80 83       	st	Z, r24
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <DIO_enumGetPINValue+0x110>
		 					break;
		 		default:
		 			LOC_enumState =DIO_NOK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <DIO_enumGetPINValue+0x110>
		 			break;

		 		    }
		 	}
	 else {
		 LOC_enumState = DIO_NOK;
    1ba4:	19 82       	std	Y+1, r1	; 0x01
	}

	 return LOC_enumState;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1ba8:	27 96       	adiw	r28, 0x07	; 7
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <SW_voidInit>:
#include "SW_private.h"
#include "SW_config.h"
#include "../../MCAL/DIO/DIO_interface.h"

void SW_voidInit(SW_Type SW_Config)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <SW_voidInit+0x6>
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	69 83       	std	Y+1, r22	; 0x01
    1bc8:	7a 83       	std	Y+2, r23	; 0x02
    1bca:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enumSetPINDirection(SW_Config.Port, SW_Config.Pin, DIO_INPUT);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	69 2f       	mov	r22, r25
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_enumSetPINDirection>
    if (SW_Config.Pull_State == SW_PULL_UP)
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	39 f4       	brne	.+14     	; 0x1bec <SW_voidInit+0x32>
    {
        DIO_enumSetPINValue(SW_Config.Port, SW_Config.Pin, DIO_HIGH);
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	9a 81       	ldd	r25, Y+2	; 0x02
    1be2:	69 2f       	mov	r22, r25
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <SW_voidInit+0x3e>
    }
    else 
    {
        DIO_enumSetPINValue(SW_Config.Port, SW_Config.Pin, DIO_LOW);
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>
    }
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	cf 91       	pop	r28
    1c00:	df 91       	pop	r29
    1c02:	08 95       	ret

00001c04 <SW_u8GetPressed>:
u8 SW_u8GetPressed(SW_Type SW_Config)
{
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <SW_u8GetPressed+0x6>
    1c0a:	00 d0       	rcall	.+0      	; 0x1c0c <SW_u8GetPressed+0x8>
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	6a 83       	std	Y+2, r22	; 0x02
    1c12:	7b 83       	std	Y+3, r23	; 0x03
    1c14:	8c 83       	std	Y+4, r24	; 0x04
    u8 LOC_u8Result = 0;
    1c16:	19 82       	std	Y+1, r1	; 0x01
    DIO_enumGetPINValue     (SW_Config.Port,SW_Config.Pin, &LOC_u8Result  );
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1c:	69 2f       	mov	r22, r25
    1c1e:	9e 01       	movw	r18, r28
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	a9 01       	movw	r20, r18
    1c26:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <DIO_enumGetPINValue>

    return LOC_u8Result;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <SSD_voidInit>:

// all the numbers value frome 0 to 9 Common cathod
const u8 SSD_u8ArrNumbers[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
// function that sets the data and enables pin direction to output 
void SSD_voidInit(SSD_Type Copy_structSSD_Config)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <SSD_voidInit+0x6>
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <SSD_voidInit+0x8>
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	69 83       	std	Y+1, r22	; 0x01
    1c48:	7a 83       	std	Y+2, r23	; 0x02
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    DIO_enumSetPortDirection(Copy_structSSD_Config.Data_Port,DIO_OUTPUT);
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_enumSetPortDirection>
    DIO_enumSetPINDirection(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_OUTPUT);
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	69 2f       	mov	r22, r25
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_enumSetPINDirection>

}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <SSD_voidSendNumber>:
// function thats sends the value of a number on the data port
void SSD_voidSendNumber(SSD_Type Copy_structSSD_Config,u8 Copy_u8Number)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <SSD_voidSendNumber+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <SSD_voidSendNumber+0x8>
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	69 83       	std	Y+1, r22	; 0x01
    1c80:	7a 83       	std	Y+2, r23	; 0x02
    1c82:	8b 83       	std	Y+3, r24	; 0x03
    1c84:	9c 83       	std	Y+4, r25	; 0x04
    1c86:	4d 83       	std	Y+5, r20	; 0x05
    if(Copy_structSSD_Config.Type == SSD_COMMON_CATHODE)
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	88 23       	and	r24, r24
    1c8c:	69 f4       	brne	.+26     	; 0x1ca8 <SSD_voidSendNumber+0x38>
    {
        DIO_enumSetPortValue(Copy_structSSD_Config.Data_Port, SSD_u8ArrNumbers[Copy_u8Number]);
    1c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	fc 01       	movw	r30, r24
    1c98:	ef 58       	subi	r30, 0x8F	; 143
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	90 81       	ld	r25, Z
    1c9e:	82 2f       	mov	r24, r18
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	0e 94 a7 0a 	call	0x154e	; 0x154e <DIO_enumSetPortValue>
    1ca6:	11 c0       	rjmp	.+34     	; 0x1cca <SSD_voidSendNumber+0x5a>

    }
    else if (Copy_structSSD_Config.Type == SSD_COMMON_ANOD)
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	71 f4       	brne	.+28     	; 0x1cca <SSD_voidSendNumber+0x5a>
    {
        DIO_enumSetPortValue(Copy_structSSD_Config.Data_Port, ~(SSD_u8ArrNumbers[Copy_u8Number]));
    1cae:	2a 81       	ldd	r18, Y+2	; 0x02
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	ef 58       	subi	r30, 0x8F	; 143
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	90 95       	com	r25
    1cc2:	82 2f       	mov	r24, r18
    1cc4:	69 2f       	mov	r22, r25
    1cc6:	0e 94 a7 0a 	call	0x154e	; 0x154e <DIO_enumSetPortValue>


    }
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <SSD_voidEnable>:
// function that sets the enable pin to the value that makes the seven segments on
void SSD_voidEnable    (SSD_Type Copy_structSSD_Config)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <SSD_voidEnable+0x6>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <SSD_voidEnable+0x8>
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	69 83       	std	Y+1, r22	; 0x01
    1ce8:	7a 83       	std	Y+2, r23	; 0x02
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	9c 83       	std	Y+4, r25	; 0x04
      if(Copy_structSSD_Config.Type == SSD_COMMON_CATHODE)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	88 23       	and	r24, r24
    1cf2:	39 f4       	brne	.+14     	; 0x1d02 <SSD_voidEnable+0x28>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_LOW);
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	69 2f       	mov	r22, r25
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <SSD_voidEnable+0x3a>

    }
    else if (Copy_structSSD_Config.Type == SSD_COMMON_ANOD)
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	31 f4       	brne	.+12     	; 0x1d14 <SSD_voidEnable+0x3a>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_HIGH);
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	69 2f       	mov	r22, r25
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>


    }
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <SSD_voidDisable>:
// function that sets the enable pin to the value that makes the seven segments off

void SSD_voidDisable   (SSD_Type Copy_structSSD_Config)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <SSD_voidDisable+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <SSD_voidDisable+0x8>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	69 83       	std	Y+1, r22	; 0x01
    1d30:	7a 83       	std	Y+2, r23	; 0x02
    1d32:	8b 83       	std	Y+3, r24	; 0x03
    1d34:	9c 83       	std	Y+4, r25	; 0x04
        if(Copy_structSSD_Config.Type == SSD_COMMON_CATHODE)
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	88 23       	and	r24, r24
    1d3a:	39 f4       	brne	.+14     	; 0x1d4a <SSD_voidDisable+0x28>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_HIGH);
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	69 2f       	mov	r22, r25
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <SSD_voidDisable+0x3a>

    }
    else if (Copy_structSSD_Config.Type == SSD_COMMON_ANOD)
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	31 f4       	brne	.+12     	; 0x1d5c <SSD_voidDisable+0x3a>
    {
        DIO_enumSetPINValue(Copy_structSSD_Config.Enable_Port,Copy_structSSD_Config.Enable_Pin,DIO_LOW);
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	69 2f       	mov	r22, r25
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>


    }
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <LED_voidInit>:
#include "LED_config.h"



void LED_voidInit(LED_Type LED_Config )
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <LED_voidInit+0x6>
    1d70:	0f 92       	push	r0
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	69 83       	std	Y+1, r22	; 0x01
    1d78:	7a 83       	std	Y+2, r23	; 0x02
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
      DIO_enumSetPINDirection(LED_Config.Port,LED_Config.Pin,DIO_OUTPUT);
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	69 2f       	mov	r22, r25
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_enumSetPINDirection>


}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <LED_voidOn>:
void LED_voidOn  (LED_Type LED_Config )
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <LED_voidOn+0x6>
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	69 83       	std	Y+1, r22	; 0x01
    1da2:	7a 83       	std	Y+2, r23	; 0x02
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    if(LED_Config.Active_State == ACTIVE_HIGH)
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	39 f4       	brne	.+14     	; 0x1dba <LED_voidOn+0x26>
    {
      
      DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_HIGH);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	69 2f       	mov	r22, r25
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>
    1db8:	09 c0       	rjmp	.+18     	; 0x1dcc <LED_voidOn+0x38>

    }
    else if(LED_Config.Active_State == ACTIVE_LOW)
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	88 23       	and	r24, r24
    1dbe:	31 f4       	brne	.+12     	; 0x1dcc <LED_voidOn+0x38>
    {

           DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_LOW);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	69 2f       	mov	r22, r25
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>

    }
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <LED_voidOff>:
void LED_voidOff (LED_Type LED_Config )
{
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <LED_voidOff+0x6>
    1dde:	0f 92       	push	r0
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	69 83       	std	Y+1, r22	; 0x01
    1de6:	7a 83       	std	Y+2, r23	; 0x02
    1de8:	8b 83       	std	Y+3, r24	; 0x03
     if(LED_Config.Active_State == ACTIVE_HIGH)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	39 f4       	brne	.+14     	; 0x1dfe <LED_voidOff+0x26>
    {
      
      DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_LOW);
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	69 2f       	mov	r22, r25
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <LED_voidOff+0x38>

    }
     else if(LED_Config.Active_State == ACTIVE_LOW)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	88 23       	and	r24, r24
    1e02:	31 f4       	brne	.+12     	; 0x1e10 <LED_voidOff+0x38>
    {

           DIO_enumSetPINValue    (LED_Config.Port,LED_Config.Pin, DIO_HIGH);
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	69 2f       	mov	r22, r25
    1e0a:	41 e0       	ldi	r20, 0x01	; 1
    1e0c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <DIO_enumSetPINValue>

    }

}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <__prologue_saves__>:
    1e1c:	2f 92       	push	r2
    1e1e:	3f 92       	push	r3
    1e20:	4f 92       	push	r4
    1e22:	5f 92       	push	r5
    1e24:	6f 92       	push	r6
    1e26:	7f 92       	push	r7
    1e28:	8f 92       	push	r8
    1e2a:	9f 92       	push	r9
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	ca 1b       	sub	r28, r26
    1e46:	db 0b       	sbc	r29, r27
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	09 94       	ijmp

00001e54 <__epilogue_restores__>:
    1e54:	2a 88       	ldd	r2, Y+18	; 0x12
    1e56:	39 88       	ldd	r3, Y+17	; 0x11
    1e58:	48 88       	ldd	r4, Y+16	; 0x10
    1e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e60:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e62:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e64:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e66:	b9 84       	ldd	r11, Y+9	; 0x09
    1e68:	c8 84       	ldd	r12, Y+8	; 0x08
    1e6a:	df 80       	ldd	r13, Y+7	; 0x07
    1e6c:	ee 80       	ldd	r14, Y+6	; 0x06
    1e6e:	fd 80       	ldd	r15, Y+5	; 0x05
    1e70:	0c 81       	ldd	r16, Y+4	; 0x04
    1e72:	1b 81       	ldd	r17, Y+3	; 0x03
    1e74:	aa 81       	ldd	r26, Y+2	; 0x02
    1e76:	b9 81       	ldd	r27, Y+1	; 0x01
    1e78:	ce 0f       	add	r28, r30
    1e7a:	d1 1d       	adc	r29, r1
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	ed 01       	movw	r28, r26
    1e88:	08 95       	ret

00001e8a <_exit>:
    1e8a:	f8 94       	cli

00001e8c <__stop_program>:
    1e8c:	ff cf       	rjmp	.-2      	; 0x1e8c <__stop_program>
