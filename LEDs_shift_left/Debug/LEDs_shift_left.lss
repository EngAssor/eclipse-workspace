
LEDs_shift_left.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000afe  00000b72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000d68  00000000  00000000  00000b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000050c  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 3f 04 	call	0x87e	; 0x87e <main>
  7a:	0c 94 7d 05 	jmp	0xafa	; 0xafa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enumSetPortDirection>:
#include "LIB/BIT_MATH.h"
#include "DIO_private.h"
#include "DIO_interface.h"

 DIO_ErroStatus DIO_enumSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
 {
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_enumSetPortDirection+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_enumSetPortDirection+0x8>
  8a:	0f 92       	push	r0
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	89 83       	std	Y+1, r24	; 0x01
    switch(Copy_u8Port)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	28 2f       	mov	r18, r24
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	3d 83       	std	Y+5, r19	; 0x05
  a0:	2c 83       	std	Y+4, r18	; 0x04
  a2:	8c 81       	ldd	r24, Y+4	; 0x04
  a4:	9d 81       	ldd	r25, Y+5	; 0x05
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	91 05       	cpc	r25, r1
  aa:	39 f1       	breq	.+78     	; 0xfa <DIO_enumSetPortDirection+0x78>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	23 30       	cpi	r18, 0x03	; 3
  b2:	31 05       	cpc	r19, r1
  b4:	34 f4       	brge	.+12     	; 0xc2 <DIO_enumSetPortDirection+0x40>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	91 05       	cpc	r25, r1
  be:	61 f0       	breq	.+24     	; 0xd8 <DIO_enumSetPortDirection+0x56>
  c0:	4f c0       	rjmp	.+158    	; 0x160 <DIO_enumSetPortDirection+0xde>
  c2:	2c 81       	ldd	r18, Y+4	; 0x04
  c4:	3d 81       	ldd	r19, Y+5	; 0x05
  c6:	23 30       	cpi	r18, 0x03	; 3
  c8:	31 05       	cpc	r19, r1
  ca:	41 f1       	breq	.+80     	; 0x11c <DIO_enumSetPortDirection+0x9a>
  cc:	8c 81       	ldd	r24, Y+4	; 0x04
  ce:	9d 81       	ldd	r25, Y+5	; 0x05
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	91 05       	cpc	r25, r1
  d4:	a1 f1       	breq	.+104    	; 0x13e <DIO_enumSetPortDirection+0xbc>
  d6:	44 c0       	rjmp	.+136    	; 0x160 <DIO_enumSetPortDirection+0xde>
    {

        case DIO_PORTA : 
                        if(Copy_u8Direction == DIO_OUTPUT)
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	29 f4       	brne	.+10     	; 0xe8 <DIO_enumSetPortDirection+0x66>
                           {
                                DDRA_REG =0xff; 
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	80 83       	st	Z, r24
  e6:	3d c0       	rjmp	.+122    	; 0x162 <DIO_enumSetPortDirection+0xe0>
                           } 
                        else if(Copy_u8Direction == DIO_INPUT)
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	88 23       	and	r24, r24
  ec:	21 f4       	brne	.+8      	; 0xf6 <DIO_enumSetPortDirection+0x74>
                          {  
                                DDRA_REG=0x00;
  ee:	ea e3       	ldi	r30, 0x3A	; 58
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	10 82       	st	Z, r1
  f4:	36 c0       	rjmp	.+108    	; 0x162 <DIO_enumSetPortDirection+0xe0>
                          }
                          else
                          {
                            /**/
                        	  LOC_enumState=DIO_NOK;
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	34 c0       	rjmp	.+104    	; 0x162 <DIO_enumSetPortDirection+0xe0>
                          }
                    break;
        case DIO_PORTB :
                        if(Copy_u8Direction == DIO_OUTPUT)
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	29 f4       	brne	.+10     	; 0x10a <DIO_enumSetPortDirection+0x88>
                            {
                                DDRB_REG =0xff; 
 100:	e7 e3       	ldi	r30, 0x37	; 55
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	80 83       	st	Z, r24
 108:	2c c0       	rjmp	.+88     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                        else if(Copy_u8Direction == DIO_INPUT)
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	88 23       	and	r24, r24
 10e:	21 f4       	brne	.+8      	; 0x118 <DIO_enumSetPortDirection+0x96>
                            {
                                DDRC_REG=0x00;
 110:	e4 e3       	ldi	r30, 0x34	; 52
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	10 82       	st	Z, r1
 116:	25 c0       	rjmp	.+74     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
 118:	19 82       	std	Y+1, r1	; 0x01
 11a:	23 c0       	rjmp	.+70     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                    break;
        case DIO_PORTC : 
                        if(Copy_u8Direction == DIO_OUTPUT)
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	29 f4       	brne	.+10     	; 0x12c <DIO_enumSetPortDirection+0xaa>
                            {
                                DDRC_REG =0xff; 
 122:	e4 e3       	ldi	r30, 0x34	; 52
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	80 83       	st	Z, r24
 12a:	1b c0       	rjmp	.+54     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                        else if (Copy_u8Direction == DIO_INPUT)
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	88 23       	and	r24, r24
 130:	21 f4       	brne	.+8      	; 0x13a <DIO_enumSetPortDirection+0xb8>
                            {
                                DDRC_REG=0x00;
 132:	e4 e3       	ldi	r30, 0x34	; 52
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
 138:	14 c0       	rjmp	.+40     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
 13a:	19 82       	std	Y+1, r1	; 0x01
 13c:	12 c0       	rjmp	.+36     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                    break;
        case DIO_PORTD : 
                        if(Copy_u8Direction == DIO_OUTPUT)
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	29 f4       	brne	.+10     	; 0x14e <DIO_enumSetPortDirection+0xcc>
                            {
                                DDRD_REG =0xff; 
 144:	e1 e3       	ldi	r30, 0x31	; 49
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	80 83       	st	Z, r24
 14c:	0a c0       	rjmp	.+20     	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                        else if (Copy_u8Direction==DIO_INPUT)
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	88 23       	and	r24, r24
 152:	21 f4       	brne	.+8      	; 0x15c <DIO_enumSetPortDirection+0xda>
                            {
                                DDRD_REG=0x00;
 154:	e1 e3       	ldi	r30, 0x31	; 49
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	10 82       	st	Z, r1
 15a:	03 c0       	rjmp	.+6      	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                            else
                            {
                                /**/
                          	  LOC_enumState=DIO_NOK;
 15c:	19 82       	std	Y+1, r1	; 0x01
 15e:	01 c0       	rjmp	.+2      	; 0x162 <DIO_enumSetPortDirection+0xe0>
                            }
                    break;

        default:
      	  LOC_enumState=DIO_NOK;
 160:	19 82       	std	Y+1, r1	; 0x01

    }
return    LOC_enumState;
 162:	89 81       	ldd	r24, Y+1	; 0x01
 }
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <DIO_enumSetPortValue>:
 DIO_ErroStatus DIO_enumSetPortValue    (u8 Copy_u8Port, u8 Copy_u8Value    )
 {
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	00 d0       	rcall	.+0      	; 0x17a <DIO_enumSetPortValue+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <DIO_enumSetPortValue+0x8>
 17c:	0f 92       	push	r0
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	8a 83       	std	Y+2, r24	; 0x02
 184:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	89 83       	std	Y+1, r24	; 0x01

     switch(Copy_u8Port)
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	28 2f       	mov	r18, r24
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	3d 83       	std	Y+5, r19	; 0x05
 192:	2c 83       	std	Y+4, r18	; 0x04
 194:	8c 81       	ldd	r24, Y+4	; 0x04
 196:	9d 81       	ldd	r25, Y+5	; 0x05
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	91 05       	cpc	r25, r1
 19c:	39 f1       	breq	.+78     	; 0x1ec <DIO_enumSetPortValue+0x78>
 19e:	2c 81       	ldd	r18, Y+4	; 0x04
 1a0:	3d 81       	ldd	r19, Y+5	; 0x05
 1a2:	23 30       	cpi	r18, 0x03	; 3
 1a4:	31 05       	cpc	r19, r1
 1a6:	34 f4       	brge	.+12     	; 0x1b4 <DIO_enumSetPortValue+0x40>
 1a8:	8c 81       	ldd	r24, Y+4	; 0x04
 1aa:	9d 81       	ldd	r25, Y+5	; 0x05
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	61 f0       	breq	.+24     	; 0x1ca <DIO_enumSetPortValue+0x56>
 1b2:	4f c0       	rjmp	.+158    	; 0x252 <DIO_enumSetPortValue+0xde>
 1b4:	2c 81       	ldd	r18, Y+4	; 0x04
 1b6:	3d 81       	ldd	r19, Y+5	; 0x05
 1b8:	23 30       	cpi	r18, 0x03	; 3
 1ba:	31 05       	cpc	r19, r1
 1bc:	41 f1       	breq	.+80     	; 0x20e <DIO_enumSetPortValue+0x9a>
 1be:	8c 81       	ldd	r24, Y+4	; 0x04
 1c0:	9d 81       	ldd	r25, Y+5	; 0x05
 1c2:	84 30       	cpi	r24, 0x04	; 4
 1c4:	91 05       	cpc	r25, r1
 1c6:	a1 f1       	breq	.+104    	; 0x230 <DIO_enumSetPortValue+0xbc>
 1c8:	44 c0       	rjmp	.+136    	; 0x252 <DIO_enumSetPortValue+0xde>
    {
        case DIO_PORTA : 
                        if(Copy_u8Value == DIO_HIGH)
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	29 f4       	brne	.+10     	; 0x1da <DIO_enumSetPortValue+0x66>
                           {
                                PORTA_REG =0xff; 
 1d0:	eb e3       	ldi	r30, 0x3B	; 59
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	80 83       	st	Z, r24
 1d8:	3d c0       	rjmp	.+122    	; 0x254 <DIO_enumSetPortValue+0xe0>
                           } 
                        else if(Copy_u8Value == DIO_LOW)
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	88 23       	and	r24, r24
 1de:	21 f4       	brne	.+8      	; 0x1e8 <DIO_enumSetPortValue+0x74>
                          {  
                                PORTA_REG=0x00;
 1e0:	eb e3       	ldi	r30, 0x3B	; 59
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	10 82       	st	Z, r1
 1e6:	36 c0       	rjmp	.+108    	; 0x254 <DIO_enumSetPortValue+0xe0>
                          }
                          else
                          {
                            /**/
                         	  LOC_enumState=DIO_NOK;
 1e8:	19 82       	std	Y+1, r1	; 0x01
 1ea:	34 c0       	rjmp	.+104    	; 0x254 <DIO_enumSetPortValue+0xe0>
                          }
                    break;
        case DIO_PORTB :
                        if(Copy_u8Value == DIO_HIGH)
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	29 f4       	brne	.+10     	; 0x1fc <DIO_enumSetPortValue+0x88>
                            {
                                PORTB_REG =0xff; 
 1f2:	e8 e3       	ldi	r30, 0x38	; 56
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	80 83       	st	Z, r24
 1fa:	2c c0       	rjmp	.+88     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                        else if(Copy_u8Value == DIO_LOW)
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	88 23       	and	r24, r24
 200:	21 f4       	brne	.+8      	; 0x20a <DIO_enumSetPortValue+0x96>
                            {
                                PORTC_REG=0x00;
 202:	e5 e3       	ldi	r30, 0x35	; 53
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	10 82       	st	Z, r1
 208:	25 c0       	rjmp	.+74     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                            else
                            {
                                /**/
                           	  LOC_enumState=DIO_NOK;
 20a:	19 82       	std	Y+1, r1	; 0x01
 20c:	23 c0       	rjmp	.+70     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                    break;
        case DIO_PORTC : 
                        if(Copy_u8Value == DIO_HIGH)
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	29 f4       	brne	.+10     	; 0x21e <DIO_enumSetPortValue+0xaa>
                            {
                                PORTC_REG =0xff; 
 214:	e5 e3       	ldi	r30, 0x35	; 53
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	80 83       	st	Z, r24
 21c:	1b c0       	rjmp	.+54     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                        else if (Copy_u8Value == DIO_LOW)
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	88 23       	and	r24, r24
 222:	21 f4       	brne	.+8      	; 0x22c <DIO_enumSetPortValue+0xb8>
                            {
                                PORTC_REG=0x00;
 224:	e5 e3       	ldi	r30, 0x35	; 53
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	10 82       	st	Z, r1
 22a:	14 c0       	rjmp	.+40     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                            else
                            {
                                /**/
                           	  LOC_enumState=DIO_NOK;
 22c:	19 82       	std	Y+1, r1	; 0x01
 22e:	12 c0       	rjmp	.+36     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                    break;
        case DIO_PORTD : 
                        if(Copy_u8Value == DIO_HIGH)
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	29 f4       	brne	.+10     	; 0x240 <DIO_enumSetPortValue+0xcc>
                            {
                                PORTD_REG =0xff; 
 236:	e2 e3       	ldi	r30, 0x32	; 50
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	80 83       	st	Z, r24
 23e:	0a c0       	rjmp	.+20     	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                        else if (Copy_u8Value==DIO_LOW)
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	88 23       	and	r24, r24
 244:	21 f4       	brne	.+8      	; 0x24e <DIO_enumSetPortValue+0xda>
                            {
                                PORTD_REG=0x00;
 246:	e2 e3       	ldi	r30, 0x32	; 50
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	10 82       	st	Z, r1
 24c:	03 c0       	rjmp	.+6      	; 0x254 <DIO_enumSetPortValue+0xe0>
                            }
                            else
                            {
                                /**/
                             	  LOC_enumState=DIO_NOK;
 24e:	19 82       	std	Y+1, r1	; 0x01
 250:	01 c0       	rjmp	.+2      	; 0x254 <DIO_enumSetPortValue+0xe0>

                            }
                    break;
        default:
       	  LOC_enumState=DIO_NOK;
 252:	19 82       	std	Y+1, r1	; 0x01

     }
 return    LOC_enumState;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 }
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <DIO_enumSetPINDirection>:

 DIO_ErroStatus DIO_enumSetPINDirection(u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 Copy_u8Direction)
 {
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	00 d0       	rcall	.+0      	; 0x26c <DIO_enumSetPINDirection+0x6>
 26c:	00 d0       	rcall	.+0      	; 0x26e <DIO_enumSetPINDirection+0x8>
 26e:	00 d0       	rcall	.+0      	; 0x270 <DIO_enumSetPINDirection+0xa>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	8a 83       	std	Y+2, r24	; 0x02
 276:	6b 83       	std	Y+3, r22	; 0x03
 278:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErroStatus LOC_enumState = DIO_OK;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	88 30       	cpi	r24, 0x08	; 8
 282:	08 f0       	brcs	.+2      	; 0x286 <DIO_enumSetPINDirection+0x20>
 284:	e9 c0       	rjmp	.+466    	; 0x458 <DIO_enumSetPINDirection+0x1f2>
	{
		 switch(Copy_u8Port)
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	28 2f       	mov	r18, r24
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	3e 83       	std	Y+6, r19	; 0x06
 28e:	2d 83       	std	Y+5, r18	; 0x05
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	9e 81       	ldd	r25, Y+6	; 0x06
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	09 f4       	brne	.+2      	; 0x29c <DIO_enumSetPINDirection+0x36>
 29a:	49 c0       	rjmp	.+146    	; 0x32e <DIO_enumSetPINDirection+0xc8>
 29c:	2d 81       	ldd	r18, Y+5	; 0x05
 29e:	3e 81       	ldd	r19, Y+6	; 0x06
 2a0:	23 30       	cpi	r18, 0x03	; 3
 2a2:	31 05       	cpc	r19, r1
 2a4:	34 f4       	brge	.+12     	; 0x2b2 <DIO_enumSetPINDirection+0x4c>
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	9e 81       	ldd	r25, Y+6	; 0x06
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	91 05       	cpc	r25, r1
 2ae:	71 f0       	breq	.+28     	; 0x2cc <DIO_enumSetPINDirection+0x66>
 2b0:	d1 c0       	rjmp	.+418    	; 0x454 <DIO_enumSetPINDirection+0x1ee>
 2b2:	2d 81       	ldd	r18, Y+5	; 0x05
 2b4:	3e 81       	ldd	r19, Y+6	; 0x06
 2b6:	23 30       	cpi	r18, 0x03	; 3
 2b8:	31 05       	cpc	r19, r1
 2ba:	09 f4       	brne	.+2      	; 0x2be <DIO_enumSetPINDirection+0x58>
 2bc:	69 c0       	rjmp	.+210    	; 0x390 <DIO_enumSetPINDirection+0x12a>
 2be:	8d 81       	ldd	r24, Y+5	; 0x05
 2c0:	9e 81       	ldd	r25, Y+6	; 0x06
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	91 05       	cpc	r25, r1
 2c6:	09 f4       	brne	.+2      	; 0x2ca <DIO_enumSetPINDirection+0x64>
 2c8:	94 c0       	rjmp	.+296    	; 0x3f2 <DIO_enumSetPINDirection+0x18c>
 2ca:	c4 c0       	rjmp	.+392    	; 0x454 <DIO_enumSetPINDirection+0x1ee>
		    {

		        case DIO_PORTA :
		                        if(Copy_u8Direction == DIO_OUTPUT)
 2cc:	8c 81       	ldd	r24, Y+4	; 0x04
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	a1 f4       	brne	.+40     	; 0x2fa <DIO_enumSetPINDirection+0x94>
		                           {
		                                SET_BIT(DDRA_REG,Copy_u8PINNumber);
 2d2:	aa e3       	ldi	r26, 0x3A	; 58
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	ea e3       	ldi	r30, 0x3A	; 58
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	48 2f       	mov	r20, r24
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_enumSetPINDirection+0x8a>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_enumSetPINDirection+0x86>
 2f4:	84 2b       	or	r24, r20
 2f6:	8c 93       	st	X, r24
 2f8:	b0 c0       	rjmp	.+352    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                           }
		                        else if(Copy_u8Direction == DIO_INPUT)
 2fa:	8c 81       	ldd	r24, Y+4	; 0x04
 2fc:	88 23       	and	r24, r24
 2fe:	a9 f4       	brne	.+42     	; 0x32a <DIO_enumSetPINDirection+0xc4>
		                          {
		                                CLR_BIT(DDRA_REG,Copy_u8PINNumber);
 300:	aa e3       	ldi	r26, 0x3A	; 58
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	ea e3       	ldi	r30, 0x3A	; 58
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_enumSetPINDirection+0xb8>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_enumSetPINDirection+0xb4>
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	8c 93       	st	X, r24
 328:	98 c0       	rjmp	.+304    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                          }
		                          else
		                          {
		                            /**/
		                        	  LOC_enumState=DIO_NOK;
 32a:	19 82       	std	Y+1, r1	; 0x01
 32c:	96 c0       	rjmp	.+300    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                          }
		                    break;
		        case DIO_PORTB :
		                        if(Copy_u8Direction == DIO_OUTPUT)
 32e:	8c 81       	ldd	r24, Y+4	; 0x04
 330:	81 30       	cpi	r24, 0x01	; 1
 332:	a1 f4       	brne	.+40     	; 0x35c <DIO_enumSetPINDirection+0xf6>
		                            {
		                                SET_BIT(DDRB_REG,Copy_u8PINNumber);
 334:	a7 e3       	ldi	r26, 0x37	; 55
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e7 e3       	ldi	r30, 0x37	; 55
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	48 2f       	mov	r20, r24
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_enumSetPINDirection+0xec>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_enumSetPINDirection+0xe8>
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	7f c0       	rjmp	.+254    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if(Copy_u8Direction == DIO_INPUT)
 35c:	8c 81       	ldd	r24, Y+4	; 0x04
 35e:	88 23       	and	r24, r24
 360:	a9 f4       	brne	.+42     	; 0x38c <DIO_enumSetPINDirection+0x126>
		                            {
	                                    CLR_BIT(DDRB_REG,Copy_u8PINNumber);
 362:	a7 e3       	ldi	r26, 0x37	; 55
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e7 e3       	ldi	r30, 0x37	; 55
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8b 81       	ldd	r24, Y+3	; 0x03
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_enumSetPINDirection+0x11a>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_enumSetPINDirection+0x116>
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	8c 93       	st	X, r24
 38a:	67 c0       	rjmp	.+206    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
 38c:	19 82       	std	Y+1, r1	; 0x01
 38e:	65 c0       	rjmp	.+202    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;
		        case DIO_PORTC :
		                        if(Copy_u8Direction == DIO_OUTPUT)
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	a1 f4       	brne	.+40     	; 0x3be <DIO_enumSetPINDirection+0x158>
		                            {
	                                SET_BIT(DDRC_REG,Copy_u8PINNumber);
 396:	a4 e3       	ldi	r26, 0x34	; 52
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e4 e3       	ldi	r30, 0x34	; 52
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	48 2f       	mov	r20, r24
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	28 2f       	mov	r18, r24
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 2e       	mov	r0, r18
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_enumSetPINDirection+0x14e>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_enumSetPINDirection+0x14a>
 3b8:	84 2b       	or	r24, r20
 3ba:	8c 93       	st	X, r24
 3bc:	4e c0       	rjmp	.+156    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if (Copy_u8Direction == DIO_INPUT)
 3be:	8c 81       	ldd	r24, Y+4	; 0x04
 3c0:	88 23       	and	r24, r24
 3c2:	a9 f4       	brne	.+42     	; 0x3ee <DIO_enumSetPINDirection+0x188>
		                            {
	                                CLR_BIT(DDRC_REG,Copy_u8PINNumber);
 3c4:	a4 e3       	ldi	r26, 0x34	; 52
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e4 e3       	ldi	r30, 0x34	; 52
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_enumSetPINDirection+0x17c>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_enumSetPINDirection+0x178>
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	36 c0       	rjmp	.+108    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
 3ee:	19 82       	std	Y+1, r1	; 0x01
 3f0:	34 c0       	rjmp	.+104    	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;
		        case DIO_PORTD :
		                        if(Copy_u8Direction == DIO_OUTPUT)
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	a1 f4       	brne	.+40     	; 0x420 <DIO_enumSetPINDirection+0x1ba>
		                            {
	                                SET_BIT(DDRD_REG,Copy_u8PINNumber);
 3f8:	a1 e3       	ldi	r26, 0x31	; 49
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e1 e3       	ldi	r30, 0x31	; 49
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	48 2f       	mov	r20, r24
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 2e       	mov	r0, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_enumSetPINDirection+0x1b0>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_enumSetPINDirection+0x1ac>
 41a:	84 2b       	or	r24, r20
 41c:	8c 93       	st	X, r24
 41e:	1d c0       	rjmp	.+58     	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                        else if (Copy_u8Direction==DIO_INPUT)
 420:	8c 81       	ldd	r24, Y+4	; 0x04
 422:	88 23       	and	r24, r24
 424:	a9 f4       	brne	.+42     	; 0x450 <DIO_enumSetPINDirection+0x1ea>
		                            {
	                                CLR_BIT(DDRD_REG,Copy_u8PINNumber);
 426:	a1 e3       	ldi	r26, 0x31	; 49
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	e1 e3       	ldi	r30, 0x31	; 49
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	28 2f       	mov	r18, r24
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 2e       	mov	r0, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_enumSetPINDirection+0x1de>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_enumSetPINDirection+0x1da>
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	8c 93       	st	X, r24
 44e:	05 c0       	rjmp	.+10     	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                            else
		                            {
		                                /**/
		                          	  LOC_enumState=DIO_NOK;
 450:	19 82       	std	Y+1, r1	; 0x01
 452:	03 c0       	rjmp	.+6      	; 0x45a <DIO_enumSetPINDirection+0x1f4>
		                            }
		                    break;

		        default:
		      	  LOC_enumState=DIO_NOK;
 454:	19 82       	std	Y+1, r1	; 0x01
 456:	01 c0       	rjmp	.+2      	; 0x45a <DIO_enumSetPINDirection+0x1f4>

	}
	}
	else
	{
		LOC_enumState=DIO_NOK;
 458:	19 82       	std	Y+1, r1	; 0x01
	}



	return LOC_enumState;
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 }
 45c:	26 96       	adiw	r28, 0x06	; 6
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	08 95       	ret

0000046e <DIO_enumSetPINValue>:
 DIO_ErroStatus DIO_enumSetPINValue    (u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 Copy_u8Value    )
 {
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	00 d0       	rcall	.+0      	; 0x474 <DIO_enumSetPINValue+0x6>
 474:	00 d0       	rcall	.+0      	; 0x476 <DIO_enumSetPINValue+0x8>
 476:	00 d0       	rcall	.+0      	; 0x478 <DIO_enumSetPINValue+0xa>
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	8a 83       	std	Y+2, r24	; 0x02
 47e:	6b 83       	std	Y+3, r22	; 0x03
 480:	4c 83       	std	Y+4, r20	; 0x04
	 DIO_ErroStatus LOC_enumState = DIO_OK;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	89 83       	std	Y+1, r24	; 0x01
	 	if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	88 30       	cpi	r24, 0x08	; 8
 48a:	08 f0       	brcs	.+2      	; 0x48e <DIO_enumSetPINValue+0x20>
 48c:	d4 c0       	rjmp	.+424    	; 0x636 <DIO_enumSetPINValue+0x1c8>
	 	{
	 		 switch(Copy_u8Port)
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	3e 83       	std	Y+6, r19	; 0x06
 496:	2d 83       	std	Y+5, r18	; 0x05
 498:	8d 81       	ldd	r24, Y+5	; 0x05
 49a:	9e 81       	ldd	r25, Y+6	; 0x06
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	91 05       	cpc	r25, r1
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <DIO_enumSetPINValue+0x36>
 4a2:	49 c0       	rjmp	.+146    	; 0x536 <DIO_enumSetPINValue+0xc8>
 4a4:	2d 81       	ldd	r18, Y+5	; 0x05
 4a6:	3e 81       	ldd	r19, Y+6	; 0x06
 4a8:	23 30       	cpi	r18, 0x03	; 3
 4aa:	31 05       	cpc	r19, r1
 4ac:	34 f4       	brge	.+12     	; 0x4ba <DIO_enumSetPINValue+0x4c>
 4ae:	8d 81       	ldd	r24, Y+5	; 0x05
 4b0:	9e 81       	ldd	r25, Y+6	; 0x06
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	91 05       	cpc	r25, r1
 4b6:	71 f0       	breq	.+28     	; 0x4d4 <DIO_enumSetPINValue+0x66>
 4b8:	bc c0       	rjmp	.+376    	; 0x632 <DIO_enumSetPINValue+0x1c4>
 4ba:	2d 81       	ldd	r18, Y+5	; 0x05
 4bc:	3e 81       	ldd	r19, Y+6	; 0x06
 4be:	23 30       	cpi	r18, 0x03	; 3
 4c0:	31 05       	cpc	r19, r1
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <DIO_enumSetPINValue+0x58>
 4c4:	69 c0       	rjmp	.+210    	; 0x598 <DIO_enumSetPINValue+0x12a>
 4c6:	8d 81       	ldd	r24, Y+5	; 0x05
 4c8:	9e 81       	ldd	r25, Y+6	; 0x06
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	91 05       	cpc	r25, r1
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <DIO_enumSetPINValue+0x64>
 4d0:	94 c0       	rjmp	.+296    	; 0x5fa <DIO_enumSetPINValue+0x18c>
 4d2:	af c0       	rjmp	.+350    	; 0x632 <DIO_enumSetPINValue+0x1c4>
	 		    {

	 		        case DIO_PORTA :
	 		                        if(Copy_u8Value == DIO_HIGH)
 4d4:	8c 81       	ldd	r24, Y+4	; 0x04
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	a1 f4       	brne	.+40     	; 0x502 <DIO_enumSetPINValue+0x94>
	 		                           {
	 		                                SET_BIT(PORTA_REG,Copy_u8PINNumber);
 4da:	ab e3       	ldi	r26, 0x3B	; 59
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	eb e3       	ldi	r30, 0x3B	; 59
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	48 2f       	mov	r20, r24
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 2e       	mov	r0, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_enumSetPINValue+0x8a>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_enumSetPINValue+0x86>
 4fc:	84 2b       	or	r24, r20
 4fe:	8c 93       	st	X, r24
 500:	9b c0       	rjmp	.+310    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                           }
	 		                        else if(Copy_u8Value == DIO_LOW)
 502:	8c 81       	ldd	r24, Y+4	; 0x04
 504:	88 23       	and	r24, r24
 506:	a9 f4       	brne	.+42     	; 0x532 <DIO_enumSetPINValue+0xc4>
	 		                          {
	 		                                CLR_BIT(PORTA_REG,Copy_u8PINNumber);
 508:	ab e3       	ldi	r26, 0x3B	; 59
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	eb e3       	ldi	r30, 0x3B	; 59
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	48 2f       	mov	r20, r24
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	28 2f       	mov	r18, r24
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 2e       	mov	r0, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_enumSetPINValue+0xb8>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	0a 94       	dec	r0
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_enumSetPINValue+0xb4>
 52a:	80 95       	com	r24
 52c:	84 23       	and	r24, r20
 52e:	8c 93       	st	X, r24
 530:	83 c0       	rjmp	.+262    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                          }
	 		                          else
	 		                          {
	 		                            /**/
	 		                        	  LOC_enumState=DIO_NOK;
 532:	19 82       	std	Y+1, r1	; 0x01
 534:	81 c0       	rjmp	.+258    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                          }
	 		                    break;
	 		        case DIO_PORTB :
	 		                        if(Copy_u8Value == DIO_HIGH)
 536:	8c 81       	ldd	r24, Y+4	; 0x04
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	a1 f4       	brne	.+40     	; 0x564 <DIO_enumSetPINValue+0xf6>
	 		                            {
	 		                                SET_BIT(PORTB_REG,Copy_u8PINNumber);
 53c:	a8 e3       	ldi	r26, 0x38	; 56
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e8 e3       	ldi	r30, 0x38	; 56
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	48 2f       	mov	r20, r24
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 2e       	mov	r0, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_enumSetPINValue+0xec>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_enumSetPINValue+0xe8>
 55e:	84 2b       	or	r24, r20
 560:	8c 93       	st	X, r24
 562:	6a c0       	rjmp	.+212    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                        else if(Copy_u8Value == DIO_LOW)
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	88 23       	and	r24, r24
 568:	a9 f4       	brne	.+42     	; 0x594 <DIO_enumSetPINValue+0x126>
	 		                            {
	 	                                    CLR_BIT(PORTB_REG,Copy_u8PINNumber);
 56a:	a8 e3       	ldi	r26, 0x38	; 56
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	e8 e3       	ldi	r30, 0x38	; 56
 570:	f0 e0       	ldi	r31, 0x00	; 0
 572:	80 81       	ld	r24, Z
 574:	48 2f       	mov	r20, r24
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 2e       	mov	r0, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_enumSetPINValue+0x11a>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	0a 94       	dec	r0
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_enumSetPINValue+0x116>
 58c:	80 95       	com	r24
 58e:	84 23       	and	r24, r20
 590:	8c 93       	st	X, r24
 592:	52 c0       	rjmp	.+164    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
 594:	19 82       	std	Y+1, r1	; 0x01
 596:	50 c0       	rjmp	.+160    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                    break;
	 		        case DIO_PORTC :
	 		                        if(Copy_u8Value == DIO_HIGH)
 598:	8c 81       	ldd	r24, Y+4	; 0x04
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	a1 f4       	brne	.+40     	; 0x5c6 <DIO_enumSetPINValue+0x158>
	 		                            {
	 	                                SET_BIT(PORTC_REG,Copy_u8PINNumber);
 59e:	a5 e3       	ldi	r26, 0x35	; 53
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	e5 e3       	ldi	r30, 0x35	; 53
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	48 2f       	mov	r20, r24
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 2e       	mov	r0, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_enumSetPINValue+0x14e>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	0a 94       	dec	r0
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_enumSetPINValue+0x14a>
 5c0:	84 2b       	or	r24, r20
 5c2:	8c 93       	st	X, r24
 5c4:	39 c0       	rjmp	.+114    	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                        else if (Copy_u8Value==DIO_LOW)
 5c6:	8c 81       	ldd	r24, Y+4	; 0x04
 5c8:	88 23       	and	r24, r24
 5ca:	a9 f4       	brne	.+42     	; 0x5f6 <DIO_enumSetPINValue+0x188>
	 		                            {
	 	                                CLR_BIT(PORTC_REG,Copy_u8PINNumber);
 5cc:	a5 e3       	ldi	r26, 0x35	; 53
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e5 e3       	ldi	r30, 0x35	; 53
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	48 2f       	mov	r20, r24
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	28 2f       	mov	r18, r24
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 2e       	mov	r0, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_enumSetPINValue+0x17c>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	0a 94       	dec	r0
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_enumSetPINValue+0x178>
 5ee:	80 95       	com	r24
 5f0:	84 23       	and	r24, r20
 5f2:	8c 93       	st	X, r24
 5f4:	21 c0       	rjmp	.+66     	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
 5f6:	19 82       	std	Y+1, r1	; 0x01
 5f8:	1f c0       	rjmp	.+62     	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                    break;
	 		        case DIO_PORTD :
	 		                        if(Copy_u8Value == DIO_HIGH)
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	a1 f4       	brne	.+40     	; 0x628 <DIO_enumSetPINValue+0x1ba>
	 		                            {
	 	                                SET_BIT(PORTD_REG,Copy_u8PINNumber);
 600:	a2 e3       	ldi	r26, 0x32	; 50
 602:	b0 e0       	ldi	r27, 0x00	; 0
 604:	e2 e3       	ldi	r30, 0x32	; 50
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	80 81       	ld	r24, Z
 60a:	48 2f       	mov	r20, r24
 60c:	8b 81       	ldd	r24, Y+3	; 0x03
 60e:	28 2f       	mov	r18, r24
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 2e       	mov	r0, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_enumSetPINValue+0x1b0>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_enumSetPINValue+0x1ac>
 622:	84 2b       	or	r24, r20
 624:	8c 93       	st	X, r24
 626:	08 c0       	rjmp	.+16     	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                        else if (Copy_u8Value==DIO_LOW)
 628:	8c 81       	ldd	r24, Y+4	; 0x04
 62a:	88 23       	and	r24, r24
 62c:	29 f0       	breq	.+10     	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            {
	 		                            }
	 		                            else
	 		                            {
	 		                                /**/
	 		                          	  LOC_enumState=DIO_NOK;
 62e:	19 82       	std	Y+1, r1	; 0x01
 630:	03 c0       	rjmp	.+6      	; 0x638 <DIO_enumSetPINValue+0x1ca>
	 		                            }
	 		                    break;

	 		        default:
	 		      	  LOC_enumState=DIO_NOK;
 632:	19 82       	std	Y+1, r1	; 0x01
 634:	01 c0       	rjmp	.+2      	; 0x638 <DIO_enumSetPINValue+0x1ca>

	 	}
	 	}
	 	else
	 	{
	 		LOC_enumState=DIO_NOK;
 636:	19 82       	std	Y+1, r1	; 0x01
	 	}



	 	return LOC_enumState;
 638:	89 81       	ldd	r24, Y+1	; 0x01
	  }
 63a:	26 96       	adiw	r28, 0x06	; 6
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	08 95       	ret

0000064c <DIO_enumGetPortValue>:

 DIO_ErroStatus DIO_enumGetPortValue    (u8 Copy_u8Port, u8 *Copy_ptrData   )
 {
 64c:	df 93       	push	r29
 64e:	cf 93       	push	r28
 650:	00 d0       	rcall	.+0      	; 0x652 <DIO_enumGetPortValue+0x6>
 652:	00 d0       	rcall	.+0      	; 0x654 <DIO_enumGetPortValue+0x8>
 654:	00 d0       	rcall	.+0      	; 0x656 <DIO_enumGetPortValue+0xa>
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	8a 83       	std	Y+2, r24	; 0x02
 65c:	7c 83       	std	Y+4, r23	; 0x04
 65e:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_ErroStatus LOC_enumState=DIO_OK;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	89 83       	std	Y+1, r24	; 0x01
	 switch (Copy_u8Port) {
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	28 2f       	mov	r18, r24
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	3e 83       	std	Y+6, r19	; 0x06
 66c:	2d 83       	std	Y+5, r18	; 0x05
 66e:	8d 81       	ldd	r24, Y+5	; 0x05
 670:	9e 81       	ldd	r25, Y+6	; 0x06
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	91 05       	cpc	r25, r1
 676:	e9 f0       	breq	.+58     	; 0x6b2 <DIO_enumGetPortValue+0x66>
 678:	2d 81       	ldd	r18, Y+5	; 0x05
 67a:	3e 81       	ldd	r19, Y+6	; 0x06
 67c:	23 30       	cpi	r18, 0x03	; 3
 67e:	31 05       	cpc	r19, r1
 680:	34 f4       	brge	.+12     	; 0x68e <DIO_enumGetPortValue+0x42>
 682:	8d 81       	ldd	r24, Y+5	; 0x05
 684:	9e 81       	ldd	r25, Y+6	; 0x06
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	91 05       	cpc	r25, r1
 68a:	61 f0       	breq	.+24     	; 0x6a4 <DIO_enumGetPortValue+0x58>
 68c:	27 c0       	rjmp	.+78     	; 0x6dc <DIO_enumGetPortValue+0x90>
 68e:	2d 81       	ldd	r18, Y+5	; 0x05
 690:	3e 81       	ldd	r19, Y+6	; 0x06
 692:	23 30       	cpi	r18, 0x03	; 3
 694:	31 05       	cpc	r19, r1
 696:	a1 f0       	breq	.+40     	; 0x6c0 <DIO_enumGetPortValue+0x74>
 698:	8d 81       	ldd	r24, Y+5	; 0x05
 69a:	9e 81       	ldd	r25, Y+6	; 0x06
 69c:	84 30       	cpi	r24, 0x04	; 4
 69e:	91 05       	cpc	r25, r1
 6a0:	b1 f0       	breq	.+44     	; 0x6ce <DIO_enumGetPortValue+0x82>
 6a2:	1c c0       	rjmp	.+56     	; 0x6dc <DIO_enumGetPortValue+0x90>
		case DIO_PORTA: *Copy_ptrData = PINA_REG;
 6a4:	e9 e3       	ldi	r30, 0x39	; 57
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	eb 81       	ldd	r30, Y+3	; 0x03
 6ac:	fc 81       	ldd	r31, Y+4	; 0x04
 6ae:	80 83       	st	Z, r24
 6b0:	16 c0       	rjmp	.+44     	; 0x6de <DIO_enumGetPortValue+0x92>
			break;
		case DIO_PORTB: *Copy_ptrData = PINB_REG;
 6b2:	e6 e3       	ldi	r30, 0x36	; 54
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	eb 81       	ldd	r30, Y+3	; 0x03
 6ba:	fc 81       	ldd	r31, Y+4	; 0x04
 6bc:	80 83       	st	Z, r24
 6be:	0f c0       	rjmp	.+30     	; 0x6de <DIO_enumGetPortValue+0x92>
					break;
		case DIO_PORTC: *Copy_ptrData = PINC_REG;
 6c0:	e3 e3       	ldi	r30, 0x33	; 51
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	eb 81       	ldd	r30, Y+3	; 0x03
 6c8:	fc 81       	ldd	r31, Y+4	; 0x04
 6ca:	80 83       	st	Z, r24
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <DIO_enumGetPortValue+0x92>
					break;
		case DIO_PORTD: *Copy_ptrData = PIND_REG;
 6ce:	e0 e3       	ldi	r30, 0x30	; 48
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	eb 81       	ldd	r30, Y+3	; 0x03
 6d6:	fc 81       	ldd	r31, Y+4	; 0x04
 6d8:	80 83       	st	Z, r24
 6da:	01 c0       	rjmp	.+2      	; 0x6de <DIO_enumGetPortValue+0x92>
					break;
		default:
			LOC_enumState =DIO_NOK;
 6dc:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
	 return LOC_enumState;
 6de:	89 81       	ldd	r24, Y+1	; 0x01


 }
 6e0:	26 96       	adiw	r28, 0x06	; 6
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <DIO_enumGetPINValue>:

 DIO_ErroStatus DIO_enumGetPINValue     (u8 Copy_u8Port,u8 Copy_u8PINNumber, u8 *Copy_ptrData   )
 {
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	27 97       	sbiw	r28, 0x07	; 7
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	de bf       	out	0x3e, r29	; 62
 702:	0f be       	out	0x3f, r0	; 63
 704:	cd bf       	out	0x3d, r28	; 61
 706:	8a 83       	std	Y+2, r24	; 0x02
 708:	6b 83       	std	Y+3, r22	; 0x03
 70a:	5d 83       	std	Y+5, r21	; 0x05
 70c:	4c 83       	std	Y+4, r20	; 0x04
	 DIO_ErroStatus LOC_enumState = DIO_OK;
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PINNumber>=DIO_PIN0)&& (Copy_u8PINNumber<=DIO_PIN7))
 712:	8b 81       	ldd	r24, Y+3	; 0x03
 714:	88 30       	cpi	r24, 0x08	; 8
 716:	08 f0       	brcs	.+2      	; 0x71a <DIO_enumGetPINValue+0x28>
 718:	73 c0       	rjmp	.+230    	; 0x800 <DIO_enumGetPINValue+0x10e>
		 	{
		 		 switch(Copy_u8Port)
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	28 2f       	mov	r18, r24
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	3f 83       	std	Y+7, r19	; 0x07
 722:	2e 83       	std	Y+6, r18	; 0x06
 724:	4e 81       	ldd	r20, Y+6	; 0x06
 726:	5f 81       	ldd	r21, Y+7	; 0x07
 728:	42 30       	cpi	r20, 0x02	; 2
 72a:	51 05       	cpc	r21, r1
 72c:	59 f1       	breq	.+86     	; 0x784 <DIO_enumGetPINValue+0x92>
 72e:	8e 81       	ldd	r24, Y+6	; 0x06
 730:	9f 81       	ldd	r25, Y+7	; 0x07
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	91 05       	cpc	r25, r1
 736:	34 f4       	brge	.+12     	; 0x744 <DIO_enumGetPINValue+0x52>
 738:	2e 81       	ldd	r18, Y+6	; 0x06
 73a:	3f 81       	ldd	r19, Y+7	; 0x07
 73c:	21 30       	cpi	r18, 0x01	; 1
 73e:	31 05       	cpc	r19, r1
 740:	69 f0       	breq	.+26     	; 0x75c <DIO_enumGetPINValue+0x6a>
 742:	5c c0       	rjmp	.+184    	; 0x7fc <DIO_enumGetPINValue+0x10a>
 744:	4e 81       	ldd	r20, Y+6	; 0x06
 746:	5f 81       	ldd	r21, Y+7	; 0x07
 748:	43 30       	cpi	r20, 0x03	; 3
 74a:	51 05       	cpc	r21, r1
 74c:	79 f1       	breq	.+94     	; 0x7ac <DIO_enumGetPINValue+0xba>
 74e:	8e 81       	ldd	r24, Y+6	; 0x06
 750:	9f 81       	ldd	r25, Y+7	; 0x07
 752:	84 30       	cpi	r24, 0x04	; 4
 754:	91 05       	cpc	r25, r1
 756:	09 f4       	brne	.+2      	; 0x75a <DIO_enumGetPINValue+0x68>
 758:	3d c0       	rjmp	.+122    	; 0x7d4 <DIO_enumGetPINValue+0xe2>
 75a:	50 c0       	rjmp	.+160    	; 0x7fc <DIO_enumGetPINValue+0x10a>
		 		    {
		 		case DIO_PORTA: *Copy_ptrData = GET_BIT(PINA_REG,Copy_u8PINNumber);
 75c:	e9 e3       	ldi	r30, 0x39	; 57
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	28 2f       	mov	r18, r24
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	88 2f       	mov	r24, r24
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	a9 01       	movw	r20, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_enumGetPINValue+0x82>
 770:	55 95       	asr	r21
 772:	47 95       	ror	r20
 774:	8a 95       	dec	r24
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_enumGetPINValue+0x7e>
 778:	ca 01       	movw	r24, r20
 77a:	81 70       	andi	r24, 0x01	; 1
 77c:	ec 81       	ldd	r30, Y+4	; 0x04
 77e:	fd 81       	ldd	r31, Y+5	; 0x05
 780:	80 83       	st	Z, r24
 782:	3f c0       	rjmp	.+126    	; 0x802 <DIO_enumGetPINValue+0x110>
		 			break;
		 		case DIO_PORTB: *Copy_ptrData = GET_BIT(PINB_REG,Copy_u8PINNumber);
 784:	e6 e3       	ldi	r30, 0x36	; 54
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	88 2f       	mov	r24, r24
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	a9 01       	movw	r20, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_enumGetPINValue+0xaa>
 798:	55 95       	asr	r21
 79a:	47 95       	ror	r20
 79c:	8a 95       	dec	r24
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_enumGetPINValue+0xa6>
 7a0:	ca 01       	movw	r24, r20
 7a2:	81 70       	andi	r24, 0x01	; 1
 7a4:	ec 81       	ldd	r30, Y+4	; 0x04
 7a6:	fd 81       	ldd	r31, Y+5	; 0x05
 7a8:	80 83       	st	Z, r24
 7aa:	2b c0       	rjmp	.+86     	; 0x802 <DIO_enumGetPINValue+0x110>
		 					break;
		 		case DIO_PORTC: *Copy_ptrData = GET_BIT(PINC_REG,Copy_u8PINNumber);
 7ac:	e3 e3       	ldi	r30, 0x33	; 51
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	88 2f       	mov	r24, r24
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	a9 01       	movw	r20, r18
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_enumGetPINValue+0xd2>
 7c0:	55 95       	asr	r21
 7c2:	47 95       	ror	r20
 7c4:	8a 95       	dec	r24
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_enumGetPINValue+0xce>
 7c8:	ca 01       	movw	r24, r20
 7ca:	81 70       	andi	r24, 0x01	; 1
 7cc:	ec 81       	ldd	r30, Y+4	; 0x04
 7ce:	fd 81       	ldd	r31, Y+5	; 0x05
 7d0:	80 83       	st	Z, r24
 7d2:	17 c0       	rjmp	.+46     	; 0x802 <DIO_enumGetPINValue+0x110>
		 					break;
		 		case DIO_PORTD: *Copy_ptrData = GET_BIT(PIND_REG,Copy_u8PINNumber);
 7d4:	e0 e3       	ldi	r30, 0x30	; 48
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	80 81       	ld	r24, Z
 7da:	28 2f       	mov	r18, r24
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	88 2f       	mov	r24, r24
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	a9 01       	movw	r20, r18
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_enumGetPINValue+0xfa>
 7e8:	55 95       	asr	r21
 7ea:	47 95       	ror	r20
 7ec:	8a 95       	dec	r24
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_enumGetPINValue+0xf6>
 7f0:	ca 01       	movw	r24, r20
 7f2:	81 70       	andi	r24, 0x01	; 1
 7f4:	ec 81       	ldd	r30, Y+4	; 0x04
 7f6:	fd 81       	ldd	r31, Y+5	; 0x05
 7f8:	80 83       	st	Z, r24
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <DIO_enumGetPINValue+0x110>
		 					break;
		 		default:
		 			LOC_enumState =DIO_NOK;
 7fc:	19 82       	std	Y+1, r1	; 0x01
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <DIO_enumGetPINValue+0x110>
		 			break;

		 		    }
		 	}
	 else {
		 LOC_enumState = DIO_NOK;
 800:	19 82       	std	Y+1, r1	; 0x01
	}

	 return LOC_enumState;
 802:	89 81       	ldd	r24, Y+1	; 0x01
 }
 804:	27 96       	adiw	r28, 0x07	; 7
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	f8 94       	cli
 80a:	de bf       	out	0x3e, r29	; 62
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	cd bf       	out	0x3d, r28	; 61
 810:	cf 91       	pop	r28
 812:	df 91       	pop	r29
 814:	08 95       	ret

00000816 <DIO_Delay>:
#define BLINKALL  3
#define PNGPONG2  4
#define SNAKE     5
// dummy function to delay
void DIO_Delay(u32 ticks)
{
 816:	df 93       	push	r29
 818:	cf 93       	push	r28
 81a:	cd b7       	in	r28, 0x3d	; 61
 81c:	de b7       	in	r29, 0x3e	; 62
 81e:	28 97       	sbiw	r28, 0x08	; 8
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	6d 83       	std	Y+5, r22	; 0x05
 82c:	7e 83       	std	Y+6, r23	; 0x06
 82e:	8f 83       	std	Y+7, r24	; 0x07
 830:	98 87       	std	Y+8, r25	; 0x08
u32 x;
for(x=0;x<ticks;x++);
 832:	19 82       	std	Y+1, r1	; 0x01
 834:	1a 82       	std	Y+2, r1	; 0x02
 836:	1b 82       	std	Y+3, r1	; 0x03
 838:	1c 82       	std	Y+4, r1	; 0x04
 83a:	0b c0       	rjmp	.+22     	; 0x852 <DIO_Delay+0x3c>
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	9a 81       	ldd	r25, Y+2	; 0x02
 840:	ab 81       	ldd	r26, Y+3	; 0x03
 842:	bc 81       	ldd	r27, Y+4	; 0x04
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	a1 1d       	adc	r26, r1
 848:	b1 1d       	adc	r27, r1
 84a:	89 83       	std	Y+1, r24	; 0x01
 84c:	9a 83       	std	Y+2, r25	; 0x02
 84e:	ab 83       	std	Y+3, r26	; 0x03
 850:	bc 83       	std	Y+4, r27	; 0x04
 852:	29 81       	ldd	r18, Y+1	; 0x01
 854:	3a 81       	ldd	r19, Y+2	; 0x02
 856:	4b 81       	ldd	r20, Y+3	; 0x03
 858:	5c 81       	ldd	r21, Y+4	; 0x04
 85a:	8d 81       	ldd	r24, Y+5	; 0x05
 85c:	9e 81       	ldd	r25, Y+6	; 0x06
 85e:	af 81       	ldd	r26, Y+7	; 0x07
 860:	b8 85       	ldd	r27, Y+8	; 0x08
 862:	28 17       	cp	r18, r24
 864:	39 07       	cpc	r19, r25
 866:	4a 07       	cpc	r20, r26
 868:	5b 07       	cpc	r21, r27
 86a:	40 f3       	brcs	.-48     	; 0x83c <DIO_Delay+0x26>

}
 86c:	28 96       	adiw	r28, 0x08	; 8
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	cf 91       	pop	r28
 87a:	df 91       	pop	r29
 87c:	08 95       	ret

0000087e <main>:
int main(void)
{
 87e:	df 93       	push	r29
 880:	cf 93       	push	r28
 882:	00 d0       	rcall	.+0      	; 0x884 <main+0x6>
 884:	00 d0       	rcall	.+0      	; 0x886 <main+0x8>
 886:	00 d0       	rcall	.+0      	; 0x888 <main+0xa>
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPortDirection(DIO_PORTA,DIO_OUTPUT);// Set Port A as an Output
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	61 e0       	ldi	r22, 0x01	; 1
 890:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enumSetPortDirection>
	DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);// reset all values in port A
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
	DIO_enumSetPINDirection(DIO_PORTD,DIO_PIN0,DIO_INPUT); // make port D as input
 89c:	84 e0       	ldi	r24, 0x04	; 4
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	40 e0       	ldi	r20, 0x00	; 0
 8a2:	0e 94 33 01 	call	0x266	; 0x266 <DIO_enumSetPINDirection>
	DIO_enumSetPINValue(DIO_PORTD,DIO_PIN0,DIO_HIGH); // make pin 0 as pull up
 8a6:	84 e0       	ldi	r24, 0x04	; 4
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>
	volatile s8 i =0,j=0; // loop variables
 8b0:	19 82       	std	Y+1, r1	; 0x01
 8b2:	1a 82       	std	Y+2, r1	; 0x02
	volatile u8 input=0; // to store the input thats come from button
 8b4:	1b 82       	std	Y+3, r1	; 0x03
	volatile u8 ledmod=0; // Specifying  the shape of leds
 8b6:	1c 82       	std	Y+4, r1	; 0x04
	// super loop
	while(1)
	{
		DIO_enumGetPINValue(DIO_PORTD,DIO_PIN0,&input); // read the button value
 8b8:	9e 01       	movw	r18, r28
 8ba:	2d 5f       	subi	r18, 0xFD	; 253
 8bc:	3f 4f       	sbci	r19, 0xFF	; 255
 8be:	84 e0       	ldi	r24, 0x04	; 4
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	a9 01       	movw	r20, r18
 8c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <DIO_enumGetPINValue>

		if(!input)
 8c8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ca:	88 23       	and	r24, r24
 8cc:	19 f4       	brne	.+6      	; 0x8d4 <main+0x56>
		{
			ledmod++;  // change the shape of leds
 8ce:	8c 81       	ldd	r24, Y+4	; 0x04
 8d0:	8f 5f       	subi	r24, 0xFF	; 255
 8d2:	8c 83       	std	Y+4, r24	; 0x04
		else
		{
				// empty
		}
		// switch on leds shapes
		switch(ledmod)
 8d4:	8c 81       	ldd	r24, Y+4	; 0x04
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	3e 83       	std	Y+6, r19	; 0x06
 8dc:	2d 83       	std	Y+5, r18	; 0x05
 8de:	8d 81       	ldd	r24, Y+5	; 0x05
 8e0:	9e 81       	ldd	r25, Y+6	; 0x06
 8e2:	82 30       	cpi	r24, 0x02	; 2
 8e4:	91 05       	cpc	r25, r1
 8e6:	09 f4       	brne	.+2      	; 0x8ea <main+0x6c>
 8e8:	4d c0       	rjmp	.+154    	; 0x984 <main+0x106>
 8ea:	2d 81       	ldd	r18, Y+5	; 0x05
 8ec:	3e 81       	ldd	r19, Y+6	; 0x06
 8ee:	23 30       	cpi	r18, 0x03	; 3
 8f0:	31 05       	cpc	r19, r1
 8f2:	54 f4       	brge	.+20     	; 0x908 <main+0x8a>
 8f4:	8d 81       	ldd	r24, Y+5	; 0x05
 8f6:	9e 81       	ldd	r25, Y+6	; 0x06
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	c9 f0       	breq	.+50     	; 0x92e <main+0xb0>
 8fc:	2d 81       	ldd	r18, Y+5	; 0x05
 8fe:	3e 81       	ldd	r19, Y+6	; 0x06
 900:	21 30       	cpi	r18, 0x01	; 1
 902:	31 05       	cpc	r19, r1
 904:	f9 f0       	breq	.+62     	; 0x944 <main+0xc6>
 906:	ed c0       	rjmp	.+474    	; 0xae2 <main+0x264>
 908:	8d 81       	ldd	r24, Y+5	; 0x05
 90a:	9e 81       	ldd	r25, Y+6	; 0x06
 90c:	84 30       	cpi	r24, 0x04	; 4
 90e:	91 05       	cpc	r25, r1
 910:	09 f4       	brne	.+2      	; 0x914 <main+0x96>
 912:	8d c0       	rjmp	.+282    	; 0xa2e <main+0x1b0>
 914:	2d 81       	ldd	r18, Y+5	; 0x05
 916:	3e 81       	ldd	r19, Y+6	; 0x06
 918:	24 30       	cpi	r18, 0x04	; 4
 91a:	31 05       	cpc	r19, r1
 91c:	0c f4       	brge	.+2      	; 0x920 <main+0xa2>
 91e:	72 c0       	rjmp	.+228    	; 0xa04 <main+0x186>
 920:	8d 81       	ldd	r24, Y+5	; 0x05
 922:	9e 81       	ldd	r25, Y+6	; 0x06
 924:	85 30       	cpi	r24, 0x05	; 5
 926:	91 05       	cpc	r25, r1
 928:	09 f4       	brne	.+2      	; 0x92c <main+0xae>
 92a:	b7 c0       	rjmp	.+366    	; 0xa9a <main+0x21c>
 92c:	da c0       	rjmp	.+436    	; 0xae2 <main+0x264>
		{
		// All leds on
		case ALLON:
			// turn all leds on
			DIO_enumSetPortValue(DIO_PORTA,DIO_HIGH);
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	61 e0       	ldi	r22, 0x01	; 1
 932:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
			DIO_Delay(60000);// delay to show the effect
 936:	60 e6       	ldi	r22, 0x60	; 96
 938:	7a ee       	ldi	r23, 0xEA	; 234
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
 942:	ba cf       	rjmp	.-140    	; 0x8b8 <main+0x3a>

			break;
		// shift the lighting led lift
		case SHIFT:
		for(i=0;i<=7;i++)
 944:	19 82       	std	Y+1, r1	; 0x01
 946:	1a c0       	rjmp	.+52     	; 0x97c <main+0xfe>
		{
			// set all leds off
			DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
			// turn the led that it's turn
			DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);
 950:	89 81       	ldd	r24, Y+1	; 0x01
 952:	99 27       	eor	r25, r25
 954:	87 fd       	sbrc	r24, 7
 956:	90 95       	com	r25
 958:	fc 01       	movw	r30, r24
 95a:	e0 5a       	subi	r30, 0xA0	; 160
 95c:	ff 4f       	sbci	r31, 0xFF	; 255
 95e:	90 81       	ld	r25, Z
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	69 2f       	mov	r22, r25
 964:	41 e0       	ldi	r20, 0x01	; 1
 966:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>

			DIO_Delay(60000);
 96a:	60 e6       	ldi	r22, 0x60	; 96
 96c:	7a ee       	ldi	r23, 0xEA	; 234
 96e:	80 e0       	ldi	r24, 0x00	; 0
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
			DIO_Delay(60000);// delay to show the effect

			break;
		// shift the lighting led lift
		case SHIFT:
		for(i=0;i<=7;i++)
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	8f 5f       	subi	r24, 0xFF	; 255
 97a:	89 83       	std	Y+1, r24	; 0x01
 97c:	89 81       	ldd	r24, Y+1	; 0x01
 97e:	88 30       	cpi	r24, 0x08	; 8
 980:	1c f3       	brlt	.-58     	; 0x948 <main+0xca>
 982:	9a cf       	rjmp	.-204    	; 0x8b8 <main+0x3a>
		break;
		// ping pong shape
		case PINGPONG :
			// shift the lighting led lift

			for(i=0;i<=7;i++)
 984:	19 82       	std	Y+1, r1	; 0x01
 986:	1a c0       	rjmp	.+52     	; 0x9bc <main+0x13e>
					{
						DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
						DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);
 990:	89 81       	ldd	r24, Y+1	; 0x01
 992:	99 27       	eor	r25, r25
 994:	87 fd       	sbrc	r24, 7
 996:	90 95       	com	r25
 998:	fc 01       	movw	r30, r24
 99a:	e0 5a       	subi	r30, 0xA0	; 160
 99c:	ff 4f       	sbci	r31, 0xFF	; 255
 99e:	90 81       	ld	r25, Z
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	69 2f       	mov	r22, r25
 9a4:	41 e0       	ldi	r20, 0x01	; 1
 9a6:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>
						DIO_Delay(60000);
 9aa:	60 e6       	ldi	r22, 0x60	; 96
 9ac:	7a ee       	ldi	r23, 0xEA	; 234
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
		break;
		// ping pong shape
		case PINGPONG :
			// shift the lighting led lift

			for(i=0;i<=7;i++)
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	89 83       	std	Y+1, r24	; 0x01
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	88 30       	cpi	r24, 0x08	; 8
 9c0:	1c f3       	brlt	.-58     	; 0x988 <main+0x10a>
						DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
						DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);
						DIO_Delay(60000);
					}
			// shift the lighting led right
			for(i=7;i>=0;i--)
 9c2:	87 e0       	ldi	r24, 0x07	; 7
 9c4:	89 83       	std	Y+1, r24	; 0x01
 9c6:	1a c0       	rjmp	.+52     	; 0x9fc <main+0x17e>
					{
				    	DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
 9c8:	81 e0       	ldi	r24, 0x01	; 1
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
						DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	99 27       	eor	r25, r25
 9d4:	87 fd       	sbrc	r24, 7
 9d6:	90 95       	com	r25
 9d8:	fc 01       	movw	r30, r24
 9da:	e0 5a       	subi	r30, 0xA0	; 160
 9dc:	ff 4f       	sbci	r31, 0xFF	; 255
 9de:	90 81       	ld	r25, Z
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	69 2f       	mov	r22, r25
 9e4:	41 e0       	ldi	r20, 0x01	; 1
 9e6:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>
						DIO_Delay(60000);
 9ea:	60 e6       	ldi	r22, 0x60	; 96
 9ec:	7a ee       	ldi	r23, 0xEA	; 234
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
						DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
						DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);
						DIO_Delay(60000);
					}
			// shift the lighting led right
			for(i=7;i>=0;i--)
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	81 50       	subi	r24, 0x01	; 1
 9fa:	89 83       	std	Y+1, r24	; 0x01
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	88 23       	and	r24, r24
 a00:	1c f7       	brge	.-58     	; 0x9c8 <main+0x14a>
 a02:	5a cf       	rjmp	.-332    	; 0x8b8 <main+0x3a>
					}
			break;

		case BLINKALL:
			// turn all leds on
			DIO_enumSetPortValue(DIO_PORTA,DIO_HIGH);
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	61 e0       	ldi	r22, 0x01	; 1
 a08:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
			DIO_Delay(60000);
 a0c:	60 e6       	ldi	r22, 0x60	; 96
 a0e:	7a ee       	ldi	r23, 0xEA	; 234
 a10:	80 e0       	ldi	r24, 0x00	; 0
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
			// turn all leds off
			DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
			DIO_Delay(60000);
 a20:	60 e6       	ldi	r22, 0x60	; 96
 a22:	7a ee       	ldi	r23, 0xEA	; 234
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
 a2c:	45 cf       	rjmp	.-374    	; 0x8b8 <main+0x3a>

			break;

		// turn leds to middle form both sides
		case PNGPONG2:
			for(i=0,j=7;i<=3&&j>=4;i++,j--)
 a2e:	19 82       	std	Y+1, r1	; 0x01
 a30:	87 e0       	ldi	r24, 0x07	; 7
 a32:	8a 83       	std	Y+2, r24	; 0x02
 a34:	2a c0       	rjmp	.+84     	; 0xa8a <main+0x20c>
			{
				// turn the left leds on
				DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);
 a36:	89 81       	ldd	r24, Y+1	; 0x01
 a38:	99 27       	eor	r25, r25
 a3a:	87 fd       	sbrc	r24, 7
 a3c:	90 95       	com	r25
 a3e:	fc 01       	movw	r30, r24
 a40:	e0 5a       	subi	r30, 0xA0	; 160
 a42:	ff 4f       	sbci	r31, 0xFF	; 255
 a44:	90 81       	ld	r25, Z
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	69 2f       	mov	r22, r25
 a4a:	41 e0       	ldi	r20, 0x01	; 1
 a4c:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>
				// turn the right leds on
				DIO_enumSetPINValue(DIO_PORTA,LEDs[j],DIO_HIGH);
 a50:	8a 81       	ldd	r24, Y+2	; 0x02
 a52:	99 27       	eor	r25, r25
 a54:	87 fd       	sbrc	r24, 7
 a56:	90 95       	com	r25
 a58:	fc 01       	movw	r30, r24
 a5a:	e0 5a       	subi	r30, 0xA0	; 160
 a5c:	ff 4f       	sbci	r31, 0xFF	; 255
 a5e:	90 81       	ld	r25, Z
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	69 2f       	mov	r22, r25
 a64:	41 e0       	ldi	r20, 0x01	; 1
 a66:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>
				DIO_Delay(60000);
 a6a:	60 e6       	ldi	r22, 0x60	; 96
 a6c:	7a ee       	ldi	r23, 0xEA	; 234
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
				//turn all leds off
				DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>

			break;

		// turn leds to middle form both sides
		case PNGPONG2:
			for(i=0,j=7;i<=3&&j>=4;i++,j--)
 a7e:	89 81       	ldd	r24, Y+1	; 0x01
 a80:	8f 5f       	subi	r24, 0xFF	; 255
 a82:	89 83       	std	Y+1, r24	; 0x01
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	81 50       	subi	r24, 0x01	; 1
 a88:	8a 83       	std	Y+2, r24	; 0x02
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	84 30       	cpi	r24, 0x04	; 4
 a8e:	0c f0       	brlt	.+2      	; 0xa92 <main+0x214>
 a90:	13 cf       	rjmp	.-474    	; 0x8b8 <main+0x3a>
 a92:	8a 81       	ldd	r24, Y+2	; 0x02
 a94:	84 30       	cpi	r24, 0x04	; 4
 a96:	7c f6       	brge	.-98     	; 0xa36 <main+0x1b8>
 a98:	0f cf       	rjmp	.-482    	; 0x8b8 <main+0x3a>

			break;

		// sanke shape
		case SNAKE :
			DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);// make all leds low
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	60 e0       	ldi	r22, 0x00	; 0
 a9e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
			for(i=0;i<=7;i++)// loop on leds an turn them on one by one
 aa2:	19 82       	std	Y+1, r1	; 0x01
 aa4:	16 c0       	rjmp	.+44     	; 0xad2 <main+0x254>
			{
				DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);// make one led on
 aa6:	89 81       	ldd	r24, Y+1	; 0x01
 aa8:	99 27       	eor	r25, r25
 aaa:	87 fd       	sbrc	r24, 7
 aac:	90 95       	com	r25
 aae:	fc 01       	movw	r30, r24
 ab0:	e0 5a       	subi	r30, 0xA0	; 160
 ab2:	ff 4f       	sbci	r31, 0xFF	; 255
 ab4:	90 81       	ld	r25, Z
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	69 2f       	mov	r22, r25
 aba:	41 e0       	ldi	r20, 0x01	; 1
 abc:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_enumSetPINValue>
				DIO_Delay(60000);// delay to show the effect
 ac0:	60 e6       	ldi	r22, 0x60	; 96
 ac2:	7a ee       	ldi	r23, 0xEA	; 234
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	90 e0       	ldi	r25, 0x00	; 0
 ac8:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
			break;

		// sanke shape
		case SNAKE :
			DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);// make all leds low
			for(i=0;i<=7;i++)// loop on leds an turn them on one by one
 acc:	89 81       	ldd	r24, Y+1	; 0x01
 ace:	8f 5f       	subi	r24, 0xFF	; 255
 ad0:	89 83       	std	Y+1, r24	; 0x01
 ad2:	89 81       	ldd	r24, Y+1	; 0x01
 ad4:	88 30       	cpi	r24, 0x08	; 8
 ad6:	3c f3       	brlt	.-50     	; 0xaa6 <main+0x228>
			{
				DIO_enumSetPINValue(DIO_PORTA,LEDs[i],DIO_HIGH);// make one led on
				DIO_Delay(60000);// delay to show the effect

			}
			DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);// turn all leds off
 ad8:	81 e0       	ldi	r24, 0x01	; 1
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
 ae0:	eb ce       	rjmp	.-554    	; 0x8b8 <main+0x3a>

			break;

default :
	// return to default state
	ledmod=0;
 ae2:	1c 82       	std	Y+4, r1	; 0x04
	//turn all leds off
	DIO_enumSetPortValue(DIO_PORTA,DIO_LOW);
 ae4:	81 e0       	ldi	r24, 0x01	; 1
 ae6:	60 e0       	ldi	r22, 0x00	; 0
 ae8:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_enumSetPortValue>
	DIO_Delay(65000);
 aec:	68 ee       	ldi	r22, 0xE8	; 232
 aee:	7d ef       	ldi	r23, 0xFD	; 253
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 0b 04 	call	0x816	; 0x816 <DIO_Delay>
 af8:	df ce       	rjmp	.-578    	; 0x8b8 <main+0x3a>

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
