
TemperatureSensorLM35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  000022ac  00002320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001884  00000000  00000000  00002458  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000adf  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000047bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  0000493b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00004b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00006b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00007c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00008c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  00008e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  000090f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000999f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2c 10 	call	0x2058	; 0x2058 <main>
      7a:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e8       	ldi	r26, 0x8F	; 143
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e8       	ldi	r24, 0x8F	; 143
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2d 11 	jmp	0x225a	; 0x225a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 25 11 	jmp	0x224a	; 0x224a <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e9 56       	subi	r30, 0x69	; 105
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <ADC_VidInit>:
#include "LIB/Bit_Math.h"
#include "ADC_interface.h"
#include "ADC_prv.h"
#include "ADC_config.h"
void ADC_VidInit(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	// VREF selection() and result adjustment selection
	ADC_ADMUX=(ADC_VREF <<REFS0)|(ADC_RES_ADJUST<<ADLAR);
     cce:	e7 e2       	ldi	r30, 0x27	; 39
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 e4       	ldi	r24, 0x40	; 64
     cd4:	80 83       	st	Z, r24
	// initialization ADC to be enable , Prescaler value =64
	ADC_ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);
     cd6:	e6 e2       	ldi	r30, 0x26	; 38
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	86 e8       	ldi	r24, 0x86	; 134
     cdc:	80 83       	st	Z, r24

}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <ADC_u16GetADCRead>:
u16 ADC_u16GetADCRead(u8 chId)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	0f 92       	push	r0
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	89 83       	std	Y+1, r24	; 0x01
	// make sure that channel index  is within ADC channels (0-7)(first 3 bits)
	chId =  chId & 0b00000111;
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	87 70       	andi	r24, 0x07	; 7
     cf4:	89 83       	std	Y+1, r24	; 0x01
	// clear the first 3 bits before selection the channel ID
	ADC_ADMUX =(ADC_ADMUX & 0xf8)|chId;
     cf6:	a7 e2       	ldi	r26, 0x27	; 39
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e7 e2       	ldi	r30, 0x27	; 39
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	98 2f       	mov	r25, r24
     d02:	98 7f       	andi	r25, 0xF8	; 248
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	89 2b       	or	r24, r25
     d08:	8c 93       	st	X, r24
	// start conversion
	ADC_ADCSRA |= (1<<ADSC);
     d0a:	a6 e2       	ldi	r26, 0x26	; 38
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e6 e2       	ldi	r30, 0x26	; 38
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 64       	ori	r24, 0x40	; 64
     d16:	8c 93       	st	X, r24
	// polling on ADIF flag till conversion is finished
	while ((ADC_ADCSRA& (1<<ADIF))==0);
     d18:	e6 e2       	ldi	r30, 0x26	; 38
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 2f       	mov	r24, r24
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	80 71       	andi	r24, 0x10	; 16
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	b9 f3       	breq	.-18     	; 0xd18 <ADC_u16GetADCRead+0x34>
	return ADC_ADCRES;
     d2a:	e4 e2       	ldi	r30, 0x24	; 36
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
	}
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <ADC_vidEnable>:
void ADC_vidEnable(void)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_ADCSRA,ADEN);
     d42:	a6 e2       	ldi	r26, 0x26	; 38
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e6 e2       	ldi	r30, 0x26	; 38
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 68       	ori	r24, 0x80	; 128
     d4e:	8c 93       	st	X, r24
}
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <ADC_vidDiable>:
void ADC_vidDiable(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADC_ADCSRA,ADEN);
     d5e:	a6 e2       	ldi	r26, 0x26	; 38
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e6 e2       	ldi	r30, 0x26	; 38
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8f 77       	andi	r24, 0x7F	; 127
     d6a:	8c 93       	st	X, r24
	}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <u8ADC_GetTempInC>:
u8 u8ADC_GetTempInC(u16 ADC_Read)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <u8ADC_GetTempInC+0x6>
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
return (u32)(ADC_Read*(5000/1024))/10;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	2a e0       	ldi	r18, 0x0A	; 10
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	b9 01       	movw	r22, r18
     d92:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodhi4>
     d96:	cb 01       	movw	r24, r22
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <u8ADC_GetTempInF>:
u8 u8ADC_GetTempInF(u16 ADC_Read)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <u8ADC_GetTempInF+0x6>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
	return (((u32)(ADC_Read*(5000/1024))/10)*1.8)+32;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	b9 01       	movw	r22, r18
     dc2:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodhi4>
     dc6:	cb 01       	movw	r24, r22
     dc8:	cc 01       	movw	r24, r24
     dca:	a0 e0       	ldi	r26, 0x00	; 0
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	bc 01       	movw	r22, r24
     dd0:	cd 01       	movw	r24, r26
     dd2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	26 e6       	ldi	r18, 0x66	; 102
     de0:	36 e6       	ldi	r19, 0x66	; 102
     de2:	46 ee       	ldi	r20, 0xE6	; 230
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	bc 01       	movw	r22, r24
     df0:	cd 01       	movw	r24, r26
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	52 e4       	ldi	r21, 0x42	; 66
     dfa:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <DIO_VidSetPinDir>:
#include "LIB\Bit_Math.h"
#include "DIO_interface.h"
#include "DIO_prv.h"

void DIO_VidSetPinDir(u8 PinId,u8 PortId,u8 PinDir)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	27 97       	sbiw	r28, 0x07	; 7
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	6a 83       	std	Y+2, r22	; 0x02
     e30:	4b 83       	std	Y+3, r20	; 0x03
if((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	84 30       	cpi	r24, 0x04	; 4
     e36:	08 f0       	brcs	.+2      	; 0xe3a <DIO_VidSetPinDir+0x22>
     e38:	ee c0       	rjmp	.+476    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	88 30       	cpi	r24, 0x08	; 8
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <DIO_VidSetPinDir+0x2a>
     e40:	ea c0       	rjmp	.+468    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
{
if (PinDir == DIO_OUTPUT)
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	09 f0       	breq	.+2      	; 0xe4a <DIO_VidSetPinDir+0x32>
     e48:	6f c0       	rjmp	.+222    	; 0xf28 <DIO_VidSetPinDir+0x110>
{
switch(PortId)
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3f 83       	std	Y+7, r19	; 0x07
     e52:	2e 83       	std	Y+6, r18	; 0x06
     e54:	8e 81       	ldd	r24, Y+6	; 0x06
     e56:	9f 81       	ldd	r25, Y+7	; 0x07
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	49 f1       	breq	.+82     	; 0xeb0 <DIO_VidSetPinDir+0x98>
     e5e:	2e 81       	ldd	r18, Y+6	; 0x06
     e60:	3f 81       	ldd	r19, Y+7	; 0x07
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <DIO_VidSetPinDir+0x5a>
     e68:	8e 81       	ldd	r24, Y+6	; 0x06
     e6a:	9f 81       	ldd	r25, Y+7	; 0x07
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	61 f0       	breq	.+24     	; 0xe88 <DIO_VidSetPinDir+0x70>
     e70:	d2 c0       	rjmp	.+420    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
     e72:	2e 81       	ldd	r18, Y+6	; 0x06
     e74:	3f 81       	ldd	r19, Y+7	; 0x07
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	71 f1       	breq	.+92     	; 0xed8 <DIO_VidSetPinDir+0xc0>
     e7c:	8e 81       	ldd	r24, Y+6	; 0x06
     e7e:	9f 81       	ldd	r25, Y+7	; 0x07
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	e9 f1       	breq	.+122    	; 0xf00 <DIO_VidSetPinDir+0xe8>
     e86:	c7 c0       	rjmp	.+398    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
{
case DIO_PORTA :SET_BIT(DDRA_REG,PinId); break;
     e88:	aa e3       	ldi	r26, 0x3A	; 58
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ea e3       	ldi	r30, 0x3A	; 58
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_VidSetPinDir+0x8e>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_VidSetPinDir+0x8a>
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	b3 c0       	rjmp	.+358    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
case DIO_PORTB :SET_BIT(DDRB_REG,PinId); break;
     eb0:	a7 e3       	ldi	r26, 0x37	; 55
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e7 e3       	ldi	r30, 0x37	; 55
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_VidSetPinDir+0xb6>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_VidSetPinDir+0xb2>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	9f c0       	rjmp	.+318    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
case DIO_PORTC :SET_BIT(DDRC_REG,PinId); break;
     ed8:	a4 e3       	ldi	r26, 0x34	; 52
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e4 e3       	ldi	r30, 0x34	; 52
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_VidSetPinDir+0xde>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_VidSetPinDir+0xda>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	8b c0       	rjmp	.+278    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
case DIO_PORTD :SET_BIT(DDRD_REG,PinId); break;
     f00:	a1 e3       	ldi	r26, 0x31	; 49
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e1 e3       	ldi	r30, 0x31	; 49
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_VidSetPinDir+0x106>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_VidSetPinDir+0x102>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	77 c0       	rjmp	.+238    	; 0x1016 <DIO_VidSetPinDir+0x1fe>

}


}
else if (PinDir == DIO_INPUT)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 23       	and	r24, r24
     f2c:	09 f0       	breq	.+2      	; 0xf30 <DIO_VidSetPinDir+0x118>
     f2e:	73 c0       	rjmp	.+230    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
{
switch(PortId)
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3d 83       	std	Y+5, r19	; 0x05
     f38:	2c 83       	std	Y+4, r18	; 0x04
     f3a:	8c 81       	ldd	r24, Y+4	; 0x04
     f3c:	9d 81       	ldd	r25, Y+5	; 0x05
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	59 f1       	breq	.+86     	; 0xf9a <DIO_VidSetPinDir+0x182>
     f44:	2c 81       	ldd	r18, Y+4	; 0x04
     f46:	3d 81       	ldd	r19, Y+5	; 0x05
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <DIO_VidSetPinDir+0x140>
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	9d 81       	ldd	r25, Y+5	; 0x05
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f0       	breq	.+26     	; 0xf70 <DIO_VidSetPinDir+0x158>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
     f58:	2c 81       	ldd	r18, Y+4	; 0x04
     f5a:	3d 81       	ldd	r19, Y+5	; 0x05
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	89 f1       	breq	.+98     	; 0xfc4 <DIO_VidSetPinDir+0x1ac>
     f62:	8c 81       	ldd	r24, Y+4	; 0x04
     f64:	9d 81       	ldd	r25, Y+5	; 0x05
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <DIO_VidSetPinDir+0x156>
     f6c:	40 c0       	rjmp	.+128    	; 0xfee <DIO_VidSetPinDir+0x1d6>
     f6e:	53 c0       	rjmp	.+166    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
{
case DIO_PORTA :CLR_BIT(DDRA_REG,PinId); break;
     f70:	aa e3       	ldi	r26, 0x3A	; 58
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	ea e3       	ldi	r30, 0x3A	; 58
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_VidSetPinDir+0x176>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_VidSetPinDir+0x172>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	3e c0       	rjmp	.+124    	; 0x1016 <DIO_VidSetPinDir+0x1fe>
case DIO_PORTB :CLR_BIT(DDRB_REG,PinId); break;
     f9a:	a7 e3       	ldi	r26, 0x37	; 55
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e7 e3       	ldi	r30, 0x37	; 55
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_VidSetPinDir+0x1a0>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_VidSetPinDir+0x19c>
     fbc:	80 95       	com	r24
     fbe:	84 23       	and	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <DIO_VidSetPinDir+0x1fe>
case DIO_PORTC :CLR_BIT(DDRC_REG,PinId); break;
     fc4:	a4 e3       	ldi	r26, 0x34	; 52
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e3       	ldi	r30, 0x34	; 52
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_VidSetPinDir+0x1ca>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_VidSetPinDir+0x1c6>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	14 c0       	rjmp	.+40     	; 0x1016 <DIO_VidSetPinDir+0x1fe>
case DIO_PORTD :CLR_BIT(DDRD_REG,PinId); break;
     fee:	a1 e3       	ldi	r26, 0x31	; 49
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e1 e3       	ldi	r30, 0x31	; 49
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_VidSetPinDir+0x1f4>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_VidSetPinDir+0x1f0>
    1010:	80 95       	com	r24
    1012:	84 23       	and	r24, r20
    1014:	8c 93       	st	X, r24
}
else
{
// error
}
}
    1016:	27 96       	adiw	r28, 0x07	; 7
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_VidSetPinVal>:
void DIO_VidSetPinVal(u8 PinId,u8 PortId,u8 PinVal)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	27 97       	sbiw	r28, 0x07	; 7
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
    1040:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	08 f0       	brcs	.+2      	; 0x104a <DIO_VidSetPinVal+0x22>
    1048:	ee c0       	rjmp	.+476    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 30       	cpi	r24, 0x08	; 8
    104e:	08 f0       	brcs	.+2      	; 0x1052 <DIO_VidSetPinVal+0x2a>
    1050:	ea c0       	rjmp	.+468    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	{
	if (PinVal == DIO_OUTPUT)
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <DIO_VidSetPinVal+0x32>
    1058:	6f c0       	rjmp	.+222    	; 0x1138 <DIO_VidSetPinVal+0x110>
	{
	switch(PortId)
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3f 83       	std	Y+7, r19	; 0x07
    1062:	2e 83       	std	Y+6, r18	; 0x06
    1064:	8e 81       	ldd	r24, Y+6	; 0x06
    1066:	9f 81       	ldd	r25, Y+7	; 0x07
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	49 f1       	breq	.+82     	; 0x10c0 <DIO_VidSetPinVal+0x98>
    106e:	2e 81       	ldd	r18, Y+6	; 0x06
    1070:	3f 81       	ldd	r19, Y+7	; 0x07
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	2c f4       	brge	.+10     	; 0x1082 <DIO_VidSetPinVal+0x5a>
    1078:	8e 81       	ldd	r24, Y+6	; 0x06
    107a:	9f 81       	ldd	r25, Y+7	; 0x07
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	61 f0       	breq	.+24     	; 0x1098 <DIO_VidSetPinVal+0x70>
    1080:	d2 c0       	rjmp	.+420    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
    1082:	2e 81       	ldd	r18, Y+6	; 0x06
    1084:	3f 81       	ldd	r19, Y+7	; 0x07
    1086:	22 30       	cpi	r18, 0x02	; 2
    1088:	31 05       	cpc	r19, r1
    108a:	71 f1       	breq	.+92     	; 0x10e8 <DIO_VidSetPinVal+0xc0>
    108c:	8e 81       	ldd	r24, Y+6	; 0x06
    108e:	9f 81       	ldd	r25, Y+7	; 0x07
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	91 05       	cpc	r25, r1
    1094:	e9 f1       	breq	.+122    	; 0x1110 <DIO_VidSetPinVal+0xe8>
    1096:	c7 c0       	rjmp	.+398    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	{
	case DIO_PORTA :SET_BIT(PORTA_REG,PinId);break;
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_VidSetPinVal+0x8e>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_VidSetPinVal+0x8a>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	b3 c0       	rjmp	.+358    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	case DIO_PORTB :SET_BIT(PORTB_REG,PinId); break;
    10c0:	a8 e3       	ldi	r26, 0x38	; 56
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e8 e3       	ldi	r30, 0x38	; 56
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_VidSetPinVal+0xb6>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_VidSetPinVal+0xb2>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	9f c0       	rjmp	.+318    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	case DIO_PORTC :SET_BIT(PORTC_REG,PinId); break;
    10e8:	a5 e3       	ldi	r26, 0x35	; 53
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e3       	ldi	r30, 0x35	; 53
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_VidSetPinVal+0xde>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_VidSetPinVal+0xda>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	8b c0       	rjmp	.+278    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	case DIO_PORTD :SET_BIT(PORTD_REG,PinId);break;
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_VidSetPinVal+0x106>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_VidSetPinVal+0x102>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	77 c0       	rjmp	.+238    	; 0x1226 <DIO_VidSetPinVal+0x1fe>

	}


	}
	else if (PinVal == DIO_INPUT)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 23       	and	r24, r24
    113c:	09 f0       	breq	.+2      	; 0x1140 <DIO_VidSetPinVal+0x118>
    113e:	73 c0       	rjmp	.+230    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	{
	switch(PortId)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3d 83       	std	Y+5, r19	; 0x05
    1148:	2c 83       	std	Y+4, r18	; 0x04
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	59 f1       	breq	.+86     	; 0x11aa <DIO_VidSetPinVal+0x182>
    1154:	2c 81       	ldd	r18, Y+4	; 0x04
    1156:	3d 81       	ldd	r19, Y+5	; 0x05
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <DIO_VidSetPinVal+0x140>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f0       	breq	.+26     	; 0x1180 <DIO_VidSetPinVal+0x158>
    1166:	5f c0       	rjmp	.+190    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	89 f1       	breq	.+98     	; 0x11d4 <DIO_VidSetPinVal+0x1ac>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_VidSetPinVal+0x156>
    117c:	40 c0       	rjmp	.+128    	; 0x11fe <DIO_VidSetPinVal+0x1d6>
    117e:	53 c0       	rjmp	.+166    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	{
	case DIO_PORTA :CLR_BIT(PORTA_REG,PinId); break;
    1180:	ab e3       	ldi	r26, 0x3B	; 59
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e3       	ldi	r30, 0x3B	; 59
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_VidSetPinVal+0x176>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_VidSetPinVal+0x172>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	3e c0       	rjmp	.+124    	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	case DIO_PORTB :CLR_BIT(PORTB_REG,PinId);break;
    11aa:	a8 e3       	ldi	r26, 0x38	; 56
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_VidSetPinVal+0x1a0>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_VidSetPinVal+0x19c>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	29 c0       	rjmp	.+82     	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	case DIO_PORTC :CLR_BIT(PORTC_REG,PinId); break;
    11d4:	a5 e3       	ldi	r26, 0x35	; 53
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e5 e3       	ldi	r30, 0x35	; 53
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_VidSetPinVal+0x1ca>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_VidSetPinVal+0x1c6>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <DIO_VidSetPinVal+0x1fe>
	case DIO_PORTD :CLR_BIT(PORTD_REG,PinId); break;
    11fe:	a2 e3       	ldi	r26, 0x32	; 50
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e2 e3       	ldi	r30, 0x32	; 50
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_VidSetPinVal+0x1f4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_VidSetPinVal+0x1f0>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
	else
	{
	// error
	}

}
    1226:	27 96       	adiw	r28, 0x07	; 7
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_VidSetPortVal>:
void DIO_VidSetPortVal(u8 PortId,u8 PortVal)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_VidSetPortVal+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_VidSetPortVal+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02


		if (PortId <= DIO_PORTD)
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	90 f5       	brcc	.+100    	; 0x12b2 <DIO_VidSetPortVal+0x7a>
		{
		switch(PortId)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	d1 f0       	breq	.+52     	; 0x1296 <DIO_VidSetPortVal+0x5e>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <DIO_VidSetPortVal+0x3e>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_VidSetPortVal+0x54>
    1274:	1e c0       	rjmp	.+60     	; 0x12b2 <DIO_VidSetPortVal+0x7a>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_VidSetPortVal+0x68>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	81 f0       	breq	.+32     	; 0x12aa <DIO_VidSetPortVal+0x72>
    128a:	13 c0       	rjmp	.+38     	; 0x12b2 <DIO_VidSetPortVal+0x7a>
		{
		case DIO_PORTA :PORTA_REG=PortVal; break;
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	0e c0       	rjmp	.+28     	; 0x12b2 <DIO_VidSetPortVal+0x7a>
		case DIO_PORTB :PORTB_REG=PortVal; break;
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	09 c0       	rjmp	.+18     	; 0x12b2 <DIO_VidSetPortVal+0x7a>
		case DIO_PORTC :PORTC_REG=PortVal; break;
    12a0:	e5 e3       	ldi	r30, 0x35	; 53
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	04 c0       	rjmp	.+8      	; 0x12b2 <DIO_VidSetPortVal+0x7a>
		case DIO_PORTD :PORTD_REG=PortVal; break;
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
		}
	else
		{
		//error
		}
}
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <DIO_VidSetPortDir>:


void DIO_VidSetPortDir(u8 PortId,u8 PortDir)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <DIO_VidSetPortDir+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_VidSetPortDir+0x8>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	6a 83       	std	Y+2, r22	; 0x02
if(PortId<=DIO_PORTD)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	84 30       	cpi	r24, 0x04	; 4
    12d4:	90 f5       	brcc	.+100    	; 0x133a <DIO_VidSetPortDir+0x7a>
{
switch(PortId)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3c 83       	std	Y+4, r19	; 0x04
    12de:	2b 83       	std	Y+3, r18	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	d1 f0       	breq	.+52     	; 0x131e <DIO_VidSetPortDir+0x5e>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <DIO_VidSetPortDir+0x3e>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	61 f0       	breq	.+24     	; 0x1314 <DIO_VidSetPortDir+0x54>
    12fc:	1e c0       	rjmp	.+60     	; 0x133a <DIO_VidSetPortDir+0x7a>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <DIO_VidSetPortDir+0x68>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	81 f0       	breq	.+32     	; 0x1332 <DIO_VidSetPortDir+0x72>
    1312:	13 c0       	rjmp	.+38     	; 0x133a <DIO_VidSetPortDir+0x7a>
{
case DIO_PORTA :DDRA_REG=PortDir; break;
    1314:	ea e3       	ldi	r30, 0x3A	; 58
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	0e c0       	rjmp	.+28     	; 0x133a <DIO_VidSetPortDir+0x7a>
case DIO_PORTB :DDRB_REG=PortDir; break;
    131e:	e7 e3       	ldi	r30, 0x37	; 55
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	09 c0       	rjmp	.+18     	; 0x133a <DIO_VidSetPortDir+0x7a>
case DIO_PORTC :DDRC_REG=PortDir; break;
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
    1330:	04 c0       	rjmp	.+8      	; 0x133a <DIO_VidSetPortDir+0x7a>
case DIO_PORTD :DDRD_REG=PortDir; break;
    1332:	e1 e3       	ldi	r30, 0x31	; 49
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
}
else
{
//error
}
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <DIO_u8GetPinVal>:
u8 DIO_u8GetPinVal(u8 PortId,u8 PinId)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_u8GetPinVal+0x6>
    134e:	00 d0       	rcall	.+0      	; 0x1350 <DIO_u8GetPinVal+0x8>
    1350:	00 d0       	rcall	.+0      	; 0x1352 <DIO_u8GetPinVal+0xa>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    1356:	8a 83       	std	Y+2, r24	; 0x02
    1358:	6b 83       	std	Y+3, r22	; 0x03
u8 PinState=0xff;//means wrong input (port id or pin id)
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	89 83       	std	Y+1, r24	; 0x01
if((PortId<=DIO_PORTD)&&(PinId<=DIO_PIN7))
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	84 30       	cpi	r24, 0x04	; 4
    1362:	08 f0       	brcs	.+2      	; 0x1366 <DIO_u8GetPinVal+0x1e>
    1364:	6e c0       	rjmp	.+220    	; 0x1442 <DIO_u8GetPinVal+0xfa>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 30       	cpi	r24, 0x08	; 8
    136a:	08 f0       	brcs	.+2      	; 0x136e <DIO_u8GetPinVal+0x26>
    136c:	6a c0       	rjmp	.+212    	; 0x1442 <DIO_u8GetPinVal+0xfa>
{
	switch(PortId)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	4d 81       	ldd	r20, Y+5	; 0x05
    137a:	5e 81       	ldd	r21, Y+6	; 0x06
    137c:	41 30       	cpi	r20, 0x01	; 1
    137e:	51 05       	cpc	r21, r1
    1380:	41 f1       	breq	.+80     	; 0x13d2 <DIO_u8GetPinVal+0x8a>
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	34 f4       	brge	.+12     	; 0x1398 <DIO_u8GetPinVal+0x50>
    138c:	2d 81       	ldd	r18, Y+5	; 0x05
    138e:	3e 81       	ldd	r19, Y+6	; 0x06
    1390:	21 15       	cp	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	61 f0       	breq	.+24     	; 0x13ae <DIO_u8GetPinVal+0x66>
    1396:	52 c0       	rjmp	.+164    	; 0x143c <DIO_u8GetPinVal+0xf4>
    1398:	4d 81       	ldd	r20, Y+5	; 0x05
    139a:	5e 81       	ldd	r21, Y+6	; 0x06
    139c:	42 30       	cpi	r20, 0x02	; 2
    139e:	51 05       	cpc	r21, r1
    13a0:	51 f1       	breq	.+84     	; 0x13f6 <DIO_u8GetPinVal+0xae>
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	b9 f1       	breq	.+110    	; 0x141a <DIO_u8GetPinVal+0xd2>
    13ac:	47 c0       	rjmp	.+142    	; 0x143c <DIO_u8GetPinVal+0xf4>
	{
	case DIO_PORTA :PinState=GET_BIT(PINA_REG,PinId); break;
    13ae:	e9 e3       	ldi	r30, 0x39	; 57
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	a9 01       	movw	r20, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8GetPinVal+0x7e>
    13c2:	55 95       	asr	r21
    13c4:	47 95       	ror	r20
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8GetPinVal+0x7a>
    13ca:	ca 01       	movw	r24, r20
    13cc:	81 70       	andi	r24, 0x01	; 1
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	35 c0       	rjmp	.+106    	; 0x143c <DIO_u8GetPinVal+0xf4>
	case DIO_PORTB :PinState=GET_BIT(PINB_REG,PinId); break;
    13d2:	e6 e3       	ldi	r30, 0x36	; 54
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a9 01       	movw	r20, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8GetPinVal+0xa2>
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	8a 95       	dec	r24
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8GetPinVal+0x9e>
    13ee:	ca 01       	movw	r24, r20
    13f0:	81 70       	andi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
    13f4:	23 c0       	rjmp	.+70     	; 0x143c <DIO_u8GetPinVal+0xf4>
	case DIO_PORTC :PinState=GET_BIT(PINC_REG,PinId); break;
    13f6:	e3 e3       	ldi	r30, 0x33	; 51
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_u8GetPinVal+0xc6>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_u8GetPinVal+0xc2>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	11 c0       	rjmp	.+34     	; 0x143c <DIO_u8GetPinVal+0xf4>
	case DIO_PORTD :PinState=GET_BIT(PIND_REG,PinId); break;
    141a:	e0 e3       	ldi	r30, 0x30	; 48
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_u8GetPinVal+0xea>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_u8GetPinVal+0xe6>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
	}
	return PinState;
    143c:	59 81       	ldd	r21, Y+1	; 0x01
    143e:	5c 83       	std	Y+4, r21	; 0x04
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <DIO_u8GetPinVal+0xfc>

}
else
{
	return 0; //error
    1442:	1c 82       	std	Y+4, r1	; 0x04
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
}
}
    1446:	26 96       	adiw	r28, 0x06	; 6
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <LCD_vidInit>:
#include "LCD_prv.h"



void LCD_vidInit(void)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	c6 54       	subi	r28, 0x46	; 70
    1466:	d0 40       	sbci	r29, 0x00	; 0
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	fe 01       	movw	r30, r28
    1474:	ed 5b       	subi	r30, 0xBD	; 189
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 ef       	ldi	r26, 0xF0	; 240
    147e:	b1 e4       	ldi	r27, 0x41	; 65
    1480:	80 83       	st	Z, r24
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	a2 83       	std	Z+2, r26	; 0x02
    1486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	8e 01       	movw	r16, r28
    148a:	01 5c       	subi	r16, 0xC1	; 193
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	fe 01       	movw	r30, r28
    1490:	ed 5b       	subi	r30, 0xBD	; 189
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4a ef       	ldi	r20, 0xFA	; 250
    14a2:	54 e4       	ldi	r21, 0x44	; 68
    14a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	80 83       	st	Z, r24
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	a2 83       	std	Z+2, r26	; 0x02
    14b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b6:	fe 01       	movw	r30, r28
    14b8:	ff 96       	adiw	r30, 0x3f	; 63
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	2c f4       	brge	.+10     	; 0x14dc <LCD_vidInit+0x84>
		__ticks = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9e af       	std	Y+62, r25	; 0x3e
    14d8:	8d af       	std	Y+61, r24	; 0x3d
    14da:	46 c0       	rjmp	.+140    	; 0x1568 <LCD_vidInit+0x110>
	else if (__tmp > 65535)
    14dc:	fe 01       	movw	r30, r28
    14de:	ff 96       	adiw	r30, 0x3f	; 63
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	3f ef       	ldi	r19, 0xFF	; 255
    14ec:	4f e7       	ldi	r20, 0x7F	; 127
    14ee:	57 e4       	ldi	r21, 0x47	; 71
    14f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	64 f5       	brge	.+88     	; 0x1550 <LCD_vidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f8:	fe 01       	movw	r30, r28
    14fa:	ed 5b       	subi	r30, 0xBD	; 189
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	60 81       	ld	r22, Z
    1500:	71 81       	ldd	r23, Z+1	; 0x01
    1502:	82 81       	ldd	r24, Z+2	; 0x02
    1504:	93 81       	ldd	r25, Z+3	; 0x03
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	51 e4       	ldi	r21, 0x41	; 65
    150e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	9e af       	std	Y+62, r25	; 0x3e
    1524:	8d af       	std	Y+61, r24	; 0x3d
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <LCD_vidInit+0xee>
    1528:	88 ec       	ldi	r24, 0xC8	; 200
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c af       	std	Y+60, r25	; 0x3c
    152e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1530:	8b ad       	ldd	r24, Y+59	; 0x3b
    1532:	9c ad       	ldd	r25, Y+60	; 0x3c
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <LCD_vidInit+0xdc>
    1538:	9c af       	std	Y+60, r25	; 0x3c
    153a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153c:	8d ad       	ldd	r24, Y+61	; 0x3d
    153e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	9e af       	std	Y+62, r25	; 0x3e
    1544:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	8d ad       	ldd	r24, Y+61	; 0x3d
    1548:	9e ad       	ldd	r25, Y+62	; 0x3e
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f7       	brne	.-38     	; 0x1528 <LCD_vidInit+0xd0>
    154e:	16 c0       	rjmp	.+44     	; 0x157c <LCD_vidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1550:	fe 01       	movw	r30, r28
    1552:	ff 96       	adiw	r30, 0x3f	; 63
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	82 81       	ldd	r24, Z+2	; 0x02
    155a:	93 81       	ldd	r25, Z+3	; 0x03
    155c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9e af       	std	Y+62, r25	; 0x3e
    1566:	8d af       	std	Y+61, r24	; 0x3d
    1568:	8d ad       	ldd	r24, Y+61	; 0x3d
    156a:	9e ad       	ldd	r25, Y+62	; 0x3e
    156c:	9a af       	std	Y+58, r25	; 0x3a
    156e:	89 af       	std	Y+57, r24	; 0x39
    1570:	89 ad       	ldd	r24, Y+57	; 0x39
    1572:	9a ad       	ldd	r25, Y+58	; 0x3a
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <LCD_vidInit+0x11c>
    1578:	9a af       	std	Y+58, r25	; 0x3a
    157a:	89 af       	std	Y+57, r24	; 0x39
//delay for 30 ms to ensure LCD uc initialization
_delay_ms(30);
// set the LCD  8bit data , 2-line display , 5x7 font*/
LCD_vidSendCommand(LCD_FUNCSET_8BIT);
    157c:	88 e3       	ldi	r24, 0x38	; 56
    157e:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a0 e8       	ldi	r26, 0x80	; 128
    1588:	bf e3       	ldi	r27, 0x3F	; 63
    158a:	8d ab       	std	Y+53, r24	; 0x35
    158c:	9e ab       	std	Y+54, r25	; 0x36
    158e:	af ab       	std	Y+55, r26	; 0x37
    1590:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	6d a9       	ldd	r22, Y+53	; 0x35
    1594:	7e a9       	ldd	r23, Y+54	; 0x36
    1596:	8f a9       	ldd	r24, Y+55	; 0x37
    1598:	98 ad       	ldd	r25, Y+56	; 0x38
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a ef       	ldi	r20, 0xFA	; 250
    15a0:	54 e4       	ldi	r21, 0x44	; 68
    15a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	89 ab       	std	Y+49, r24	; 0x31
    15ac:	9a ab       	std	Y+50, r25	; 0x32
    15ae:	ab ab       	std	Y+51, r26	; 0x33
    15b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15b2:	69 a9       	ldd	r22, Y+49	; 0x31
    15b4:	7a a9       	ldd	r23, Y+50	; 0x32
    15b6:	8b a9       	ldd	r24, Y+51	; 0x33
    15b8:	9c a9       	ldd	r25, Y+52	; 0x34
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <LCD_vidInit+0x17c>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	98 ab       	std	Y+48, r25	; 0x30
    15d0:	8f a7       	std	Y+47, r24	; 0x2f
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <LCD_vidInit+0x1fa>
	else if (__tmp > 65535)
    15d4:	69 a9       	ldd	r22, Y+49	; 0x31
    15d6:	7a a9       	ldd	r23, Y+50	; 0x32
    15d8:	8b a9       	ldd	r24, Y+51	; 0x33
    15da:	9c a9       	ldd	r25, Y+52	; 0x34
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <LCD_vidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	6d a9       	ldd	r22, Y+53	; 0x35
    15ee:	7e a9       	ldd	r23, Y+54	; 0x36
    15f0:	8f a9       	ldd	r24, Y+55	; 0x37
    15f2:	98 ad       	ldd	r25, Y+56	; 0x38
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	98 ab       	std	Y+48, r25	; 0x30
    1612:	8f a7       	std	Y+47, r24	; 0x2f
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <LCD_vidInit+0x1dc>
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9e a7       	std	Y+46, r25	; 0x2e
    161c:	8d a7       	std	Y+45, r24	; 0x2d
    161e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1620:	9e a5       	ldd	r25, Y+46	; 0x2e
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_vidInit+0x1ca>
    1626:	9e a7       	std	Y+46, r25	; 0x2e
    1628:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	8f a5       	ldd	r24, Y+47	; 0x2f
    162c:	98 a9       	ldd	r25, Y+48	; 0x30
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	98 ab       	std	Y+48, r25	; 0x30
    1632:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	8f a5       	ldd	r24, Y+47	; 0x2f
    1636:	98 a9       	ldd	r25, Y+48	; 0x30
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <LCD_vidInit+0x1be>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <LCD_vidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	69 a9       	ldd	r22, Y+49	; 0x31
    1640:	7a a9       	ldd	r23, Y+50	; 0x32
    1642:	8b a9       	ldd	r24, Y+51	; 0x33
    1644:	9c a9       	ldd	r25, Y+52	; 0x34
    1646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	98 ab       	std	Y+48, r25	; 0x30
    1650:	8f a7       	std	Y+47, r24	; 0x2f
    1652:	8f a5       	ldd	r24, Y+47	; 0x2f
    1654:	98 a9       	ldd	r25, Y+48	; 0x30
    1656:	9c a7       	std	Y+44, r25	; 0x2c
    1658:	8b a7       	std	Y+43, r24	; 0x2b
    165a:	8b a5       	ldd	r24, Y+43	; 0x2b
    165c:	9c a5       	ldd	r25, Y+44	; 0x2c
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_vidInit+0x206>
    1662:	9c a7       	std	Y+44, r25	; 0x2c
    1664:	8b a7       	std	Y+43, r24	; 0x2b

_delay_ms(1);
//display on/off
LCD_vidSendCommand(LCD_DISPON_CURSBLINK);
    1666:	8f e0       	ldi	r24, 0x0F	; 15
    1668:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e7       	ldi	r26, 0x70	; 112
    1672:	b1 e4       	ldi	r27, 0x41	; 65
    1674:	8f a3       	std	Y+39, r24	; 0x27
    1676:	98 a7       	std	Y+40, r25	; 0x28
    1678:	a9 a7       	std	Y+41, r26	; 0x29
    167a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	6f a1       	ldd	r22, Y+39	; 0x27
    167e:	78 a5       	ldd	r23, Y+40	; 0x28
    1680:	89 a5       	ldd	r24, Y+41	; 0x29
    1682:	9a a5       	ldd	r25, Y+42	; 0x2a
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8b a3       	std	Y+35, r24	; 0x23
    1696:	9c a3       	std	Y+36, r25	; 0x24
    1698:	ad a3       	std	Y+37, r26	; 0x25
    169a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    169c:	6b a1       	ldd	r22, Y+35	; 0x23
    169e:	7c a1       	ldd	r23, Y+36	; 0x24
    16a0:	8d a1       	ldd	r24, Y+37	; 0x25
    16a2:	9e a1       	ldd	r25, Y+38	; 0x26
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <LCD_vidInit+0x266>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9a a3       	std	Y+34, r25	; 0x22
    16ba:	89 a3       	std	Y+33, r24	; 0x21
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <LCD_vidInit+0x2e4>
	else if (__tmp > 65535)
    16be:	6b a1       	ldd	r22, Y+35	; 0x23
    16c0:	7c a1       	ldd	r23, Y+36	; 0x24
    16c2:	8d a1       	ldd	r24, Y+37	; 0x25
    16c4:	9e a1       	ldd	r25, Y+38	; 0x26
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <LCD_vidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	6f a1       	ldd	r22, Y+39	; 0x27
    16d8:	78 a5       	ldd	r23, Y+40	; 0x28
    16da:	89 a5       	ldd	r24, Y+41	; 0x29
    16dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9a a3       	std	Y+34, r25	; 0x22
    16fc:	89 a3       	std	Y+33, r24	; 0x21
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <LCD_vidInit+0x2c6>
    1700:	88 ec       	ldi	r24, 0xC8	; 200
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	98 a3       	std	Y+32, r25	; 0x20
    1706:	8f 8f       	std	Y+31, r24	; 0x1f
    1708:	8f 8d       	ldd	r24, Y+31	; 0x1f
    170a:	98 a1       	ldd	r25, Y+32	; 0x20
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_vidInit+0x2b4>
    1710:	98 a3       	std	Y+32, r25	; 0x20
    1712:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	89 a1       	ldd	r24, Y+33	; 0x21
    1716:	9a a1       	ldd	r25, Y+34	; 0x22
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9a a3       	std	Y+34, r25	; 0x22
    171c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	89 a1       	ldd	r24, Y+33	; 0x21
    1720:	9a a1       	ldd	r25, Y+34	; 0x22
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <LCD_vidInit+0x2a8>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <LCD_vidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6b a1       	ldd	r22, Y+35	; 0x23
    172a:	7c a1       	ldd	r23, Y+36	; 0x24
    172c:	8d a1       	ldd	r24, Y+37	; 0x25
    172e:	9e a1       	ldd	r25, Y+38	; 0x26
    1730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9a a3       	std	Y+34, r25	; 0x22
    173a:	89 a3       	std	Y+33, r24	; 0x21
    173c:	89 a1       	ldd	r24, Y+33	; 0x21
    173e:	9a a1       	ldd	r25, Y+34	; 0x22
    1740:	9e 8f       	std	Y+30, r25	; 0x1e
    1742:	8d 8f       	std	Y+29, r24	; 0x1d
    1744:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1746:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_vidInit+0x2f0>
    174c:	9e 8f       	std	Y+30, r25	; 0x1e
    174e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(15);

//return home (return cursor to the first position)
LCD_vidSendCommand(LCD_HOME);
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a0 e7       	ldi	r26, 0x70	; 112
    175c:	b1 e4       	ldi	r27, 0x41	; 65
    175e:	89 8f       	std	Y+25, r24	; 0x19
    1760:	9a 8f       	std	Y+26, r25	; 0x1a
    1762:	ab 8f       	std	Y+27, r26	; 0x1b
    1764:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1766:	69 8d       	ldd	r22, Y+25	; 0x19
    1768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    176c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a ef       	ldi	r20, 0xFA	; 250
    1774:	54 e4       	ldi	r21, 0x44	; 68
    1776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8d 8b       	std	Y+21, r24	; 0x15
    1780:	9e 8b       	std	Y+22, r25	; 0x16
    1782:	af 8b       	std	Y+23, r26	; 0x17
    1784:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1786:	6d 89       	ldd	r22, Y+21	; 0x15
    1788:	7e 89       	ldd	r23, Y+22	; 0x16
    178a:	8f 89       	ldd	r24, Y+23	; 0x17
    178c:	98 8d       	ldd	r25, Y+24	; 0x18
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    179a:	88 23       	and	r24, r24
    179c:	2c f4       	brge	.+10     	; 0x17a8 <LCD_vidInit+0x350>
		__ticks = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c 8b       	std	Y+20, r25	; 0x14
    17a4:	8b 8b       	std	Y+19, r24	; 0x13
    17a6:	3f c0       	rjmp	.+126    	; 0x1826 <LCD_vidInit+0x3ce>
	else if (__tmp > 65535)
    17a8:	6d 89       	ldd	r22, Y+21	; 0x15
    17aa:	7e 89       	ldd	r23, Y+22	; 0x16
    17ac:	8f 89       	ldd	r24, Y+23	; 0x17
    17ae:	98 8d       	ldd	r25, Y+24	; 0x18
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	4c f5       	brge	.+82     	; 0x1812 <LCD_vidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	69 8d       	ldd	r22, Y+25	; 0x19
    17c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9c 8b       	std	Y+20, r25	; 0x14
    17e6:	8b 8b       	std	Y+19, r24	; 0x13
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <LCD_vidInit+0x3b0>
    17ea:	88 ec       	ldi	r24, 0xC8	; 200
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9a 8b       	std	Y+18, r25	; 0x12
    17f0:	89 8b       	std	Y+17, r24	; 0x11
    17f2:	89 89       	ldd	r24, Y+17	; 0x11
    17f4:	9a 89       	ldd	r25, Y+18	; 0x12
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_vidInit+0x39e>
    17fa:	9a 8b       	std	Y+18, r25	; 0x12
    17fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	9c 8b       	std	Y+20, r25	; 0x14
    1806:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	8b 89       	ldd	r24, Y+19	; 0x13
    180a:	9c 89       	ldd	r25, Y+20	; 0x14
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f7       	brne	.-38     	; 0x17ea <LCD_vidInit+0x392>
    1810:	14 c0       	rjmp	.+40     	; 0x183a <LCD_vidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	6d 89       	ldd	r22, Y+21	; 0x15
    1814:	7e 89       	ldd	r23, Y+22	; 0x16
    1816:	8f 89       	ldd	r24, Y+23	; 0x17
    1818:	98 8d       	ldd	r25, Y+24	; 0x18
    181a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9c 8b       	std	Y+20, r25	; 0x14
    1824:	8b 8b       	std	Y+19, r24	; 0x13
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	98 8b       	std	Y+16, r25	; 0x10
    182c:	8f 87       	std	Y+15, r24	; 0x0f
    182e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1830:	98 89       	ldd	r25, Y+16	; 0x10
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_vidInit+0x3da>
    1836:	98 8b       	std	Y+16, r25	; 0x10
    1838:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(15);
// enter set command (shift cursor from left to right on read/write)
LCD_vidSendCommand(LCD_ENTRYMODE);
    183a:	86 e0       	ldi	r24, 0x06	; 6
    183c:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 e0       	ldi	r26, 0x00	; 0
    1846:	b0 e4       	ldi	r27, 0x40	; 64
    1848:	8b 87       	std	Y+11, r24	; 0x0b
    184a:	9c 87       	std	Y+12, r25	; 0x0c
    184c:	ad 87       	std	Y+13, r26	; 0x0d
    184e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1850:	6b 85       	ldd	r22, Y+11	; 0x0b
    1852:	7c 85       	ldd	r23, Y+12	; 0x0c
    1854:	8d 85       	ldd	r24, Y+13	; 0x0d
    1856:	9e 85       	ldd	r25, Y+14	; 0x0e
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	4a ef       	ldi	r20, 0xFA	; 250
    185e:	54 e4       	ldi	r21, 0x44	; 68
    1860:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	8f 83       	std	Y+7, r24	; 0x07
    186a:	98 87       	std	Y+8, r25	; 0x08
    186c:	a9 87       	std	Y+9, r26	; 0x09
    186e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e8       	ldi	r20, 0x80	; 128
    187e:	5f e3       	ldi	r21, 0x3F	; 63
    1880:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1884:	88 23       	and	r24, r24
    1886:	2c f4       	brge	.+10     	; 0x1892 <LCD_vidInit+0x43a>
		__ticks = 1;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	3f c0       	rjmp	.+126    	; 0x1910 <LCD_vidInit+0x4b8>
	else if (__tmp > 65535)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f e7       	ldi	r20, 0x7F	; 127
    18a0:	57 e4       	ldi	r21, 0x47	; 71
    18a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18a6:	18 16       	cp	r1, r24
    18a8:	4c f5       	brge	.+82     	; 0x18fc <LCD_vidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e2       	ldi	r20, 0x20	; 32
    18b8:	51 e4       	ldi	r21, 0x41	; 65
    18ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	0f c0       	rjmp	.+30     	; 0x18f2 <LCD_vidInit+0x49a>
    18d4:	88 ec       	ldi	r24, 0xC8	; 200
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_vidInit+0x488>
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	9e 81       	ldd	r25, Y+6	; 0x06
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	69 f7       	brne	.-38     	; 0x18d4 <LCD_vidInit+0x47c>
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <LCD_vidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	9e 83       	std	Y+6, r25	; 0x06
    190e:	8d 83       	std	Y+5, r24	; 0x05
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	f1 f7       	brne	.-4      	; 0x191c <LCD_vidInit+0x4c4>
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);

}
    1924:	ca 5b       	subi	r28, 0xBA	; 186
    1926:	df 4f       	sbci	r29, 0xFF	; 255
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	de bf       	out	0x3e, r29	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	cd bf       	out	0x3d, r28	; 61
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <LCD_vidSendCommand>:
void LCD_vidSendCommand(u8 u8Cmd)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	6d 97       	sbiw	r28, 0x1d	; 29
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	8d 8f       	std	Y+29, r24	; 0x1d
	// clear RS pin
DIO_VidSetPinVal(LCD_RS_PIN,LCD_CONTROL_PORT,DIO_LOW);
    1952:	87 e0       	ldi	r24, 0x07	; 7
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
// clear RW pin
DIO_VidSetPinVal(LCD_RW_PIN,LCD_CONTROL_PORT,DIO_LOW);
    195c:	86 e0       	ldi	r24, 0x06	; 6
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
// Set enable pin to high
DIO_VidSetPinVal(LCD_EN_PIN,LCD_CONTROL_PORT,DIO_HIGH);
    1966:	85 e0       	ldi	r24, 0x05	; 5
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
// load commAND to the data port
DIO_VidSetPortVal(LCD_DATA_PORT,u8Cmd);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1974:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
// clear enable pin
DIO_VidSetPinVal(LCD_EN_PIN,LCD_CONTROL_PORT,DIO_LOW);
    1978:	85 e0       	ldi	r24, 0x05	; 5
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 ea       	ldi	r26, 0xA0	; 160
    1988:	b0 e4       	ldi	r27, 0x40	; 64
    198a:	89 8f       	std	Y+25, r24	; 0x19
    198c:	9a 8f       	std	Y+26, r25	; 0x1a
    198e:	ab 8f       	std	Y+27, r26	; 0x1b
    1990:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	69 8d       	ldd	r22, Y+25	; 0x19
    1994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8d 8b       	std	Y+21, r24	; 0x15
    19ac:	9e 8b       	std	Y+22, r25	; 0x16
    19ae:	af 8b       	std	Y+23, r26	; 0x17
    19b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <LCD_vidSendCommand+0x98>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <LCD_vidSendCommand+0x116>
	else if (__tmp > 65535)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <LCD_vidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	69 8d       	ldd	r22, Y+25	; 0x19
    19ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_vidSendCommand+0xf8>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
    1a1e:	89 89       	ldd	r24, Y+17	; 0x11
    1a20:	9a 89       	ldd	r25, Y+18	; 0x12
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_vidSendCommand+0xe6>
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_vidSendCommand+0xda>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <LCD_vidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
    1a52:	8b 89       	ldd	r24, Y+19	; 0x13
    1a54:	9c 89       	ldd	r25, Y+20	; 0x14
    1a56:	98 8b       	std	Y+16, r25	; 0x10
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 89       	ldd	r25, Y+16	; 0x10
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_vidSendCommand+0x122>
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(5);
// Set enable pin to high
DIO_VidSetPinVal(LCD_EN_PIN,LCD_CONTROL_PORT,DIO_HIGH);
    1a66:	85 e0       	ldi	r24, 0x05	; 5
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a0 e2       	ldi	r26, 0x20	; 32
    1a76:	b1 e4       	ldi	r27, 0x41	; 65
    1a78:	8b 87       	std	Y+11, r24	; 0x0b
    1a7a:	9c 87       	std	Y+12, r25	; 0x0c
    1a7c:	ad 87       	std	Y+13, r26	; 0x0d
    1a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a ef       	ldi	r20, 0xFA	; 250
    1a8e:	54 e4       	ldi	r21, 0x44	; 68
    1a90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8f 83       	std	Y+7, r24	; 0x07
    1a9a:	98 87       	std	Y+8, r25	; 0x08
    1a9c:	a9 87       	std	Y+9, r26	; 0x09
    1a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <LCD_vidSendCommand+0x186>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <LCD_vidSendCommand+0x204>
	else if (__tmp > 65535)
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	4c f5       	brge	.+82     	; 0x1b2c <LCD_vidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    1adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <LCD_vidSendCommand+0x1e6>
    1b04:	88 ec       	ldi	r24, 0xC8	; 200
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9c 83       	std	Y+4, r25	; 0x04
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_vidSendCommand+0x1d4>
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <LCD_vidSendCommand+0x1c8>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <LCD_vidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <LCD_vidSendCommand+0x210>
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(10);

}
    1b54:	6d 96       	adiw	r28, 0x1d	; 29
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <LCD_vidSendChar>:
void LCD_vidSendChar(u8 u8Char)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	6d 97       	sbiw	r28, 0x1d	; 29
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set RS pin to high
	DIO_VidSetPinVal(LCD_RS_PIN,LCD_CONTROL_PORT,DIO_HIGH);
    1b7c:	87 e0       	ldi	r24, 0x07	; 7
    1b7e:	61 e0       	ldi	r22, 0x01	; 1
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
	// clear RW pin
	DIO_VidSetPinVal(LCD_RW_PIN,LCD_CONTROL_PORT,DIO_LOW);
    1b86:	86 e0       	ldi	r24, 0x06	; 6
    1b88:	61 e0       	ldi	r22, 0x01	; 1
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
	// Set enable pin to high
	DIO_VidSetPinVal(LCD_EN_PIN,LCD_CONTROL_PORT,DIO_HIGH);
    1b90:	85 e0       	ldi	r24, 0x05	; 5
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
	// load character to the data port
	DIO_VidSetPortVal(LCD_DATA_PORT,u8Char);
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b9e:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
	// clear enable pin
	DIO_VidSetPinVal(LCD_EN_PIN,LCD_CONTROL_PORT,DIO_LOW);
    1ba2:	85 e0       	ldi	r24, 0x05	; 5
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 ea       	ldi	r26, 0xA0	; 160
    1bb2:	b0 e4       	ldi	r27, 0x40	; 64
    1bb4:	89 8f       	std	Y+25, r24	; 0x19
    1bb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a ef       	ldi	r20, 0xFA	; 250
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8d 8b       	std	Y+21, r24	; 0x15
    1bd6:	9e 8b       	std	Y+22, r25	; 0x16
    1bd8:	af 8b       	std	Y+23, r26	; 0x17
    1bda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <LCD_vidSendChar+0x98>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <LCD_vidSendChar+0x116>
	else if (__tmp > 65535)
    1bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1c00:	7e 89       	ldd	r23, Y+22	; 0x16
    1c02:	8f 89       	ldd	r24, Y+23	; 0x17
    1c04:	98 8d       	ldd	r25, Y+24	; 0x18
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <LCD_vidSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	69 8d       	ldd	r22, Y+25	; 0x19
    1c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <LCD_vidSendChar+0xf8>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a 8b       	std	Y+18, r25	; 0x12
    1c46:	89 8b       	std	Y+17, r24	; 0x11
    1c48:	89 89       	ldd	r24, Y+17	; 0x11
    1c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_vidSendChar+0xe6>
    1c50:	9a 8b       	std	Y+18, r25	; 0x12
    1c52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c60:	9c 89       	ldd	r25, Y+20	; 0x14
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <LCD_vidSendChar+0xda>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <LCD_vidSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	98 8b       	std	Y+16, r25	; 0x10
    1c82:	8f 87       	std	Y+15, r24	; 0x0f
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	98 89       	ldd	r25, Y+16	; 0x10
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_vidSendChar+0x122>
    1c8c:	98 8b       	std	Y+16, r25	; 0x10
    1c8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	//clear en pin
	DIO_VidSetPinVal(LCD_EN_PIN,LCD_CONTROL_PORT,DIO_HIGH);
    1c90:	85 e0       	ldi	r24, 0x05	; 5
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	41 e0       	ldi	r20, 0x01	; 1
    1c96:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e2       	ldi	r26, 0x20	; 32
    1ca0:	b1 e4       	ldi	r27, 0x41	; 65
    1ca2:	8b 87       	std	Y+11, r24	; 0x0b
    1ca4:	9c 87       	std	Y+12, r25	; 0x0c
    1ca6:	ad 87       	std	Y+13, r26	; 0x0d
    1ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a ef       	ldi	r20, 0xFA	; 250
    1cb8:	54 e4       	ldi	r21, 0x44	; 68
    1cba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8f 83       	std	Y+7, r24	; 0x07
    1cc4:	98 87       	std	Y+8, r25	; 0x08
    1cc6:	a9 87       	std	Y+9, r26	; 0x09
    1cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <LCD_vidSendChar+0x186>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <LCD_vidSendChar+0x204>
	else if (__tmp > 65535)
    1cec:	6f 81       	ldd	r22, Y+7	; 0x07
    1cee:	78 85       	ldd	r23, Y+8	; 0x08
    1cf0:	89 85       	ldd	r24, Y+9	; 0x09
    1cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <LCD_vidSendChar+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <LCD_vidSendChar+0x1e6>
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_vidSendChar+0x1d4>
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <LCD_vidSendChar+0x1c8>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <LCD_vidSendChar+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9e 83       	std	Y+6, r25	; 0x06
    1d68:	8d 83       	std	Y+5, r24	; 0x05
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_vidSendChar+0x210>
    1d7a:	9a 83       	std	Y+2, r25	; 0x02
    1d7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

}
    1d7e:	6d 96       	adiw	r28, 0x1d	; 29
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <LCD_vidWriteStr>:
void LCD_vidWriteStr(u8* pu8str)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <LCD_vidWriteStr+0x6>
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	9b 83       	std	Y+3, r25	; 0x03
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
	// using a pointer to array of characters to send them to the LCD
u8 i =0;
    1da0:	19 82       	std	Y+1, r1	; 0x01
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <LCD_vidWriteStr+0x32>
while(pu8str[i]!=0)
{
LCD_vidSendChar(pu8str[i++]);
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	fc 01       	movw	r30, r24
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	90 81       	ld	r25, Z
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	8f 5f       	subi	r24, 0xFF	; 255
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	89 2f       	mov	r24, r25
    1dbe:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <LCD_vidSendChar>
}
void LCD_vidWriteStr(u8* pu8str)
{
	// using a pointer to array of characters to send them to the LCD
u8 i =0;
while(pu8str[i]!=0)
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e2 0f       	add	r30, r18
    1dd0:	f3 1f       	adc	r31, r19
    1dd2:	80 81       	ld	r24, Z
    1dd4:	88 23       	and	r24, r24
    1dd6:	31 f7       	brne	.-52     	; 0x1da4 <LCD_vidWriteStr+0x14>
{
LCD_vidSendChar(pu8str[i++]);
}
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <LCD_vidCustomchar>:
void LCD_vidCustomchar(u8 LOC,u8* u8toarr)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <LCD_vidCustomchar+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <LCD_vidCustomchar+0x8>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	8a 83       	std	Y+2, r24	; 0x02
    1df2:	7c 83       	std	Y+4, r23	; 0x04
    1df4:	6b 83       	std	Y+3, r22	; 0x03
	// using the CG ROM to store  the char we create as a 8 byte
	//so we take an array of this bytes
	//use 0x40 address to store the character (this in data-sheet) add 8 on it first location and so on ,
	// using the 0x80 to print & 0x40 to store
	u8 i;
	if(LOC<8)
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	88 30       	cpi	r24, 0x08	; 8
    1dfa:	f8 f4       	brcc	.+62     	; 0x1e3a <LCD_vidCustomchar+0x56>
	{
		LCD_vidSendCommand(0x40 + (LOC*8) );
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	88 2f       	mov	r24, r24
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	08 96       	adiw	r24, 0x08	; 8
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
		for(i=0;i<8;i++)
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	0e c0       	rjmp	.+28     	; 0x1e34 <LCD_vidCustomchar+0x50>
		{
		LCD_vidSendChar(u8toarr[i]);
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	fc 01       	movw	r30, r24
    1e24:	e2 0f       	add	r30, r18
    1e26:	f3 1f       	adc	r31, r19
    1e28:	80 81       	ld	r24, Z
    1e2a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <LCD_vidSendChar>
	// using the 0x80 to print & 0x40 to store
	u8 i;
	if(LOC<8)
	{
		LCD_vidSendCommand(0x40 + (LOC*8) );
		for(i=0;i<8;i++)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	88 30       	cpi	r24, 0x08	; 8
    1e38:	78 f3       	brcs	.-34     	; 0x1e18 <LCD_vidCustomchar+0x34>
		{
		LCD_vidSendChar(u8toarr[i]);
		}
	}
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <LCD_vidRowCol>:
void LCD_vidRowCol(u8 u8x ,u8 u8y)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <LCD_vidRowCol+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <LCD_vidRowCol+0x8>
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	6a 83       	std	Y+2, r22	; 0x02
// to choose which row and column to print on it
switch(u8x)
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3c 83       	std	Y+4, r19	; 0x04
    1e60:	2b 83       	std	Y+3, r18	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	31 f0       	breq	.+12     	; 0x1e76 <LCD_vidRowCol+0x2e>
    1e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6e:	21 30       	cpi	r18, 0x01	; 1
    1e70:	31 05       	cpc	r19, r1
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <LCD_vidRowCol+0x38>
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <LCD_vidRowCol+0x40>

{
case 0 : LCD_vidSendCommand(u8y+127);break;// 127 = 0x80 this is first row address
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	81 58       	subi	r24, 0x81	; 129
    1e7a:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
    1e7e:	04 c0       	rjmp	.+8      	; 0x1e88 <LCD_vidRowCol+0x40>

case 1: LCD_vidSendCommand(u8y+191);break;// 191 =0xc0  this is second row address
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	81 54       	subi	r24, 0x41	; 65
    1e84:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>


}

}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <itos>:
void itos(u16 res)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	27 97       	sbiw	r28, 0x07	; 7
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	9f 83       	std	Y+7, r25	; 0x07
    1eac:	8e 83       	std	Y+6, r24	; 0x06
	u8 result[3];
	u8 i;
for(i=0;i<5;i++)
    1eae:	1a 82       	std	Y+2, r1	; 0x02
    1eb0:	1e c0       	rjmp	.+60     	; 0x1eee <itos+0x58>
{
	result[i]=res%10 +'0' ;
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	e8 2f       	mov	r30, r24
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eba:	9f 81       	ldd	r25, Y+7	; 0x07
    1ebc:	2a e0       	ldi	r18, 0x0A	; 10
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	b9 01       	movw	r22, r18
    1ec2:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodhi4>
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	20 5d       	subi	r18, 0xD0	; 208
    1eca:	ce 01       	movw	r24, r28
    1ecc:	03 96       	adiw	r24, 0x03	; 3
    1ece:	e8 0f       	add	r30, r24
    1ed0:	f9 1f       	adc	r31, r25
    1ed2:	20 83       	st	Z, r18
	res=res/10;
    1ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed8:	2a e0       	ldi	r18, 0x0A	; 10
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	b9 01       	movw	r22, r18
    1ede:	0e 94 09 11 	call	0x2212	; 0x2212 <__udivmodhi4>
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
}
void itos(u16 res)
{
	u8 result[3];
	u8 i;
for(i=0;i<5;i++)
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	8a 83       	std	Y+2, r24	; 0x02
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	85 30       	cpi	r24, 0x05	; 5
    1ef2:	f8 f2       	brcs	.-66     	; 0x1eb2 <itos+0x1c>
	result[i]=res%10 +'0' ;
	res=res/10;

}
s8 j ;
for(j=2;j>=0;j--)
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	10 c0       	rjmp	.+32     	; 0x1f1a <itos+0x84>
{
LCD_vidSendChar(result[j]);
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	28 2f       	mov	r18, r24
    1efe:	33 27       	eor	r19, r19
    1f00:	27 fd       	sbrc	r18, 7
    1f02:	30 95       	com	r19
    1f04:	ce 01       	movw	r24, r28
    1f06:	03 96       	adiw	r24, 0x03	; 3
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	80 81       	ld	r24, Z
    1f10:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <LCD_vidSendChar>
	result[i]=res%10 +'0' ;
	res=res/10;

}
s8 j ;
for(j=2;j>=0;j--)
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	81 50       	subi	r24, 0x01	; 1
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	88 23       	and	r24, r24
    1f1e:	6c f7       	brge	.-38     	; 0x1efa <itos+0x64>
LCD_vidSendChar(result[j]);
}



}
    1f20:	27 96       	adiw	r28, 0x07	; 7
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <snak>:
#include "DIO_interface.h"
#include "LCD_interface.h"
#include "ADC_interface.h"
#include <avr/delay.h>
void snak(u16 adc)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <snak+0x6>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
if(adc>500&&adc <1000)
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	21 e0       	ldi	r18, 0x01	; 1
    1f46:	85 3f       	cpi	r24, 0xF5	; 245
    1f48:	92 07       	cpc	r25, r18
    1f4a:	58 f0       	brcs	.+22     	; 0x1f62 <snak+0x30>
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	23 e0       	ldi	r18, 0x03	; 3
    1f52:	88 3e       	cpi	r24, 0xE8	; 232
    1f54:	92 07       	cpc	r25, r18
    1f56:	28 f4       	brcc	.+10     	; 0x1f62 <snak+0x30>
{
	DIO_VidSetPortVal(DIO_PORTD,0x01);
    1f58:	83 e0       	ldi	r24, 0x03	; 3
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    1f60:	76 c0       	rjmp	.+236    	; 0x204e <snak+0x11c>
}
else if(adc>1000&&adc<1500)
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	9a 81       	ldd	r25, Y+2	; 0x02
    1f66:	23 e0       	ldi	r18, 0x03	; 3
    1f68:	89 3e       	cpi	r24, 0xE9	; 233
    1f6a:	92 07       	cpc	r25, r18
    1f6c:	58 f0       	brcs	.+22     	; 0x1f84 <snak+0x52>
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	25 e0       	ldi	r18, 0x05	; 5
    1f74:	8c 3d       	cpi	r24, 0xDC	; 220
    1f76:	92 07       	cpc	r25, r18
    1f78:	28 f4       	brcc	.+10     	; 0x1f84 <snak+0x52>
{
	DIO_VidSetPortVal(DIO_PORTD,0x02);
    1f7a:	83 e0       	ldi	r24, 0x03	; 3
    1f7c:	62 e0       	ldi	r22, 0x02	; 2
    1f7e:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    1f82:	65 c0       	rjmp	.+202    	; 0x204e <snak+0x11c>

}
else if(adc>1500&&adc<2000)
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	25 e0       	ldi	r18, 0x05	; 5
    1f8a:	8d 3d       	cpi	r24, 0xDD	; 221
    1f8c:	92 07       	cpc	r25, r18
    1f8e:	58 f0       	brcs	.+22     	; 0x1fa6 <snak+0x74>
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	27 e0       	ldi	r18, 0x07	; 7
    1f96:	80 3d       	cpi	r24, 0xD0	; 208
    1f98:	92 07       	cpc	r25, r18
    1f9a:	28 f4       	brcc	.+10     	; 0x1fa6 <snak+0x74>
{
	DIO_VidSetPortVal(DIO_PORTD,0x04);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	64 e0       	ldi	r22, 0x04	; 4
    1fa0:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    1fa4:	54 c0       	rjmp	.+168    	; 0x204e <snak+0x11c>

}
else if(adc>2000&&adc<2500)
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	27 e0       	ldi	r18, 0x07	; 7
    1fac:	81 3d       	cpi	r24, 0xD1	; 209
    1fae:	92 07       	cpc	r25, r18
    1fb0:	58 f0       	brcs	.+22     	; 0x1fc8 <snak+0x96>
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	29 e0       	ldi	r18, 0x09	; 9
    1fb8:	84 3c       	cpi	r24, 0xC4	; 196
    1fba:	92 07       	cpc	r25, r18
    1fbc:	28 f4       	brcc	.+10     	; 0x1fc8 <snak+0x96>
{
	DIO_VidSetPortVal(DIO_PORTD,0x08);
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	68 e0       	ldi	r22, 0x08	; 8
    1fc2:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    1fc6:	43 c0       	rjmp	.+134    	; 0x204e <snak+0x11c>

}
else if(adc>2500&&adc<3000)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	29 e0       	ldi	r18, 0x09	; 9
    1fce:	85 3c       	cpi	r24, 0xC5	; 197
    1fd0:	92 07       	cpc	r25, r18
    1fd2:	58 f0       	brcs	.+22     	; 0x1fea <snak+0xb8>
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	2b e0       	ldi	r18, 0x0B	; 11
    1fda:	88 3b       	cpi	r24, 0xB8	; 184
    1fdc:	92 07       	cpc	r25, r18
    1fde:	28 f4       	brcc	.+10     	; 0x1fea <snak+0xb8>
{
	DIO_VidSetPortVal(DIO_PORTD,0x10);
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	60 e1       	ldi	r22, 0x10	; 16
    1fe4:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    1fe8:	32 c0       	rjmp	.+100    	; 0x204e <snak+0x11c>

}
else if(adc>3000&&adc<3500)
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	2b e0       	ldi	r18, 0x0B	; 11
    1ff0:	89 3b       	cpi	r24, 0xB9	; 185
    1ff2:	92 07       	cpc	r25, r18
    1ff4:	58 f0       	brcs	.+22     	; 0x200c <snak+0xda>
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	2d e0       	ldi	r18, 0x0D	; 13
    1ffc:	8c 3a       	cpi	r24, 0xAC	; 172
    1ffe:	92 07       	cpc	r25, r18
    2000:	28 f4       	brcc	.+10     	; 0x200c <snak+0xda>
{
	DIO_VidSetPortVal(DIO_PORTD,0x20);
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	60 e2       	ldi	r22, 0x20	; 32
    2006:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    200a:	21 c0       	rjmp	.+66     	; 0x204e <snak+0x11c>

}
else if(adc>3500&&adc<4000)
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	2d e0       	ldi	r18, 0x0D	; 13
    2012:	8d 3a       	cpi	r24, 0xAD	; 173
    2014:	92 07       	cpc	r25, r18
    2016:	58 f0       	brcs	.+22     	; 0x202e <snak+0xfc>
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	2f e0       	ldi	r18, 0x0F	; 15
    201e:	80 3a       	cpi	r24, 0xA0	; 160
    2020:	92 07       	cpc	r25, r18
    2022:	28 f4       	brcc	.+10     	; 0x202e <snak+0xfc>
{
	DIO_VidSetPortVal(DIO_PORTD,0x40);
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	60 e4       	ldi	r22, 0x40	; 64
    2028:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>
    202c:	10 c0       	rjmp	.+32     	; 0x204e <snak+0x11c>

}
else if(adc>4000&&adc<4500)
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	2f e0       	ldi	r18, 0x0F	; 15
    2034:	81 3a       	cpi	r24, 0xA1	; 161
    2036:	92 07       	cpc	r25, r18
    2038:	50 f0       	brcs	.+20     	; 0x204e <snak+0x11c>
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	9a 81       	ldd	r25, Y+2	; 0x02
    203e:	21 e1       	ldi	r18, 0x11	; 17
    2040:	84 39       	cpi	r24, 0x94	; 148
    2042:	92 07       	cpc	r25, r18
    2044:	20 f4       	brcc	.+8      	; 0x204e <snak+0x11c>
{
	DIO_VidSetPortVal(DIO_PORTD,0x80);
    2046:	83 e0       	ldi	r24, 0x03	; 3
    2048:	60 e8       	ldi	r22, 0x80	; 128
    204a:	0e 94 1c 09 	call	0x1238	; 0x1238 <DIO_VidSetPortVal>

}
}
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <main>:

void main (void)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	61 97       	sbiw	r28, 0x11	; 17
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
DIO_VidSetPortDir(DIO_PORTC,DIO_PORTOUTPUT);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	6f ef       	ldi	r22, 0xFF	; 255
    2070:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_VidSetPortDir>
DIO_VidSetPortDir(DIO_PORTB,DIO_PORTOUTPUT);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	6f ef       	ldi	r22, 0xFF	; 255
    2078:	0e 94 60 09 	call	0x12c0	; 0x12c0 <DIO_VidSetPortDir>
u16 ADC ;
u8 state ;
DIO_VidSetPinDir(DIO_PIN0,DIO_PORTA,DIO_INPUT); //ADC channel 0 as input
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	0e 94 0c 07 	call	0xe18	; 0xe18 <DIO_VidSetPinDir>
DIO_VidSetPinDir(DIO_PIN0,DIO_PORTD,DIO_INPUT); // Port D pin 0 as switch to choose C or F
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	63 e0       	ldi	r22, 0x03	; 3
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 0c 07 	call	0xe18	; 0xe18 <DIO_VidSetPinDir>
DIO_VidSetPinVal(DIO_PIN0,DIO_PORTD,DIO_HIGH);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	63 e0       	ldi	r22, 0x03	; 3
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_VidSetPinVal>
LCD_vidInit();
    209a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <LCD_vidInit>
LCD_vidSendCommand(LCD_DISPON_CURSON);
    209e:	8e e0       	ldi	r24, 0x0E	; 14
    20a0:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
LCD_vidWriteStr("Welcome to ");
    20a4:	80 e6       	ldi	r24, 0x60	; 96
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_vidWriteStr>
LCD_vidRowCol(1,0);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_vidRowCol>
LCD_vidWriteStr("Temperature V 1.0 ");
    20b4:	8c e6       	ldi	r24, 0x6C	; 108
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_vidWriteStr>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	aa e7       	ldi	r26, 0x7A	; 122
    20c2:	b4 e4       	ldi	r27, 0x44	; 68
    20c4:	8b 87       	std	Y+11, r24	; 0x0b
    20c6:	9c 87       	std	Y+12, r25	; 0x0c
    20c8:	ad 87       	std	Y+13, r26	; 0x0d
    20ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a ef       	ldi	r20, 0xFA	; 250
    20da:	54 e4       	ldi	r21, 0x44	; 68
    20dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8f 83       	std	Y+7, r24	; 0x07
    20e6:	98 87       	std	Y+8, r25	; 0x08
    20e8:	a9 87       	std	Y+9, r26	; 0x09
    20ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <main+0xb6>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	3f c0       	rjmp	.+126    	; 0x218c <main+0x134>
	else if (__tmp > 65535)
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6b 85       	ldd	r22, Y+11	; 0x0b
    2128:	7c 85       	ldd	r23, Y+12	; 0x0c
    212a:	8d 85       	ldd	r24, Y+13	; 0x0d
    212c:	9e 85       	ldd	r25, Y+14	; 0x0e
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	0f c0       	rjmp	.+30     	; 0x216e <main+0x116>
    2150:	88 ec       	ldi	r24, 0xC8	; 200
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <main+0x104>
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <main+0xf8>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <main+0x140>
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1000);
ADC_VidInit();
    21a0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <ADC_VidInit>
LCD_vidSendCommand(LCD_CLR);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	0e 94 9e 0c 	call	0x193c	; 0x193c <LCD_vidSendCommand>
LCD_vidWriteStr("Temperature is:");
    21aa:	8f e7       	ldi	r24, 0x7F	; 127
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <LCD_vidWriteStr>
while(1)
{
state= DIO_u8GetPinVal(DIO_PORTD,DIO_PIN0);
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	0e 94 a4 09 	call	0x1348	; 0x1348 <DIO_u8GetPinVal>
    21ba:	8f 87       	std	Y+15, r24	; 0x0f
	ADC=ADC_u16GetADCRead(ADC_CH0);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	0e 94 72 06 	call	0xce4	; 0xce4 <ADC_u16GetADCRead>
    21c2:	99 8b       	std	Y+17, r25	; 0x11
    21c4:	88 8b       	std	Y+16, r24	; 0x10
if(1==state)
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	81 30       	cpi	r24, 0x01	; 1
    21ca:	81 f4       	brne	.+32     	; 0x21ec <main+0x194>
{
	LCD_vidRowCol(1,2);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	62 e0       	ldi	r22, 0x02	; 2
    21d0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_vidRowCol>
itos(u8ADC_GetTempInC(ADC));
    21d4:	88 89       	ldd	r24, Y+16	; 0x10
    21d6:	99 89       	ldd	r25, Y+17	; 0x11
    21d8:	0e 94 b9 06 	call	0xd72	; 0xd72 <u8ADC_GetTempInC>
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <itos>
LCD_vidSendChar(' C');
    21e4:	83 e4       	ldi	r24, 0x43	; 67
    21e6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <LCD_vidSendChar>
    21ea:	e3 cf       	rjmp	.-58     	; 0x21b2 <main+0x15a>
//LCD_vidSendCommand('0x2103');

}
else if (0==state)
    21ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ee:	88 23       	and	r24, r24
    21f0:	01 f7       	brne	.-64     	; 0x21b2 <main+0x15a>
{
	LCD_vidRowCol(1,2);
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <LCD_vidRowCol>
itos(u8ADC_GetTempInF(ADC));
    21fa:	88 89       	ldd	r24, Y+16	; 0x10
    21fc:	99 89       	ldd	r25, Y+17	; 0x11
    21fe:	0e 94 d1 06 	call	0xda2	; 0xda2 <u8ADC_GetTempInF>
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <itos>
LCD_vidSendChar(' F');
    220a:	86 e4       	ldi	r24, 0x46	; 70
    220c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <LCD_vidSendChar>
    2210:	d0 cf       	rjmp	.-96     	; 0x21b2 <main+0x15a>

00002212 <__udivmodhi4>:
    2212:	aa 1b       	sub	r26, r26
    2214:	bb 1b       	sub	r27, r27
    2216:	51 e1       	ldi	r21, 0x11	; 17
    2218:	07 c0       	rjmp	.+14     	; 0x2228 <__udivmodhi4_ep>

0000221a <__udivmodhi4_loop>:
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	a6 17       	cp	r26, r22
    2220:	b7 07       	cpc	r27, r23
    2222:	10 f0       	brcs	.+4      	; 0x2228 <__udivmodhi4_ep>
    2224:	a6 1b       	sub	r26, r22
    2226:	b7 0b       	sbc	r27, r23

00002228 <__udivmodhi4_ep>:
    2228:	88 1f       	adc	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	5a 95       	dec	r21
    222e:	a9 f7       	brne	.-22     	; 0x221a <__udivmodhi4_loop>
    2230:	80 95       	com	r24
    2232:	90 95       	com	r25
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	08 95       	ret

0000223a <__prologue_saves__>:
    223a:	2f 92       	push	r2
    223c:	3f 92       	push	r3
    223e:	4f 92       	push	r4
    2240:	5f 92       	push	r5
    2242:	6f 92       	push	r6
    2244:	7f 92       	push	r7
    2246:	8f 92       	push	r8
    2248:	9f 92       	push	r9
    224a:	af 92       	push	r10
    224c:	bf 92       	push	r11
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	ca 1b       	sub	r28, r26
    2264:	db 0b       	sbc	r29, r27
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	09 94       	ijmp

00002272 <__epilogue_restores__>:
    2272:	2a 88       	ldd	r2, Y+18	; 0x12
    2274:	39 88       	ldd	r3, Y+17	; 0x11
    2276:	48 88       	ldd	r4, Y+16	; 0x10
    2278:	5f 84       	ldd	r5, Y+15	; 0x0f
    227a:	6e 84       	ldd	r6, Y+14	; 0x0e
    227c:	7d 84       	ldd	r7, Y+13	; 0x0d
    227e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2280:	9b 84       	ldd	r9, Y+11	; 0x0b
    2282:	aa 84       	ldd	r10, Y+10	; 0x0a
    2284:	b9 84       	ldd	r11, Y+9	; 0x09
    2286:	c8 84       	ldd	r12, Y+8	; 0x08
    2288:	df 80       	ldd	r13, Y+7	; 0x07
    228a:	ee 80       	ldd	r14, Y+6	; 0x06
    228c:	fd 80       	ldd	r15, Y+5	; 0x05
    228e:	0c 81       	ldd	r16, Y+4	; 0x04
    2290:	1b 81       	ldd	r17, Y+3	; 0x03
    2292:	aa 81       	ldd	r26, Y+2	; 0x02
    2294:	b9 81       	ldd	r27, Y+1	; 0x01
    2296:	ce 0f       	add	r28, r30
    2298:	d1 1d       	adc	r29, r1
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	ed 01       	movw	r28, r26
    22a6:	08 95       	ret

000022a8 <_exit>:
    22a8:	f8 94       	cli

000022aa <__stop_program>:
    22aa:	ff cf       	rjmp	.-2      	; 0x22aa <__stop_program>
